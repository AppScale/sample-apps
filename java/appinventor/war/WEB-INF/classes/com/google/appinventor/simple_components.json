[{ "name": "AccelerometerSensor",
  "version": "2",
  "categoryString": "SENSORS",
  "helpString": "<p>Non-visible component that can detect shaking and measure acceleration approximately in three dimensions using SI units (m/s<sup>2</sup>).  The components are: <ul><li> <strong>xAccel</strong>: 0 when the phone is at rest on a flat      surface, positive when the phone is tilted to the right (i.e.,      its left side is raised), and negative when the phone is tilted      to the left (i.e., its right size is raised).</li> <li> <strong>yAccel</strong>: 0 when the phone is at rest on a flat      surface, positive when its bottom is raised, and negative when      its top is raised. </li> <li> <strong>zAccel</strong>: Equal to -9.8 (earth's gravity in meters per      second per second when the device is at rest parallel to the ground      with the display facing up,      0 when perpindicular to the ground, and +9.8 when facing down.       The value can also be affected by accelerating it with or against      gravity. </li></ul></p> ",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/accelerometersensor.png",
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "MinimumInterval", "editorType": "non_negative_integer", "defaultValue": "400"}],
  "events": []}
,
{ "name": "ActivityStarter",
  "version": "4",
  "categoryString": "MISC",
  "helpString": "<p>A component that can launch an activity using the <code>StartActivity</code> method.</p><p>Activities that can be launched include:<ul> <li> starting other App Inventor for Android apps </li> <li> starting the camera application </li> <li> performing web search </li> <li> opening a browser to a specified web page</li> <li> opening the map application to a specified location</li></ul> You can also launch activities that return text data.  See the documentation on using the Activity Starter for examples.</p>",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/activityStarter.png",
  "properties": [{ "name": "Action", "editorType": "string", "defaultValue": ""},
{ "name": "ActivityClass", "editorType": "string", "defaultValue": ""},
{ "name": "ActivityPackage", "editorType": "string", "defaultValue": ""},
{ "name": "DataType", "editorType": "string", "defaultValue": ""},
{ "name": "DataUri", "editorType": "string", "defaultValue": ""},
{ "name": "ExtraKey", "editorType": "string", "defaultValue": ""},
{ "name": "ExtraValue", "editorType": "string", "defaultValue": ""},
{ "name": "ResultName", "editorType": "string", "defaultValue": ""}],
  "events": []}
,
{ "name": "Ball",
  "version": "5",
  "categoryString": "ANIMATION",
  "helpString": "<p>A round 'sprite' that can be placed on a <code>Canvas</code>, where it can react to touches and drags, interact with other sprites (<code>ImageSprite</code>s and other <code>Ball</code>s) and the edge of the Canvas, and move according to its property values.</p><p>For example, to have a <code>Ball</code> move 4 pixels toward the top of a <code>Canvas</code> every 500 milliseconds (half second), you would set the <code>Speed</code> property to 4 [pixels], the <code>Interval</code> property to 500 [milliseconds], the <code>Heading</code> property to 90 [degrees], and the <code>Enabled</code> property to <code>True</code>.  These and its other properties can be changed at any time.</p><p>The difference between a Ball and an <code>ImageSprite</code> is that the latter can get its appearance from an image file, while a Ball's appearance can only be changed by varying its <code>PaintColor</code> and <code>Radius</code> properties.</p>",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Heading", "editorType": "float", "defaultValue": "0"},
{ "name": "Interval", "editorType": "non_negative_integer", "defaultValue": "100"},
{ "name": "PaintColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "Radius", "editorType": "non_negative_integer", "defaultValue": "5"},
{ "name": "Speed", "editorType": "float", "defaultValue": "0.0"},
{ "name": "Visible", "editorType": "boolean", "defaultValue": "True"},
{ "name": "X", "editorType": "float", "defaultValue": "0.0"},
{ "name": "Y", "editorType": "float", "defaultValue": "0.0"},
{ "name": "Z", "editorType": "float", "defaultValue": "1.0"}],
  "events": []}
,
{ "name": "BarcodeScanner",
  "version": "1",
  "categoryString": "MISC",
  "helpString": "Component for using the Barcode Scanner to read a barcode",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/barcodeScanner.png",
  "properties": [],
  "events": []}
,
{ "name": "BluetoothClient",
  "version": "5",
  "categoryString": "MISC",
  "helpString": "Bluetooth client component",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/bluetooth.png",
  "properties": [{ "name": "CharacterEncoding", "editorType": "string", "defaultValue": "UTF-8"},
{ "name": "DelimiterByte", "editorType": "non_negative_integer", "defaultValue": "0"},
{ "name": "HighByteFirst", "editorType": "boolean", "defaultValue": "False"},
{ "name": "Secure", "editorType": "boolean", "defaultValue": "True"}],
  "events": []}
,
{ "name": "BluetoothServer",
  "version": "5",
  "categoryString": "MISC",
  "helpString": "Bluetooth server component",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/bluetooth.png",
  "properties": [{ "name": "CharacterEncoding", "editorType": "string", "defaultValue": "UTF-8"},
{ "name": "DelimiterByte", "editorType": "non_negative_integer", "defaultValue": "0"},
{ "name": "HighByteFirst", "editorType": "boolean", "defaultValue": "False"},
{ "name": "Secure", "editorType": "boolean", "defaultValue": "True"}],
  "events": []}
,
{ "name": "Button",
  "version": "5",
  "categoryString": "BASIC",
  "helpString": "Button with the ability to detect clicks.  Many aspects of its appearance can be changed, as well as whether it is clickable (<code>Enabled</code>), can be changed in the Designer or in the Blocks Editor.",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "Image", "editorType": "asset", "defaultValue": ""},
{ "name": "Shape", "editorType": "button_shape", "defaultValue": "0"},
{ "name": "ShowFeedback", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Text", "editorType": "string", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "events": []}
,
{ "name": "Camcorder",
  "version": "1",
  "categoryString": "MEDIA",
  "helpString": "A component to record a video using the device's camcorder.After the video is recorded, the name of the file on the phone containing the clip is available as an argument to the AfterRecording event. The file name can be used, for example, to set the source property of a VideoPlayer component.",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/camcorder.png",
  "properties": [],
  "events": []}
,
{ "name": "Camera",
  "version": "1",
  "categoryString": "MEDIA",
  "helpString": "A component to take a picture using the device's camera. After the picture is taken, the name of the file on the phone containing the picture is available as an argument to the AfterPicture event. The file name can be used, for example, to set the Picture property of an Image component.",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/camera.png",
  "properties": [],
  "events": []}
,
{ "name": "Canvas",
  "version": "7",
  "categoryString": "BASIC",
  "helpString": "<p>A two-dimensional touch-sensitive rectangular panel on which drawing can be done and sprites can be moved.</p> <p>The <code>BackgroundColor</code>, <code>PaintColor</code>, <code>BackgroundImage</code>, <code>Width</code>, and <code>Height</code> of the Canvas can be set in either the Designer or in the Blocks Editor.  The <code>Width</code> and <code>Height</code> are measured in pixels and must be positive.</p><p>Any location on the Canvas can be specified as a pair of (X, Y) values, where <ul> <li>X is the number of pixels away from the left edge of the Canvas</li><li>Y is the number of pixels away from the top edge of the Canvas</li></ul>.</p> <p>There are events to tell when and where a Canvas has been touched or a <code>Sprite</code> (<code>ImageSprite</code> or <code>Ball</code>) has been dragged.  There are also methods for drawing points, lines, and circles.</p>",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&HFFFFFFFF"},
{ "name": "BackgroundImage", "editorType": "asset", "defaultValue": ""},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "LineWidth", "editorType": "non_negative_float", "defaultValue": "2.0"},
{ "name": "PaintColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "events": []}
,
{ "name": "CheckBox",
  "version": "2",
  "categoryString": "BASIC",
  "helpString": "Checkbox that raises an event when the user clicks on it. There are many properties affecting its appearance that can be set in the Designer or Blocks Editor.",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00FFFFFF"},
{ "name": "Checked", "editorType": "boolean", "defaultValue": "False"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "Text", "editorType": "string", "defaultValue": ""},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "events": []}
,
{ "name": "Clock",
  "version": "1",
  "categoryString": "BASIC",
  "helpString": "Non-visible component that provides the phone's clock, a timer, and time calculations.",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/clock.png",
  "properties": [{ "name": "TimerAlwaysFires", "editorType": "boolean", "defaultValue": "True"},
{ "name": "TimerEnabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "TimerInterval", "editorType": "non_negative_integer", "defaultValue": "1000"}],
  "events": []}
,
{ "name": "ContactPicker",
  "version": "4",
  "categoryString": "SOCIAL",
  "helpString": "<p>A button that, when clicked on, displays a list of the contacts to choose among. After the user has made a selection, the following properties will be set to information about the chosen contact: <ul><li> <code>ContactName</code>: the contact's name </li> <li> <code>EmailAddress</code>: the contact's primary email address </li> <li> <code>Picture</code>: the name of the file containing the contact's image, which can be used as a <code>Picture</code> property value for the <code>Image</code> or <code>ImageSprite</code> component.</li></ul></p><p>Other properties affect the appearance of the button (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be clicked on (<code>Enabled</code>).</p><p>Picking is not supported on all phones.  If it fails, this component will show a notification.  The error behavior can be overridden with the Screen.ErrorOccurred event handler.</p>",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "Image", "editorType": "asset", "defaultValue": ""},
{ "name": "Shape", "editorType": "button_shape", "defaultValue": "0"},
{ "name": "ShowFeedback", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Text", "editorType": "string", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "events": []}
,
{ "name": "EmailPicker",
  "version": "2",
  "categoryString": "SOCIAL",
  "helpString": "<p>A text box in which a user can begin entering an email address of a contact and be offered auto-completion.  The initial value of the box and the value after user entry is in the <code>Text</code> property.  If the <code>Text</code> property is initially empty, the contents of the <code>Hint</code> property will be faintly shown in the text box as a hint to the user.</p> <p>Other properties affect the appearance of the text box (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be used (<code>Enabled</code>).</p><p>Text boxes are usually used with the <code>Button</code> component, with the user clicking on the button when text entry is complete.</p>",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "Hint", "editorType": "string", "defaultValue": ""},
{ "name": "Text", "editorType": "string", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "0"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "events": []}
,
{ "name": "Form",
  "version": "10",
  "categoryString": "ARRANGEMENTS",
  "helpString": "Top-level component containing all other components in the program",
  "showOnPalette": "false",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "AlignHorizontal", "editorType": "horizontal_alignment", "defaultValue": "1"},
{ "name": "AlignVertical", "editorType": "vertical_alignment", "defaultValue": "1"},
{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&HFFFFFFFF"},
{ "name": "BackgroundImage", "editorType": "asset", "defaultValue": ""},
{ "name": "CloseScreenAnimation", "editorType": "screen_animation", "defaultValue": "default"},
{ "name": "Icon", "editorType": "asset", "defaultValue": ""},
{ "name": "OpenScreenAnimation", "editorType": "screen_animation", "defaultValue": "default"},
{ "name": "ScreenOrientation", "editorType": "screen_orientation", "defaultValue": "unspecified"},
{ "name": "Scrollable", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Title", "editorType": "string", "defaultValue": ""},
{ "name": "VersionCode", "editorType": "non_negative_integer", "defaultValue": "1"},
{ "name": "VersionName", "editorType": "string", "defaultValue": "1.0"}],
  "events": []}
,
{ "name": "FusiontablesControl",
  "version": "2",
  "categoryString": "EXPERIMENTAL",
  "helpString": "<p>A non-visible component that communicates with Google Fusion Tables. Fusion Tables let you store, share, query and visualize data tables; this component lets you query, create, and modify these tables.</p> <p>This component uses the <a href='https://developers.google.com/fusiontables/docs/v1/getting_started' target='_blank'>Fusion Tables API V1.0</a>. <p>In order to develop apps that use Fusiontables, you must obtain an API Key.<p>To get an API key, follow these instructions.</p> <ol><li>Go to your <a href='https://code.google.com/apis/console/' target='_blank'>Google APIs Console</a> and login if necessary.</li><li>Select the <i>Services</i> item from the menu on the left.</li><li>Choose the <i>Fusiontables</i> service from the list provided and turn it on.</li><li>Go back to the main menu and select the <i>API Access</i> item. </li></ol><p>Your API Key will be near the bottom of that pane in the section called 'Simple API Access'.You will have to provide that key as the value for the <i>ApiKey</i> property in your Fusiontables app.</p><p>Once you have an API key, set the value of the <i>Query</i> property to a valid Fusiontables SQL query and call <i>SendQuery</i> to execute the query.  App Inventor will send the query to the Fusion Tables server and the <i>GotResult</i> block will fire when a result is returned from the server.Query results will be returned in CSV format, and can be converted to list format using the 'list from csv table' or 'list from csv row' blocks.</p><p>Note that you do not need to worry about UTF-encoding the query. But you do need to make sure the query follows the syntax described in <a href='https://developers.google.com/fusiontables/docs/v1/getting_started' target='_blank'>the reference manual</a>, which means that things like capitalization for names of columns matters, and that single quotes must be used around column names if there are spaces in them.</p>",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/fusiontables.png",
  "properties": [{ "name": "ApiKey", "editorType": "string", "defaultValue": ""},
{ "name": "Query", "editorType": "string", "defaultValue": "show tables"}],
  "events": []}
,
{ "name": "GameClient",
  "version": "1",
  "categoryString": "EXPERIMENTAL",
  "helpString": "Provides a way for applications to communicate with online game servers",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/gameClient.png",
  "properties": [{ "name": "GameId", "editorType": "string", "defaultValue": ""},
{ "name": "ServiceURL", "editorType": "string", "defaultValue": "http://appinvgameserver.appspot.com"}],
  "events": []}
,
{ "name": "HorizontalArrangement",
  "version": "2",
  "categoryString": "ARRANGEMENTS",
  "helpString": "<p>A formatting element in which to place components that should be displayed from left to right.  If you wish to have components displayed one over another, use <code>VerticalArrangement</code> instead.</p>",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "AlignHorizontal", "editorType": "horizontal_alignment", "defaultValue": "1"},
{ "name": "AlignVertical", "editorType": "vertical_alignment", "defaultValue": "1"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "events": []}
,
{ "name": "Image",
  "version": "1",
  "categoryString": "BASIC",
  "helpString": "Component for displaying images.  The picture to display, and other aspects of the Image's appearance, can be specified in the Designer or in the Blocks Editor.",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "Picture", "editorType": "asset", "defaultValue": ""},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "events": []}
,
{ "name": "ImagePicker",
  "version": "5",
  "categoryString": "MEDIA",
  "helpString": "A special-purpose button. When the user taps an image picker, the device's image gallery appears, and the user can choose an image. After an image is picked, it is saved on the SD card and the <code>ImageFile</code> property will be the name of the file where the image is stored. In order to not fill up storage, a maximum of 10 images will be stored.  Picking more images will delete previous images, in order from oldest to newest.",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "Image", "editorType": "asset", "defaultValue": ""},
{ "name": "Shape", "editorType": "button_shape", "defaultValue": "0"},
{ "name": "ShowFeedback", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Text", "editorType": "string", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "events": []}
,
{ "name": "ImageSprite",
  "version": "6",
  "categoryString": "ANIMATION",
  "helpString": "<p>A 'sprite' that can be placed on a <code>Canvas</code>, where it can react to touches and drags, interact with other sprites (<code>Ball</code>s and other <code>ImageSprite</code>s) and the edge of the Canvas, and move according to its property values.  Its appearance is that of the image specified in its <code>Picture</code> property (unless its <code>Visible</code> property is <code>False</code>.</p> <p>To have an <code>ImageSprite</code> move 10 pixels to the left every 1000 milliseconds (one second), for example, you would set the <code>Speed</code> property to 10 [pixels], the <code>Interval</code> property to 1000 [milliseconds], the <code>Heading</code> property to 180 [degrees], and the <code>Enabled</code> property to <code>True</code>.  A sprite whose <code>Rotates</code> property is <code>True</code> will rotate its image as the sprite's <code>Heading</code> changes.  Checking for collisions with a rotated sprite currently checks the sprite's unrotated position so that collision checking will be inaccurate for tall narrow or short wide sprites that are rotated.  Any of the sprite properties can be changed at any time under program control.</p> ",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Heading", "editorType": "float", "defaultValue": "0"},
{ "name": "Interval", "editorType": "non_negative_integer", "defaultValue": "100"},
{ "name": "Picture", "editorType": "asset", "defaultValue": ""},
{ "name": "Rotates", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Speed", "editorType": "float", "defaultValue": "0.0"},
{ "name": "Visible", "editorType": "boolean", "defaultValue": "True"},
{ "name": "X", "editorType": "float", "defaultValue": "0.0"},
{ "name": "Y", "editorType": "float", "defaultValue": "0.0"},
{ "name": "Z", "editorType": "float", "defaultValue": "1.0"}],
  "events": []}
,
{ "name": "Label",
  "version": "2",
  "categoryString": "BASIC",
  "helpString": "A Label displays a piece of text, which is specified through the <code>Text</code> property.  Other properties, all of which can be set in the Designer or Blocks Editor, control the appearance and placement of the text.",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00FFFFFF"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "Text", "editorType": "string", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "0"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "events": []}
,
{ "name": "ListPicker",
  "version": "6",
  "categoryString": "BASIC",
  "helpString": "<p>A button that, when clicked on, displays a list of texts for the user to choose among. The texts can be specified through the Designer or Blocks Editor by setting the <code>ElementsFromString</code> property to their string-separated concatenation (for example, <em>choice 1, choice 2, choice 3</em>) or by setting the <code>Elements</code> property to a List in the Blocks editor.</p><p>Other properties affect the appearance of the button (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be clicked on (<code>Enabled</code>).</p>",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "ElementsFromString", "editorType": "string", "defaultValue": ""},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "Image", "editorType": "asset", "defaultValue": ""},
{ "name": "Selection", "editorType": "string", "defaultValue": ""},
{ "name": "Shape", "editorType": "button_shape", "defaultValue": "0"},
{ "name": "ShowFeedback", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Text", "editorType": "string", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "events": []}
,
{ "name": "LocationSensor",
  "version": "2",
  "categoryString": "SENSORS",
  "helpString": "<p>Non-visible component providing location information, including longitude, latitude, altitude (if supported by the device), and address.  This can also perform 'geocoding', converting a given address (not necessarily the current one) to a latitude (with the <code>LatitudeFromAddress</code> method) and a longitude (with the <code>LongitudeFromAddress</code> method).</p><p>In order to function, the component must have its <code>Enabled</code> property set to True, and the device must have location sensing enabled through either wireless networks or GPS satellites (if outside).</p>",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/locationSensor.png",
  "properties": [{ "name": "DistanceInterval", "editorType": "sensor_dist_interval", "defaultValue": "5"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "TimeInterval", "editorType": "sensor_time_interval", "defaultValue": "60000"}],
  "events": []}
,
{ "name": "Notifier",
  "version": "2",
  "categoryString": "MISC",
  "helpString": "Component that creates alert messages, popup dialogs, and log entries.",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/notifier.png",
  "properties": [],
  "events": []}
,
{ "name": "NxtColorSensor",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a color sensor on a LEGO MINDSTORMS NXT robot.",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "properties": [{ "name": "AboveRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "BelowRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""},
{ "name": "BottomOfRange", "editorType": "non_negative_integer", "defaultValue": "256"},
{ "name": "ColorChangedEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "DetectColor", "editorType": "boolean", "defaultValue": "True"},
{ "name": "GenerateColor", "editorType": "lego_nxt_generated_color", "defaultValue": "&H00FFFFFF"},
{ "name": "SensorPort", "editorType": "lego_nxt_sensor_port", "defaultValue": "3"},
{ "name": "TopOfRange", "editorType": "non_negative_integer", "defaultValue": "767"},
{ "name": "WithinRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"}],
  "events": []}
,
{ "name": "NxtDirectCommands",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a low-level interface to a LEGO MINDSTORMS NXT robot, with functions to send NXT Direct Commands.",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""}],
  "events": []}
,
{ "name": "NxtDrive",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a LEGO MINDSTORMS NXT robot, with functions that can move and turn the robot.",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""},
{ "name": "DriveMotors", "editorType": "string", "defaultValue": "CB"},
{ "name": "StopBeforeDisconnect", "editorType": "boolean", "defaultValue": "True"},
{ "name": "WheelDiameter", "editorType": "float", "defaultValue": "4.32"}],
  "events": []}
,
{ "name": "NxtLightSensor",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a light sensor on a LEGO MINDSTORMS NXT robot.",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "properties": [{ "name": "AboveRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "BelowRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""},
{ "name": "BottomOfRange", "editorType": "non_negative_integer", "defaultValue": "256"},
{ "name": "GenerateLight", "editorType": "boolean", "defaultValue": "False"},
{ "name": "SensorPort", "editorType": "lego_nxt_sensor_port", "defaultValue": "3"},
{ "name": "TopOfRange", "editorType": "non_negative_integer", "defaultValue": "767"},
{ "name": "WithinRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"}],
  "events": []}
,
{ "name": "NxtSoundSensor",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a sound sensor on a LEGO MINDSTORMS NXT robot.",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "properties": [{ "name": "AboveRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "BelowRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""},
{ "name": "BottomOfRange", "editorType": "non_negative_integer", "defaultValue": "256"},
{ "name": "SensorPort", "editorType": "lego_nxt_sensor_port", "defaultValue": "2"},
{ "name": "TopOfRange", "editorType": "non_negative_integer", "defaultValue": "767"},
{ "name": "WithinRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"}],
  "events": []}
,
{ "name": "NxtTouchSensor",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to a touch sensor on a LEGO MINDSTORMS NXT robot.",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "properties": [{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""},
{ "name": "PressedEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "ReleasedEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "SensorPort", "editorType": "lego_nxt_sensor_port", "defaultValue": "1"}],
  "events": []}
,
{ "name": "NxtUltrasonicSensor",
  "version": "1",
  "categoryString": "LEGOMINDSTORMS",
  "helpString": "A component that provides a high-level interface to an ultrasonic sensor on a LEGO MINDSTORMS NXT robot.",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/legoMindstormsNxt.png",
  "properties": [{ "name": "AboveRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "BelowRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "BluetoothClient", "editorType": "BluetoothClient", "defaultValue": ""},
{ "name": "BottomOfRange", "editorType": "non_negative_integer", "defaultValue": "30"},
{ "name": "SensorPort", "editorType": "lego_nxt_sensor_port", "defaultValue": "4"},
{ "name": "TopOfRange", "editorType": "non_negative_integer", "defaultValue": "90"},
{ "name": "WithinRangeEventEnabled", "editorType": "boolean", "defaultValue": "False"}],
  "events": []}
,
{ "name": "OrientationSensor",
  "version": "2",
  "categoryString": "SENSORS",
  "helpString": "<p>Non-visible component providing information about the device's physical orientation in three dimensions: <ul> <li> <strong>Roll</strong>: 0 degrees when the device is level, increases to      90 degrees as the device is tilted up on its left side, and      decreases to -90 degrees when the device is tilted up on its right side.      </li> <li> <strong>Pitch</strong>: 0 degrees when the device is level, up to      90 degrees as the device is tilted so its top is pointing down,      up to 180 degrees as it gets turned over.  Similarly, as the device      is tilted so its bottom points down, pitch decreases to -90      degrees, then further decreases to -180 degrees as it gets turned all the way      over.</li> <li> <strong>Azimuth</strong>: 0 degrees when the top of the device is      pointing north, 90 degrees when it is pointing east, 180 degrees      when it is pointing south, 270 degrees when it is pointing west,      etc.</li></ul>     These measurements assume that the device itself is not moving.</p>",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/orientationsensor.png",
  "properties": [{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"}],
  "events": []}
,
{ "name": "PasswordTextBox",
  "version": "2",
  "categoryString": "BASIC",
  "helpString": "<p>A box for entering passwords.  This is the same as the ordinary <code>TextBox</code> component except this does not display the characters typed by the user.</p><p>The value of the text in the box can be found or set through the <code>Text</code> property. If blank, the <code>Hint</code> property, which appears as faint text in the box, can provide the user with guidance as to what to type.</p> <p>Text boxes are usually used with the <code>Button</code> component, with the user clicking on the button when text entry is complete.</p>",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "Hint", "editorType": "string", "defaultValue": ""},
{ "name": "Text", "editorType": "string", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "0"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "events": []}
,
{ "name": "Pedometer",
  "version": "1",
  "categoryString": "INTERNAL",
  "helpString": "Component that can count steps.",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/pedometer.png",
  "properties": [{ "name": "CalibrateStrideLength", "editorType": "boolean", "defaultValue": "true"},
{ "name": "StopDetectionTimeout", "editorType": "non_negative_integer", "defaultValue": "2000"},
{ "name": "StrideLength", "editorType": "non_negative_float", "defaultValue": "0.73"},
{ "name": "UseGPS", "editorType": "boolean", "defaultValue": "true"}],
  "events": []}
,
{ "name": "PhoneCall",
  "version": "1",
  "categoryString": "SOCIAL",
  "helpString": "<p>A non-visible component that makes a phone call to the number specified in the <code>PhoneNumber</code> property, which can be set either in the Designer or Blocks Editor. The component has a <code>MakePhoneCall</code> method, enabling the program to launch a phone call.</p><p>Often, this component is used with the <code>ContactPicker</code> component, which lets the user select a contact from the ones stored on the phone and sets the <code>PhoneNumber</code> property to the contact's phone number.</p><p>To directly specify the phone number (e.g., 650-555-1212), set the <code>PhoneNumber</code> property to a Text with the specified digits (e.g., '6505551212').  Dashes, dots, and parentheses may be included (e.g., '(650)-555-1212') but will be ignored; spaces may not be included.</p>",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/phoneCall.png",
  "properties": [{ "name": "PhoneNumber", "editorType": "string", "defaultValue": ""}],
  "events": []}
,
{ "name": "PhoneNumberPicker",
  "version": "4",
  "categoryString": "SOCIAL",
  "helpString": "<p>A button that, when clicked on, displays a list of the contacts' phone numbers to choose among. After the user has made a selection, the following properties will be set to information about the chosen contact: <ul><li> <code>ContactName</code>: the contact's name </li> <li> <code>PhoneNumber</code>: the contact's phone number </li> <li> <code>EmailAddress</code>: the contact's email address </li> <li> <code>Picture</code>: the name of the file containing the contact's image, which can be used as a <code>Picture</code> property value for the <code>Image</code> or <code>ImageSprite</code> component.</li></ul></p><p>Other properties affect the appearance of the button (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be clicked on (<code>Enabled</code>).</p><p>Picking is not supported on all phones.  If it fails, this component will show a notification.  This default error behavior can be overridden with the Screen.ErrorOccurred event handler.</p>",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "Image", "editorType": "asset", "defaultValue": ""},
{ "name": "Shape", "editorType": "button_shape", "defaultValue": "0"},
{ "name": "ShowFeedback", "editorType": "boolean", "defaultValue": "True"},
{ "name": "Text", "editorType": "string", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "1"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "events": []}
,
{ "name": "PhoneStatus",
  "version": "1",
  "categoryString": "INTERNAL",
  "helpString": "Component that returns information about the phone.",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/phoneip.png",
  "properties": [],
  "events": []}
,
{ "name": "Player",
  "version": "5",
  "categoryString": "MEDIA",
  "helpString": "<p>Multimedia component that plays audio or video and controls phone vibration.  The name of a multimedia field is specified in the <code>Source</code> property, which can be set in the Designer or in the Blocks Editor.  The length of time for a vibration is specified in the Blocks Editor in milliseconds (thousandths of a second).</p><p>For legal sound and video formats, see <a href='http://developer.android.com/guide/appendix/media-formats.html' target='_blank'>Android Supported Media Formats</a>.</p><p>If you will only be playing sound files and vibrating, not using video, this component is best for long sound files, such as songs, while the <code>Sound</code> component is more efficient for short files, such as sound effects.</p>",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/player.png",
  "properties": [{ "name": "Loop", "editorType": "boolean", "defaultValue": "False"},
{ "name": "Source", "editorType": "asset", "defaultValue": ""},
{ "name": "Volume", "editorType": "non_negative_float", "defaultValue": "50"}],
  "events": []}
,
{ "name": "Slider",
  "version": "1",
  "categoryString": "BASIC",
  "helpString": "A Slider is a progress bar that adds a draggable thumb. You can touch the thumb and drag left or right to set the slider thumb position. As the Slider thumb is dragged, it will trigger the PositionChanged event, reporting the position of the Slider thumb. The reported position of the Slider thumb can be used to dynamically update another component attribute, such as the font size of a TextBox or the radius of a Ball.",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "ColorLeft", "editorType": "color", "defaultValue": "&HFFFFC800"},
{ "name": "ColorRight", "editorType": "color", "defaultValue": "&HFF888888"},
{ "name": "MaxValue", "editorType": "float", "defaultValue": "50.0"},
{ "name": "MinValue", "editorType": "float", "defaultValue": "10.0"},
{ "name": "ThumbPosition", "editorType": "float", "defaultValue": "30.0"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "events": []}
,
{ "name": "Sound",
  "version": "3",
  "categoryString": "MEDIA",
  "helpString": "<p>A multimedia component that plays sound files and optionally vibrates for the number of milliseconds (thousandths of a second) specified in the Blocks Editor.  The name of the sound file to play can be specified either in the Designer or in the Blocks Editor.</p> <p>For legal sound and video formats, see <a href='http://developer.android.com/guide/appendix/media-formats.html' target='_blank'>Android Supported Media Formats</a>.</p><p>This component is best for short sound files, such as sound effects, while the <code>Player</code> component is more efficient for longer sounds, such as songs.</p>",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/soundEffect.png",
  "properties": [{ "name": "MinimumInterval", "editorType": "non_negative_integer", "defaultValue": "500"},
{ "name": "Source", "editorType": "asset", "defaultValue": ""}],
  "events": []}
,
{ "name": "SoundRecorder",
  "version": "1",
  "categoryString": "EXPERIMENTAL",
  "helpString": "<p>Multimedia component that records audio.</p>",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/soundRecorder.png",
  "properties": [],
  "events": []}
,
{ "name": "SpeechRecognizer",
  "version": "1",
  "categoryString": "MISC",
  "helpString": "Component for using Voice Recognition to convert from speech to text",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/speechRecognizer.png",
  "properties": [],
  "events": []}
,
{ "name": "TableArrangement",
  "version": "1",
  "categoryString": "ARRANGEMENTS",
  "helpString": "<p>A formatting element in which to place components that should be displayed in tabular form.</p>",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "Columns", "editorType": "non_negative_integer", "defaultValue": "2"},
{ "name": "Rows", "editorType": "non_negative_integer", "defaultValue": "2"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "events": []}
,
{ "name": "TextBox",
  "version": "4",
  "categoryString": "BASIC",
  "helpString": "<p>A box for the user to enter text.  The initial or user-entered text value is in the <code>Text</code> property.  If blank, the <code>Hint</code> property, which appears as faint text in the box, can provide the user with guidance as to what to type.</p><p>The <code>MultiLine</code> property determines if the text can havemore than one line.  For a single line text box, the keyboard will closeautomatically when the user presses the Done key.  To close the keyboard for multiline text boxes, the app should use  the HideKeyboard method or  rely on the user to press the Back key.</p><p>The <code> NumbersOnly</code> property restricts the keyboard to acceptnumeric input only.</p><p>Other properties affect the appearance of the text box (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be used (<code>Enabled</code>).</p><p>Text boxes are usually used with the <code>Button</code> component, with the user clicking on the button when text entry is complete.</p><p>If the text entered by the user should not be displayed, use <code>PasswordTextBox</code> instead.</p>",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "BackgroundColor", "editorType": "color", "defaultValue": "&H00000000"},
{ "name": "Enabled", "editorType": "boolean", "defaultValue": "True"},
{ "name": "FontBold", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontItalic", "editorType": "boolean", "defaultValue": "False"},
{ "name": "FontSize", "editorType": "non_negative_float", "defaultValue": "14.0"},
{ "name": "FontTypeface", "editorType": "typeface", "defaultValue": "0"},
{ "name": "Hint", "editorType": "string", "defaultValue": ""},
{ "name": "MultiLine", "editorType": "boolean", "defaultValue": "False"},
{ "name": "NumbersOnly", "editorType": "boolean", "defaultValue": "False"},
{ "name": "Text", "editorType": "string", "defaultValue": ""},
{ "name": "TextAlignment", "editorType": "textalignment", "defaultValue": "0"},
{ "name": "TextColor", "editorType": "color", "defaultValue": "&HFF000000"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "events": []}
,
{ "name": "TextToSpeech",
  "version": "1",
  "categoryString": "MISC",
  "helpString": "Component for using TextToSpeech to speak a message",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/textToSpeech.png",
  "properties": [{ "name": "Country", "editorType": "string", "defaultValue": ""},
{ "name": "Language", "editorType": "string", "defaultValue": ""}],
  "events": []}
,
{ "name": "Texting",
  "version": "3",
  "categoryString": "SOCIAL",
  "helpString": "<p>A component that will, when the <code>SendMessage</code> method is called, send the text message specified in the <code>Message</code> property to the phone number specified in the <code>PhoneNumber</code> property.</p> <p>If the <code>ReceivingEnabled</code> property is set to 1 messages will <b>not</b> be received. If <code>ReceivingEnabled</code> is set to 2 messages will be received only when the application is running. Finally if <code>ReceivingEnabled</code> is set to 3, messages will be received when the application is running <b>and</b> when the application is not running they will be queued and a notification displayed to the user.</p> <p>When a message arrives, the <code>MessageReceived</code> event is raised and provides the sending number and message.</p> <p> An app that includes this component will receive messages even when it is in the background (i.e. when it's not visible on the screen) and, moreso, even if the app is not running, so long as it's installed on the phone. If the phone receives a text message when the app is not in the foreground, the phone will show a notification in the notification bar.  Selecting the notification will bring up the app.  As an app developer, you'll probably want to give your users the ability to control ReceivingEnabled so that they can make the phone ignore text messages.</p> <p>If the GoogleVoiceEnabled property is true, messages can be sent over Wifi using Google Voice. This option requires that the user have a Google Voice account and that the mobile Voice app is installed on the phone. The Google Voice option works only on phones that support Android 2.0 (Eclair) or higher.</p> <p>To specify the phone number (e.g., 650-555-1212), set the <code>PhoneNumber</code> property to a Text string with the specified digits (e.g., 6505551212).  Dashes, dots, and parentheses may be included (e.g., (650)-555-1212) but will be ignored; spaces may not be included.</p> <p>Another way for an app to specify a phone number would be to include a <code>PhoneNumberPicker</code> component, which lets the users select a phone numbers from the ones stored in the the phone's contacts.</p>",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/texting.png",
  "properties": [{ "name": "GoogleVoiceEnabled", "editorType": "boolean", "defaultValue": "False"},
{ "name": "Message", "editorType": "string", "defaultValue": ""},
{ "name": "PhoneNumber", "editorType": "string", "defaultValue": ""},
{ "name": "ReceivingEnabled", "editorType": "text_receiving", "defaultValue": "2"}],
  "events": []}
,
{ "name": "TinyDB",
  "version": "1",
  "categoryString": "BASIC",
  "helpString": "Non-visible component that persistently stores values on the phone.",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/tinyDB.png",
  "properties": [],
  "events": []}
,
{ "name": "TinyWebDB",
  "version": "2",
  "categoryString": "MISC",
  "helpString": "Non-visible component that communicates with a Web service to store and retrieve information.",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/tinyWebDB.png",
  "properties": [{ "name": "ServiceURL", "editorType": "string", "defaultValue": "http://appinvtinywebdb.appspot.com"}],
  "events": []}
,
{ "name": "Twitter",
  "version": "2",
  "categoryString": "SOCIAL",
  "helpString": "<p>A non-visible component that enables communication with <a href='http://www.twitter.com' target='_blank'>Twitter</a>. Once a user has logged into their Twitter account (and the authorization has been confirmed successful by the <code>IsAuthorized</code> event), many more operations are available:<ul><li> Searching Twitter for tweets or labels (<code>SearchTwitter</code>)</li><li> Setting the status of the logged-in user (<code>SetStatus</code>)     </li><li> Directing a message to a specific user      (<code>DirectMessage</code>)</li> <li> Receiving the most recent messages directed to the logged-in user      (<code>RequestDirectMessages</code>)</li> <li> Following a specific user (<code>Follow</code>)</li><li> Ceasing to follow a specific user (<code>StopFollowing</code>)</li><li> Getting a list of users following the logged-in user      (<code>RequestFollowers</code>)</li> <li> Getting the most recent messages of users followed by the      logged-in user (<code>RequestFriendTimeline</code>)</li> <li> Getting the most recent mentions of the logged-in user      (<code>RequestMentions</code>)</li></ul></p> <p>You must obtain a Comsumer Key and Consumer Secret for Twitter authorization  specific to your app from http://twitter.com/oauth_clients/new </p>",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/twitter.png",
  "properties": [{ "name": "ConsumerKey", "editorType": "string", "defaultValue": ""},
{ "name": "ConsumerSecret", "editorType": "string", "defaultValue": ""}],
  "events": []}
,
{ "name": "VerticalArrangement",
  "version": "2",
  "categoryString": "ARRANGEMENTS",
  "helpString": "<p>A formatting element in which to place components that should be displayed one below another.  (The first child component is stored on top, the second beneath it, etc.)  If you wish to have components displayed next to one another, use <code>HorizontalArrangement</code> instead.</p>",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "AlignHorizontal", "editorType": "horizontal_alignment", "defaultValue": "1"},
{ "name": "AlignVertical", "editorType": "vertical_alignment", "defaultValue": "1"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "events": []}
,
{ "name": "VideoPlayer",
  "version": "4",
  "categoryString": "MEDIA",
  "helpString": "A multimedia component capable of playing videos. When the application is run, the VideoPlayer will be displayed as a rectangle on-screen.  If the user touches the rectangle, controls will appear to play/pause, skip ahead, and skip backward within the video.  The application can also control behavior by calling the <code>Start</code>, <code>Pause</code>, and <code>SeekTo</code> methods.  <p>Video files should be in Windows Media Video (.wmv) format, 3GPP (.3gp), or MPEG-4 (.mp4).  For more details about legal formats, see <a href='http://developer.android.com/guide/appendix/media-formats.html' target='_blank'>Android Supported Media Formats</a>.</p><p>App Inventor for Android only permits video files under 1 MB and limits the total size of an application to 5 MB, not all of which is available for media (video, audio, and sound) files.  If your media files are too large, you may get errors when packaging or installing your application, in which case you should reduce the number of media files or their sizes.  Most video editing software, such as Windows Movie Maker and Apple iMovie, can help you decrease the size of videos by shortening them or re-encoding the video into a more compact format.</p>",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "Source", "editorType": "asset", "defaultValue": ""},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "events": []}
,
{ "name": "Voting",
  "version": "1",
  "categoryString": "EXPERIMENTAL",
  "helpString": "<p>The Voting component enables users to vote on a question by communicating with a Web service to retrieve a ballot and later sending back users' votes.</p>",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/voting.png",
  "properties": [{ "name": "ServiceURL", "editorType": "string", "defaultValue": "http://androvote.appspot.com"}],
  "events": []}
,
{ "name": "Web",
  "version": "3",
  "categoryString": "MISC",
  "helpString": "Non-visible component that provides functions for HTTP GET, POST, PUT, and DELETE requests.",
  "showOnPalette": "true",
  "nonVisible": "true",
  "iconName": "images/web.png",
  "properties": [{ "name": "AllowCookies", "editorType": "boolean", "defaultValue": "false"},
{ "name": "ResponseFileName", "editorType": "string", "defaultValue": ""},
{ "name": "SaveResponse", "editorType": "boolean", "defaultValue": "false"},
{ "name": "Url", "editorType": "string", "defaultValue": ""}],
  "events": []}
,
{ "name": "WebViewer",
  "version": "3",
  "categoryString": "EXPERIMENTAL",
  "helpString": "Component for viewing Web pages.  The Home URL can be specified in the Designer or in the Blocks Editor.  The view can be set to follow links when they are tapped, and users can fill in Web forms. Warning: This is not a full browser.  For example, pressing the phone's hardware Back key will exit the app, rather than move back in the browser history.",
  "showOnPalette": "true",
  "nonVisible": "false",
  "iconName": "",
  "properties": [{ "name": "FollowLinks", "editorType": "boolean", "defaultValue": "True"},
{ "name": "HomeUrl", "editorType": "string", "defaultValue": ""},
{ "name": "PromptforPermission", "editorType": "boolean", "defaultValue": "True"},
{ "name": "UsesLocation", "editorType": "boolean", "defaultValue": "False"},
{ "name": "Visible", "editorType": "visibility", "defaultValue": "True"}],
  "events": []}
]