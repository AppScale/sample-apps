<!DOCTYPE BlockLangDef SYSTEM "ignore_lang_def.dtd">
<!--
    This describes BlockGenus, BlockDrawer, BlockFamilies in Young Android.
    Based on third_party/java/openblocks/slcodeblocks/v20090424/support/lang_def.xml
  -->

<!-- Note: WARNING:  When you create a block, don't name
   one of the  connectors "value" and then use it in a block type
   rule, for example 
        LangSpecProperty key="socket-allow-1" value="value/boolean"
   This will crash the  blocks editor with a "bad block" error.
   We need to track this bug down and fix it, probably in BlockRules -->

<BlockLangDef ya-version="79" lang-version="17">
  <BlockConnectorShapes>
    <BlockConnectorShape shape-type="number" shape-number="1"/>
    <BlockConnectorShape shape-type="number-list" shape-number="2"/>
    <BlockConnectorShape shape-type="number-inv" shape-number="3"/>
    <BlockConnectorShape shape-type="boolean" shape-number="4"/>
    <BlockConnectorShape shape-type="boolean-list" shape-number="5"/>
    <BlockConnectorShape shape-type="boolean-inv" shape-number="6"/>
    <BlockConnectorShape shape-type="string" shape-number="7"/>
    <BlockConnectorShape shape-type="string-list" shape-number="8"/>
    <BlockConnectorShape shape-type="string-inv" shape-number="9"/>
    <BlockConnectorShape shape-type="poly" shape-number="10"/>
    <BlockConnectorShape shape-type="poly-list" shape-number="11"/>
    <BlockConnectorShape shape-type="poly-inv" shape-number="12"/>
    <BlockConnectorShape shape-type="proc-param" shape-number="13"/>
    <BlockConnectorShape shape-type="cmd" shape-number="14"/>
    <BlockConnectorShape shape-type="infix-rhs" shape-number="15"/>
  </BlockConnectorShapes>

  <BlockColors>
    <BlockColor name="setter" rgb-value="162 205 250"/>
    <BlockColor name="text" rgb-value="248 208 143"/>
    <BlockColor name="list" rgb-value="255 251 211"/>
    <BlockColor name="math" rgb-value="216 237 145"/>
    <BlockColor name="event" rgb-value="191 217 108"/>
    <BlockColor name="logic" rgb-value="255 174 128"/>
    <BlockColor name="control" rgb-value="252 233 157"/>
    <BlockColor name="colors" rgb-value="191 217 108"/> <!-- colors drawer -->
    <BlockColor name="getter" rgb-value="217 229 255"/>
    <BlockColor name="call" rgb-value="198 193 232"/>

    <BlockColor name="grey" rgb-value="187 187 187"/>
    <BlockColor name="ode-none" rgb-value="255 255 255"/>
    <BlockColor name="ode-black" rgb-value="0 0 0"/>
    <BlockColor name="ode-blue" rgb-value="0 0 255"/>
    <BlockColor name="ode-cyan" rgb-value="0 255 255"/>
    <BlockColor name="ode-dark-gray" rgb-value="68 68 68"/>
    <BlockColor name="ode-gray" rgb-value="136 136 136"/>
    <BlockColor name="ode-green" rgb-value="00 255 00"/>
    <BlockColor name="ode-light-gray" rgb-value="204 204 204"/>
    <BlockColor name="ode-magenta" rgb-value="255 0 255"/>
    <BlockColor name="ode-orange" rgb-value="255 200 0"/>
    <BlockColor name="ode-pink" rgb-value="255 175 175"/>
    <BlockColor name="ode-red" rgb-value="255 0 0"/>
    <BlockColor name="ode-white" rgb-value="255 255 255"/>
    <BlockColor name="ode-yellow" rgb-value="255 255 0"/>
    <BlockColor name="hot-pink" rgb-value="255 105 180"/>
    <BlockColor name="goldenrod" rgb-value="218 165 32"/>
    <BlockColor name="thistle" rgb-value="232 191 232"/>
  </BlockColors>

  <BlockGenuses>

    <!-- Stub Genuses -->

    <!-- Getter stub for arguments. These don't have a corresponding setter -->
    <BlockGenus name="getter" kind="data" initlabel="" decorator="value" color="getter">
      <description>
        <text>Reports the value of the variable.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="getter"/>
        <LangSpecProperty key="plug-type-1" value="value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Getter stub for global vars -->
    <BlockGenus name="getterGlobal" kind="data" initlabel="" decorator="global" color="getter">
      <description>
        <text>Reports the value of the variable.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="getter"/>
        <LangSpecProperty key="plug-type-1" value="value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Getter stub for component properties -->
    <BlockGenus name="componentGetter" kind="data" initlabel="" color="getter">
      <description>
        <text>Reports the value of the component's property.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="componentGetter"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Generic getter stub for component properties -->
    <BlockGenus name="componentTypeGetter" kind="data" initlabel="" color="getter">
      <description>
        <text>Reports the value of the specified component's property.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="componentGetter"/>
        <LangSpecProperty key="is-from-component-type" value="true"/>
        <LangSpecProperty key="socket-allow-1" value="component/value"/>
        <LangSpecProperty key="socket-allow-2" value="component/component"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Setter stub for global vars -->
    <BlockGenus name="setterGlobal" kind="command" initlabel="" decorator="set global" color="setter">
      <description>
        <text>Sets the value of the variable. </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="socket" label="to" connector-type="poly" position-type="single"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="setter"/>
        <LangSpecProperty key="socket-exclude-1" value="to/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Setter stub for component properties -->
    <BlockGenus name="componentSetter" kind="command" initlabel="" color="setter" decorator="set">
      <description>
        <text>Sets the value of the component property.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="socket" label="to" connector-type="poly" position-type="single"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="componentSetter"/>
        <LangSpecProperty key="socket-exclude-1" value="to/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Generic setter stub for component properties -->
    <BlockGenus name="componentTypeSetter" kind="command" initlabel="" color="setter" decorator="set">
      <description>
        <text>Sets the value of the specified component property.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
        <BlockConnector connector-kind="socket" label="to" connector-type="poly" position-type="single"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="componentSetter"/>
        <LangSpecProperty key="is-from-component-type" value="true"/>
        <LangSpecProperty key="socket-exclude-1" value="to/argument"/>
        <LangSpecProperty key="socket-allow-1" value="component/value"/>
        <LangSpecProperty key="socket-allow-2" value="component/component"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- End of Stub Genuses -->

    <!-- Collapsed Block -->

    <BlockGenus name="collapsed" kind="function" decorator="" initlabel="" color="setter">
      <description>
        <text>This block represents a collapsed procedure</text>
      </description>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="collapsed"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- Values -->

    <!-- Value Block -->
    <!-- TODO(gleitz): remove and use the autogenerated stubs -->
    <BlockGenus name="value" kind="data" initlabel="value" editable-label="yes" is-empty-label-allowed="yes" is-label-value="yes" color="text">
      <description>
        <text>Reports the value shown.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Component Block -->
    <BlockGenus name="component" kind="data" decorator="component" initlabel="" is-label-value="yes" color="getter">
      <description>
        <text>This block represents the given component</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="component"/>
        <LangSpecProperty key="plug-type-1" value="component"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Null Block -->
    <BlockGenus name="null" kind="data" initlabel="?" is-label-value="yes" color="text">
      <description>
        <text>A null block</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="null"/>
        <LangSpecProperty key="plug-type-1" value="null"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Number Block -->
    <BlockGenus name="number" kind="data" label-filter="number" decorator="number" initlabel="123" editable-label="yes" is-label-value="yes" color="math">
      <description>
        <text>Reports the number shown.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="number"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Colors -->
    <!-- TODO(sharon): temporary hack to get color blocks. We may
     want to generate these programmatically and/or have a color picker -->
    <BlockGenus name="color-none" kind="data" initlabel="None" decorator="color" is-label-value="no" color="ode-none">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="00FFFFFF"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-black" kind="data" initlabel="Black" decorator="color" is-label-value="no" color="ode-black">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FF000000"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-blue" kind="data" initlabel="Blue" decorator="color" is-label-value="no" color="ode-blue">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FF0000FF"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-cyan" kind="data" initlabel="Cyan" decorator="color" is-label-value="no" color="ode-cyan">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FF00FFFF"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-dark-gray" kind="data" initlabel="Dark Gray" decorator="color" is-label-value="no" color="ode-dark-gray">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FF444444"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-gray" kind="data" initlabel="Gray" decorator="color" is-label-value="no" color="ode-gray">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FF888888"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-green" kind="data" initlabel="Green" decorator="color" is-label-value="no" color="ode-green">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FF00FF00"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-light-gray" kind="data" initlabel="Light Gray" decorator="color" is-label-value="no" color="ode-light-gray">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FFCCCCCC"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-magenta" kind="data" initlabel="Magenta" decorator="color" is-label-value="no" color="ode-magenta">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FFFF00FF"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-orange" kind="data" initlabel="Orange" decorator="color" is-label-value="no" color="ode-orange">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FFFFC800"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-pink" kind="data" initlabel="Pink" decorator="color" is-label-value="no" color="ode-pink">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FFFFAFAF"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-red" kind="data" initlabel="Red" decorator="color" is-label-value="no" color="ode-red">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FFFF0000"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-white" kind="data" initlabel="White" decorator="color" is-label-value="no" color="ode-white">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FFFFFFFF"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="color-yellow" kind="data" initlabel="Yellow" decorator="color" is-label-value="no" color="ode-yellow">
      <description>
        <text> Inserts the number representing the named color </text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="color"/>
        <LangSpecProperty key="ya-hex-value" value="FFFFFF00"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Make-Color Block -->
    <BlockGenus name="make-color" decorator="call" kind="function" initlabel="make color" color="colors">
      <description>
      <text>A Color with the given red, green, blue, and (optionally) alpha components.</text>
      <arg-description n="1" name="components">A list of red, green, blue, and alpha components, each in the range 0 to 255; the alpha component may be omitted, in which case a value of 255 (fully opaque) will be used.</arg-description>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="components" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="make-color"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="components/list"/>
        <LangSpecProperty key="socket-allow-2" value="components/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Split-Color Block -->
    <BlockGenus name="split-color" decorator="call" kind="function" initlabel="split color" color="list">
      <description>
        <text>A list of four elements, each in the range 0 to 255, representing the red, blue, green, and alpha components.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="color" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="split-color"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
        <LangSpecProperty key="socket-allow-1" value="color/number"/>
        <LangSpecProperty key="socket-allow-2" value="color/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Declarations -->

    <!-- Property Block -->
    <!-- While not explicitly in a drawer, property blocks are created by components -->
    <BlockGenus name="read-write-property" kind="param" initlabel="property" label-unique="yes" is-starter="yes" is-terminator="yes" color="text">
      <description>
        <text>Represents a component's property</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <Stubs>
        <Stub stub-genus="componentGetter"/>
        <Stub stub-genus="componentTypeGetter"/>
        <Stub stub-genus="componentSetter"/>
        <Stub stub-genus="componentTypeSetter"/>
      </Stubs>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="read-write-property"/>
      </LangSpecProperties>
    </BlockGenus>

        <BlockGenus name="read-only-property" kind="param" initlabel="property" label-unique="yes" is-starter="yes" is-terminator="yes" color="text">
      <description>
        <text>Represents a component's property</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <Stubs>
        <Stub stub-genus="componentGetter"/>
        <Stub stub-genus="componentTypeGetter"/>
      </Stubs>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="read-only-property"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="write-only-property" kind="param" initlabel="property" label-unique="yes" is-starter="yes" is-terminator="yes" color="text">
      <description>
        <text>Represents a component's property</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <Stubs>
        <Stub stub-genus="componentSetter"/>
        <Stub stub-genus="componentTypeSetter"/>
      </Stubs>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="write-only-property"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="invisible-property" kind="param" initlabel="property" label-unique="yes" is-starter="yes" is-terminator="yes" color="text">
      <description>
        <text>Represents a component's property</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <Stubs>
      </Stubs>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="invisible-property"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Argument Block -->
    <BlockGenus name="argument" kind="param" label-filter="identifier" initlabel="name" decorator="name" editable-label="yes" label-unique="yes" is-starter="yes" is-terminator="yes" color="getter">
      <description>
        <text>Argument for a function</text>
      </description>
      <BlockConnectors>
      <!-- TODO(gleitz): Allow for default arguments <BlockConnector connector-kind="socket" connector-type="poly"/> -->
      <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <Stubs>
        <!-- TODO(gleitz): Put labeled argument sockets in the caller block -->
        <Stub stub-genus="getter"/>
        <!-- arguments don't get setter stubs. too confusing for users. -->
      </Stubs>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="argument"/>
        <LangSpecProperty key="plug-type-1" value="argument"/>
      </LangSpecProperties>
    </BlockGenus>



    <!-- Def Block -->
    <!-- TODO(gleitz): put the getter/setter in a "variables" drawer -->
    <BlockGenus name="def" kind="param" label-filter="identifier" decorator="def" initlabel="variable" editable-label="yes" label-unique="yes" is-starter="yes" is-terminator="yes" color="setter">
      <description>
        <arg-description n="1" name="arg">The variable's initial value.</arg-description>
        <text>Defines a global variable.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="socket" label="as" connector-type="poly">
        </BlockConnector>
      </BlockConnectors>
      <Stubs>
        <Stub stub-genus="getterGlobal"/>
        <Stub stub-genus="setterGlobal"/>
      </Stubs>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="def"/>
        <LangSpecProperty key="socket-exclude-1" value="as/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Procedures -->

    <!-- Define Block -->
    <BlockGenus name="define" label-filter="identifier" label-unique="yes" kind="function" decorator="to" initlabel="procedureWithResult" editable-label="yes" color="call">
      <description>
        <arg-description n="1" name="arg">Procedure argument</arg-description>
        <arg-description n="2" name="do"> The set of instructions that is done when the procedure is called.</arg-description>
        <text>Defines a procedure that returns a result. Calling the procedure (with its associated 'call' block) will run the blocks in the 'do' section and return the specified result.</text>
      </description>
      <Stubs>
        <Stub stub-genus="caller"/>
      </Stubs>
      <BlockConnectors>
        <BlockConnector label="arg" connector-kind="socket" is-expandable="yes" connector-type="poly"/>
        <BlockConnector label="do" connector-kind="socket" is-indented="yes" connector-type="cmd"/>
        <BlockConnector label="return" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="define"/>
        <LangSpecProperty key="socket-allow-1" value="arg/argument"/>
        <LangSpecProperty key="socket-exclude-1" value="return/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="define-void" label-filter="identifier" label-unique="yes" kind="function" decorator="to" initlabel="procedure" editable-label="yes" color="call">
      <description>
        <arg-description n="1" name="arg">Procedure argument</arg-description>
        <arg-description n="2" name="do"> The set of instructions that is done when the procedure is called.</arg-description>
        <text>Defines a procedure that does not return a result. Calling the procedure (with its associated 'call' block) will run the blocks in the 'do' section.</text>
      </description>
      <Stubs>
        <Stub stub-genus="caller-command"/>
      </Stubs>
      <BlockConnectors>
        <BlockConnector label="arg" connector-kind="socket" is-expandable="yes" connector-type="poly"/>
        <BlockConnector label="do" connector-kind="socket" is-indented="yes" connector-type="cmd"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="define"/>
        <LangSpecProperty key="socket-allow-1" value="arg/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Call Block -->
    <BlockGenus name="caller" label-filter="identifier" kind="function" decorator="call" initlabel="" color="call" editable-label="no">
      <description>
        <text>Calls the specified procedure, returning its result</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="call"/>
        <LangSpecProperty key="plug-type-1" value="value"/>
        <LangSpecProperty key="socket-exclude-1" value="*/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="caller-command" label-filter="identifier" kind="command" decorator="call" initlabel="" color="call" editable-label="no">
      <description>
        <text>Calls the specified procedure</text>
      </description>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="call"/>
        <LangSpecProperty key="socket-exclude-1" value="*/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Glue Block -->
    <BlockGenus name="glue" kind="command" initlabel="|" color="call">
      <description>
        <text>Runs the block associated with its attached block and ignores the return value</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="glue"/>
        <LangSpecProperty key="socket-exclude-1" value="default/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Commands -->
    <!-- TODO(gleitz): determine how this should be used
    <BlockGenus name="localvar" initlabel="var" kind="command" color="text">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
    </BlockGenus>
    -->

    <!-- Control -->

    <!-- If Block -->
    <BlockGenus name="if" kind="command" initlabel="if" color="control">
      <description>
        <arg-description n="1" name="test"> The condition to test.</arg-description>
        <arg-description n="2" name="then-do">The actions to be performed when the condition is true.</arg-description>
        <text>Tests a given condition.  If the result is true, performs the actions in the 'then-do' sequence of blocks.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="test" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="then-do" connector-kind="socket" is-indented="yes" connector-type="cmd"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="if"/>
        <LangSpecProperty key="socket-allow-1" value="test/value"/>
        <LangSpecProperty key="socket-allow-2" value="test/boolean"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- IfElse Block -->
    <BlockGenus name="ifelse" kind="command" initlabel="ifelse" color="control">
      <description>
        <arg-description n="1" name="test">The condition to test.</arg-description>
        <arg-description n="2" name="then-do">The actions to be performed when test is true.</arg-description>
        <arg-description n="3" name="else">The actions to be performed when test is false.</arg-description>
        <text>Tests a given condition.  If the result is true, performs the actions in the 'then-do' sequence of blocks;
         otherwise, performs the actions in the 'else-do' sequence of blocks.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="test" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="then-do" connector-kind="socket" is-indented="yes" connector-type="cmd"/>
        <BlockConnector label="else-do" connector-kind="socket" is-indented="yes" connector-type="cmd"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="ifelse"/>
        <LangSpecProperty key="socket-allow-1" value="test/value"/>
        <LangSpecProperty key="socket-allow-2" value="test/boolean"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Choose Block -->
    <BlockGenus name="choose" kind="function" initlabel="choose" color="control">
      <description>
        <arg-description n="1" name="test">The condition being tested.</arg-description>
        <arg-description n="2" name="then-do">The set of instructions that is done when test is true.</arg-description>
        <arg-description n="3" name="then-return"> The return value when the test is true.</arg-description>
        <arg-description n="4" name="else">The set of instructions that is done when test is false.</arg-description>
        <arg-description n="5" name="else-return">The return value when the test is false.</arg-description>
        <text>If the condition being tested is true, the agent will run all the blocks attached to the 'then-do' section and
return the value attached to the 'then-return'slot. Otherwise, the agent will run all blocks attached to the 'else-do'
section and return the value in the 'else-return' slot.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="test" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="then-do" connector-kind="socket" is-indented="yes" connector-type="cmd"/>
        <BlockConnector label="then-return" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="else-do" connector-kind="socket" is-indented="yes" connector-type="cmd"/>
        <BlockConnector label="else-return" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="choose"/>
        <LangSpecProperty key="type-exclude-1" value="argument"/>
        <LangSpecProperty key="socket-allow-1" value="test/value"/>
        <LangSpecProperty key="socket-allow-2" value="test/boolean"/>
        <LangSpecProperty key="socket-exclude-1" value="then-return/argument"/>
        <LangSpecProperty key="socket-exclude-2" value="else-return/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- ForEach Block -->
    <BlockGenus name="foreach" initlabel="foreach" kind="command" color="control">
      <description>
        <arg-description n="1" name="variable">Name for the variable that will refer to each item in the list</arg-description>
        <arg-description n="2" name="do">Sequence of commands to do for each value of the variable</arg-description>
        <arg-description n="3" name="in list">List of values for the variable</arg-description>
        <text>Runs the blocks in the 'do'  section for each item in the list.  Use the given variable
name to refer to the current list item.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="variable" label-unique="yes" connector-kind="socket" connector-type="poly">
          <DefaultArg genus-name="argument" label="var"/>
        </BlockConnector>
        <BlockConnector label="do" connector-kind="socket" is-indented="yes" connector-type="cmd"/>
        <BlockConnector label="in list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="foreach"/>
        <LangSpecProperty key="socket-allow-1" value="variable/argument"/>
        <LangSpecProperty key="socket-allow-2" value="in list/list"/>
        <LangSpecProperty key="socket-allow-3" value="in list/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Foreach in range block -->
    <BlockGenus name="forrange" initlabel="for range" kind="command" color="control">
      <description>
        <arg-description n="1" name="variable">The variable that will refer to each item in the range</arg-description>
        <arg-description n="2" name="start">Start of the range</arg-description>
        <arg-description n="3" name="end">End of the range</arg-description>
        <arg-description n="4" name="step">Amount to step the variable each time</arg-description>
        <arg-description n="4" name="do">Sequence of commands to do for each value of the variable</arg-description>
        <text>Runs the blocks in the 'do' section for each numeric value in the range from start to end, stepping the
value each time.  Use the given variable name to refer to the current value.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="variable" label-unique="yes" connector-kind="socket" connector-type="poly">
          <DefaultArg genus-name="argument" label="i"/>
        </BlockConnector>
        <BlockConnector label="start" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="end" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="step" connector-kind="socket" connector-type="poly">
          <DefaultArg genus-name="number" label="1"/>
        </BlockConnector>
        <BlockConnector label="do" connector-kind="socket" is-indented="yes" connector-type="cmd"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="forrange"/>
        <LangSpecProperty key="socket-allow-1" value="variable/argument"/>
        <LangSpecProperty key="socket-allow-2" value="start/number"/>
        <LangSpecProperty key="socket-allow-3" value="start/value"/>
        <LangSpecProperty key="socket-allow-4" value="end/number"/>
        <LangSpecProperty key="socket-allow-5" value="end/value"/>
        <LangSpecProperty key="socket-allow-6" value="step/number"/>
        <LangSpecProperty key="socket-allow-7" value="step/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- While Block -->
    <BlockGenus name="while" initlabel="while" kind="command" color="control">
      <description>
        <text>Runs the blocks in the 'do' section while the test is true.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="test" label-unique="yes" connector-kind="socket" connector-type="poly" />
        <BlockConnector label="do" connector-kind="socket" is-indented="yes" connector-type="cmd"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="while"/>
        <LangSpecProperty key="socket-allow-1" value="test/boolean"/>
        <LangSpecProperty key="socket-allow-2" value="test/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Multiple screens  -->

    <!-- Get Start Text Block -->
    <!-- This block is deprecated and has been removed from the drawer (see 
     OUTPUT_FOOTER.txt).  The BlockGenus remains here so we can load blocks from old
     projects and mark them "bad" -->
    <BlockGenus name="get-startup-text" decorator="call" kind="function" initlabel="get start text" color="control">
      <description>
      <text>Returns the text passed to this app when it was started, if any. If no text was passed, returns an empty text.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="startup-value"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Close Screen Block -->
    <BlockGenus name="close-screen" decorator="call" kind="command" initlabel="close screen" is-terminator="yes" color="control">
      <description>
        <text>Closes the current screen.</text>
      </description>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="close-screen"/>
      </LangSpecProperties>
    </BlockGenus>

   <!-- Close Screen With Result Block -->
    <!-- This block is deprecated and has been removed from the drawer (see 
     OUTPUT_FOOTER.txt).  The BlockGenus remains here so we can load blocks from old
     projects and mark them "bad" -->
   <BlockGenus name="close-screen-with-result" decorator="call" kind="command" initlabel="close screen with result" is-terminator="yes" color="control">
      <description>
        <arg-description n="1" doc-name="result">
          Text to be returned when the screen closes.
        </arg-description>
        <text>Closes the current screen and returns a result that can be picked up by
        another screen or application. The result will be named APP_INVENTOR_RESULT.
        </text>
      </description>
      <BlockConnectors>
        <BlockConnector label="result" connector-kind="socket" connector-type="poly">
        </BlockConnector>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="close-screen-with-result"/>
        <LangSpecProperty key="socket-allow-1" value="result/text"/>
        <LangSpecProperty key="socket-allow-2" value="result/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Close Application Block -->
    <BlockGenus name="close-application" decorator="call" kind="command" initlabel="close application" is-terminator="yes" color="control">
      <description>
        <text>Closes all screens in this app and stops the app.</text>
      </description>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="close-application"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Open Another Screen Block -->
    <BlockGenus name="open-another-screen" decorator="call" kind="command" initlabel="open another screen" is-terminator="yes" color="control">
      <description>
        <arg-description n="1" doc-name="screenName">
          The name of the new screen to open.
        </arg-description>
        <text>Opens a new screen in a multiple screen app.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="screenName" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="open-another-screen"/>
        <LangSpecProperty key="socket-allow-1" value="screenName/text"/>
        <LangSpecProperty key="socket-allow-2" value="screenName/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Open Another Screen With Start Value Block -->
    <BlockGenus name="open-another-screen-with-start-value" decorator="call" kind="command" 
       initlabel="open another screen with start value" is-terminator="yes" color="control">
      <description>
        <arg-description n="1" doc-name="screenName">
          The name of the new screen to open.
        </arg-description>
        <arg-description n="2" doc-name="startValue">
          The value to be passed to the new screen.
        </arg-description>
        <text>Opens a new screen in a multiple screen app and passes the start value to that screen.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="screenName" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="startValue" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="open-another-screen-with-start-value"/>
        <LangSpecProperty key="socket-allow-1" value="screenName/text"/>
        <LangSpecProperty key="socket-allow-2" value="screenName/value"/>
        <LangSpecProperty key="socket-exclude-1" value="startValue/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Get Start Value Block -->
    <BlockGenus name="get-start-value"
       decorator="call" kind="function" initlabel="get start value" color="control">
      <description>
      <text>Returns the value that was passed to this screen when it
was opened, typically by another screen in a multiple-screen app.
If no value was passed, returns the empty text.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="get-start-value"/>
      </LangSpecProperties>
    </BlockGenus>

   <!-- Close Screen With Value Block -->
   <BlockGenus name="close-screen-with-value" decorator="call" kind="command" 
          initlabel="close screen with value" is-terminator="yes" color="control">
      <description>
        <arg-description n="1" doc-name="result">
          Value to return when the screen closes.
       </arg-description>
        <text>Closes the current screen and returns a result to the screen that opened this one.
        </text>
      </description>
      <BlockConnectors>
        <BlockConnector label="result" connector-kind="socket" connector-type="poly">
        </BlockConnector>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="close-screen-with-value"/>
        <LangSpecProperty key="socket-exclude-1" value="result/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!--Communicating between apps -->

     <!-- Get Plain Start Text Block -->
     <BlockGenus name="get-plain-start-text"
                 decorator="call" kind="function" initlabel="get plain start text" color=" control">
       <description>
         <text>Returns the plain text that was passed to this screen when it was started by another app.
If no value was passed, returns the empty text.
        
For multiple screen apps, use get start value rather than get plain start text.
         </text>
       </description>
       <BlockConnectors>
         <BlockConnector connector-kind="plug" connector-type="poly"/>
       </BlockConnectors>
       <LangSpecProperties>
         <LangSpecProperty key="ya-kind" value="primitive"/>
         <LangSpecProperty key="ya-rep" value="get-plain-start-text"/>
         <LangSpecProperty key="plug-type-1" value="text"/>
       </LangSpecProperties>
     </BlockGenus>

        
     <!-- Close Screen With Plain Text Block -->
     <BlockGenus name="close-screen-with-plain-text" decorator="call" kind="command"
                 initlabel="close screen with plain text" is-terminator="yes" color="control">
       <description>
         <arg-description n="1" doc-name="text">
           Text to return when the screen closes.
         </arg-description>
         <text>Closes the current screen and returns text to the app that opened this one.

For multiple screen apps, use close screen with value rather than close screen with plain text.
         </text>
       </description>
       <BlockConnectors>
         <BlockConnector label="text" connector-kind="socket" connector-type="poly">
         </BlockConnector>
       </BlockConnectors>
       <LangSpecProperties>
         <LangSpecProperty key="ya-kind" value="primitive"/>
         <LangSpecProperty key="ya-rep" value="close-screen-with-plain-text"/>
         <LangSpecProperty key="socket-allow-1" value="text/text"/>
         <LangSpecProperty key="socket-allow-2" value="text/value"/>
       </LangSpecProperties>
     </BlockGenus>

    <!-- Logic -->

    <!-- True Block -->
    <BlockGenus name="true" kind="data" initlabel="true" is-label-value="yes" color="logic">
      <description>
        <text>  Reports the boolean true.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="true"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- False Block -->
    <BlockGenus name="false" kind="data" initlabel="false" is-label-value="yes" color="logic">
      <description>
        <text> Reports the boolean false.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="false"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- And Block -->
    <BlockGenus name="and" kind="function" initlabel="and" color="logic">
      <description>
        <text>Returns true if all connected blocks are true</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="test" connector-kind="socket" is-expandable="yes" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="and"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="test/boolean"/>
        <LangSpecProperty key="socket-allow-2" value="test/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Or Block -->
    <BlockGenus name="or" kind="function" initlabel="or" color="logic">
      <description>
        <text>Returns true if any connected blocks are true</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="test" connector-kind="socket" is-expandable="yes" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="or"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="test/boolean"/>
        <LangSpecProperty key="socket-allow-2" value="test/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Logical-Not Block -->
    <BlockGenus name="logical-not" initlabel="not" kind="function" color="logic">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-not"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="default/boolean"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Strings -->

    <!-- Text Block -->
    <BlockGenus name="text" kind="data" label-filter="string" decorator="text" initlabel="text" is-empty-label-allowed="yes" editable-label="yes" color="text">
      <description>
        <text>A text string</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="text"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Yail-Equal Block -->

    <BlockGenus name="yail-equal" kind="function" initlabel="=" color="math">
      <description>
        <text>Tests whether two things are equal.  The things being compared can be anything, not only numbers.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-equal?"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-exclude-1" value="default/argument"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- Yail-Not-Equal Block -->
    <BlockGenus name="yail-not-equal" kind="function" initlabel="not =" color="math">
      <description>
        <text>Tests whether two things are unequal.  The things being compared can be anything, not only numbers.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-not-equal?"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-exclude-1" value="default/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Append Block -->
    <BlockGenus name="string-append" kind="function" initlabel="join" color="text">
      <description>
      <arg-description n="2" doc-name="first">the beginning of the new string</arg-description>
      <arg-description n="3" doc-name="second">the end of the new string</arg-description>
      <text>Appends the second argument to the end of the first argument.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-append"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
        <LangSpecProperty key="socket-allow-1" value="default/text"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Append Vertical Block -->
    <BlockGenus name="string-vappend" decorator="call" kind="function" initlabel="make text" color="text">
      <description>
        <text>Appends all the arguments to form a single text string. If there are no arguments, makes an empty text.</text>
        <arg-description n="1" name="text" doc-name="text">Item to include</arg-description>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly" is-expandable="yes"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-append"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Length Block -->
    <BlockGenus name="string-length" decorator="call" kind="function" initlabel="length" color="text">
      <description>
        <text>Reports the length of the text attached to this block.</text>
        <arg-description n="1" name="text" doc-name="text">The text whose length should be returned</arg-description>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-length"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-LessThan Block -->
    <BlockGenus name="string-less-than" kind="function" initlabel="text&lt;" color="text">
      <description>
        <arg-description n="1" doc-name="text1">
          The first text string to compare.
        </arg-description>
        <arg-description n="2" doc-name="text2">
          The second text string to compare.
        </arg-description>
        <text>Tests whether text1 is lexicographically less than text2. If one text is a prefix of the other, the shorter text is considered smaller. Uppercase characters precede lowercase characters.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text1" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="text2" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string&lt;?"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="text1/text"/>
        <LangSpecProperty key="socket-allow-2" value="text1/value"/>
        <LangSpecProperty key="socket-allow-3" value="text2/text"/>
        <LangSpecProperty key="socket-allow-4" value="text2/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Equal Block -->
    <BlockGenus name="string-equal" kind="function" initlabel="text=" color="text">
      <description>
        <arg-description n="1" doc-name="text1">
          The first text string to compare.
        </arg-description>
        <arg-description n="2" doc-name="text2">
          The second text string to compare.
        </arg-description>
        <text>Tests whether the text strings are identical, i.e., have the same characters in the same order.  This is different from ordinary = in the case where the text strings are numbers: 123 and 0123 are = but not text=.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text1" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="text2" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string=?"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="text1/text"/>
        <LangSpecProperty key="socket-allow-2" value="text1/value"/>
        <LangSpecProperty key="socket-allow-3" value="text2/text"/>
        <LangSpecProperty key="socket-allow-4" value="text2/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-GreaterThan Block -->
    <BlockGenus name="string-greater-than" kind="function" initlabel="text&gt;" color="text">
      <description>
        <arg-description n="1" doc-name="text1">
          The first text string to compare.
        </arg-description>
        <arg-description n="2" doc-name="text2">
          The second text string to compare.
        </arg-description>
        <text>Reports whether the text1 is lexicographically greater than text2. If one text is a prefix of the other, the shorter text is considered smaller. Uppercase characters precede lowercase characters.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text1" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="text2" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string&gt;?"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="text1/text"/>
        <LangSpecProperty key="socket-allow-2" value="text1/value"/>
        <LangSpecProperty key="socket-allow-3" value="text2/text"/>
        <LangSpecProperty key="socket-allow-4" value="text2/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Upcase Block -->
    <BlockGenus name="string-upcase" kind="function" initlabel="upcase" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text string to convert to upper case
        </arg-description>
        <text>Returns a copy of its text string argument converted to uppercase.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-to-upper-case"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Downcase Block -->
    <BlockGenus name="string-downcase" kind="function" initlabel="downcase" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text string to convert to lower case
        </arg-description>
        <text>Returns a copy of its text string argument converted to lowercase.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-to-lower-case"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Trim Block -->
    <BlockGenus name="string-trim" kind="function" initlabel="trim" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text string to trim.
        </arg-description>
        <text>Returns a copy of its text string argument with any leading or trailing spaces removed.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-trim"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Starts-At-Block -->
    <BlockGenus name="string-starts-at" decorator="call" kind="function" initlabel="starts at" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text to search for the piece.
        </arg-description>
        <arg-description n="2" doc-name="piece">
          The piece (a text string) to search for in the text.
        </arg-description>
        <text>Returns the starting index of the piece in the text, where index 1 denotes the beginning of the text. Returns 0 if the piece is not in the text.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="piece" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-starts-at"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
        <LangSpecProperty key="socket-allow-3" value="piece/text"/>
        <LangSpecProperty key="socket-allow-4" value="piece/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Contains-Block -->
    <BlockGenus name="string-contains" decorator="call" kind="function" initlabel="contains" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text to search for the piece.
        </arg-description>
        <arg-description n="2" doc-name="piece">
          The piece (a text string) to search for in the text.
        </arg-description>
        <text>Tests whether the piece is in the text</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="piece" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-contains"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
        <LangSpecProperty key="socket-allow-3" value="piece/text"/>
        <LangSpecProperty key="socket-allow-4" value="piece/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Split-At-First-Block -->
    <BlockGenus name="string-split-at-first" decorator="call" kind="function" initlabel="split at first" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text to split.
        </arg-description>
        <arg-description n="2" doc-name="at">
          The delimiter text.
        </arg-description>
        <text>Split the text into two pieces separated by the first occurrence of 'at'. Returns a two-element list with the two pieces. Returns a one-element list with original text if 'at' is not contained in the text.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="at" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-split-at-first"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
        <LangSpecProperty key="socket-allow-3" value="at/text"/>
        <LangSpecProperty key="socket-allow-4" value="at/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Split-At-First-of-Any-Block -->
    <BlockGenus name="string-split-at-first-of-any" decorator="call" kind="function" initlabel="split at first of any" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text to split.
        </arg-description>
        <arg-description n="2" doc-name="at">
          A list of delimiter text strings to that are places to split at.
        </arg-description>
        <text>Split the text into two pieces separated by the first occurrence of any of the elements in the list 'at', and return the list of these pieces. Returns a one-element list with the original text if no elements of 'at' are in the text.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="at" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-split-at-first-of-any"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
        <LangSpecProperty key="socket-allow-3" value="at/list"/>
        <LangSpecProperty key="socket-allow-4" value="at/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Split Block -->
    <BlockGenus name="string-split" decorator="call" kind="function" initlabel="split" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text to split.
        </arg-description>
        <arg-description n="2" doc-name="at">
          The delimiter text.
        </arg-description>
        <text>Split the text into pieces separated by the occurrences of 'at', and return the list of these pieces. Returns a one-element list with the original text if 'at' is not in the text.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="at" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-split"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
        <LangSpecProperty key="socket-allow-3" value="at/text"/>
        <LangSpecProperty key="socket-allow-4" value="at/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Split-Any Block -->
    <BlockGenus name="string-split-at-any" decorator="call" kind="function" initlabel="split at any" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text to split.
        </arg-description>
        <arg-description n="2" doc-name="at">
          A list of delimiter text strings to search for as places to split at.
        </arg-description>
        <text>Split the text into pieces separated by the occurrences of any of the elements in the list 'at', and return the list of these pieces. Returns a one-element list with the original text if no elements of 'at' are in the text.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="at" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-split-at-any"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
        <LangSpecProperty key="socket-allow-3" value="at/list"/>
        <LangSpecProperty key="socket-allow-4" value="at/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Split-At-Spaces Block -->
    <BlockGenus name="string-split-at-spaces" decorator="call" kind="function" initlabel="split at spaces" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text to split.
        </arg-description>
        <text>Split the text into a list of the pieces separated by spaces.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-split-at-spaces"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Substring Block -->
    <BlockGenus name="string-subtext" decorator="call" kind="function" initlabel="segment" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text to extract from
        </arg-description>
        <arg-description n="2" doc-name="start">
          The starting position (a number) of the segment.
        </arg-description>
        <arg-description n="3" doc-name="length">
          The length of the segment
        </arg-description>
        <text>Extracts the segment of the given length from the given text, starting from the given position. Position 1 denotes the beginning of the text.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="start" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="length" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-substring"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
        <LangSpecProperty key="socket-allow-3" value="start/number"/>
        <LangSpecProperty key="socket-allow-4" value="start/value"/>
        <LangSpecProperty key="socket-allow-5" value="length/number"/>
        <LangSpecProperty key="socket-allow-6" value="length/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String-Replace-All-Block -->
    <BlockGenus name="string-replace-all" decorator="call" kind="function" initlabel="replace all" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text to do the replacement in
        </arg-description>
        <arg-description n="2" doc-name="segment">
          The segment to replace
        </arg-description>
        <arg-description n="3" doc-name="replacement">
          The replacement for the segment
        </arg-description>
      <text>Returns a new text obtained by replacing all occurrences of the segment with the replacement</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="segment" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="replacement" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-replace-all"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
        <LangSpecProperty key="socket-allow-3" value="segment/text"/>
        <LangSpecProperty key="socket-allow-4" value="segment/value"/>
        <LangSpecProperty key="socket-allow-5" value="replacement/text"/>
        <LangSpecProperty key="socket-allow-6" value="replacement/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- String Empty Block -->
    <BlockGenus name="string-empty?" kind="function" initlabel="is text empty?" color="text">
      <description>
        <arg-description n="1" doc-name="text">
          The text string.
        </arg-description>
        <text>Returns true if the length of the text is 0, false otherwise.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="string-empty?"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Lists -->

    <ObsoleteBlockGenus name="list" initlabel="list" color="list"/>
    <ObsoleteBlockGenus name="set-list-item" initlabel="set list item" color="list"/>
    <ObsoleteBlockGenus name="add-to-list" initlabel="add items to list" color="list"/>
    <ObsoleteBlockGenus name="adjoin" initlabel="adjoin" color="list"/>
    <ObsoleteBlockGenus name="member" initlabel="member" color="list"/>
    <ObsoleteBlockGenus name="list-first" initlabel="first" color="list"/>
    <ObsoleteBlockGenus name="list-rest" initlabel="rest" color="list"/>
    <ObsoleteBlockGenus name="pick-list-item" initlabel="pick list item" color="list"/>

    <!-- Make-List Block -->
    <BlockGenus name="make-list" decorator="call" kind="function" initlabel="make a list" color="list">
      <description>
        <text>Makes a list of the given items. If there are no items, makes an empty list.</text>
        <arg-description n="1" name="item" doc-name="item">Item to include in the list</arg-description>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="item" connector-kind="socket" connector-type="poly"
                        is-indented="yes" is-expandable="yes"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="make-yail-list"/>
        <LangSpecProperty key="socket-exclude-1" value="item/argument"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Is-list? block -->
    <BlockGenus name="is-list?" decorator="call" kind="function" initlabel="is a list?" color="list">
      <description>
        <arg-description n="1" name="thing" doc-name="thing">The thing to test.</arg-description>
        <text>Tests if something is a list.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="thing" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list?"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-exclude-1" value="thing/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- List Empty Block -->
    <BlockGenus name="list-empty?" decorator="call" kind="function" initlabel="is list empty?" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list to test</arg-description>
        <text>Tests if a list is empty (has no items in it)</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-empty?"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- List Length Block -->
    <BlockGenus name="list-length" decorator="call" kind="function" initlabel="length of list" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list to find the length of</arg-description>
        <text>Counts the number of items in a list.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-length"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- First and Rest are removed, to simplify the API to lists -->
    <!-- List First Block -->
    <!--
    <BlockGenus name="list-first" decorator="call" kind="function" initlabel="first in list" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list</arg-description>
        <text>Gets the first item in a list.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-first"/>
        <LangSpecProperty key="type-exclude-1" value="argument"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
      </LangSpecProperties>
    </BlockGenus>
    -->


  <!-- List Rest Block -->
  <!--
    <BlockGenus name="list-rest" decorator="call" kind="function" initlabel="rest of list" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list</arg-description>
        <text>Gets the rest of the list, after the first item.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-rest"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
      </LangSpecProperties>
    </BlockGenus>
 -->

  <!-- List Copy -->
    <BlockGenus name="list-copy" decorator="call" kind="function" initlabel="copy list" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list</arg-description>
        <text>Makes a copy of a list, including copying all sublists</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-copy"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
      </LangSpecProperties>
    </BlockGenus>

      <!-- List from CSV row string -->
    <BlockGenus name="list-from-csv-row" decorator="call" kind="function" initlabel="list from csv row" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The CSV row text</arg-description>
        <text>Parses a text as a CSV (comma-separated value) formatted row to produce a list of fields. It is an error for the row text to contain unescaped newlines inside fields (effectively, multiple lines). It is okay for the row text to end in a single newline or CRLF.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-from-csv-row"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
      </LangSpecProperties>
    </BlockGenus>

       <!-- List from CSV table Block -->
    <BlockGenus name="list-from-csv-table" decorator="call" kind="function" initlabel="list from csv table" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The CSV table text</arg-description>
        <text>Parses a text as a CSV (comma-separated value) formatted table to produce a list of rows, each of which is a list of fields. Rows can be separated by newlines (\n) or CRLF (\r\n).</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-from-csv-table"/>
        <LangSpecProperty key="plug-type-1" value="list"/>
        <LangSpecProperty key="socket-allow-1" value="text/text"/>
        <LangSpecProperty key="socket-allow-2" value="text/value"/>
      </LangSpecProperties>
    </BlockGenus>

      <!-- List to CSV row Block -->
    <BlockGenus name="list-to-csv-row" decorator="call" kind="function" initlabel="list to csv row" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list</arg-description>
        <text>Interprets the list as a row of a table and returns a CSV (comma-separated value) text representing the row. Each item in the row list is considered to be a field, and is quoted with double-quotes in the resulting CSV text. Items are separated by commas. The returned row text does not have a line separator at the end. </text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-to-csv-row"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
      </LangSpecProperties>
    </BlockGenus>

      <!-- List to CSV table Block -->
    <BlockGenus name="list-to-csv-table" decorator="call" kind="function" initlabel="list to csv table" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list</arg-description>
        <text>Interprets the list as a table in row-major format and returns a CSV (comma-separated value) text representing the table. Each item in the list should itself be a list representing a row of the CSV table. Each item in the row list is considered to be a field, and is quoted with double-quotes in the resulting CSV text. In the returned text, items in rows are separated by commas and rows are separated by CRLF (\r\n).</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-to-csv-table"/>
        <LangSpecProperty key="plug-type-1" value="text"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- List Get Item Block -->
    <BlockGenus name="get-list-item" decorator="call" kind="function" initlabel="select list item" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list </arg-description>
        <arg-description n="2" name="index" doc-name="index">The position of the item to retrieve</arg-description>
        <text>Get the nth item from a list.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="index" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-get-item"/>
        <LangSpecProperty key="type-exclude-1" value="argument"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
        <LangSpecProperty key="socket-allow-3" value="index/number"/>
        <LangSpecProperty key="socket-allow-4" value="index/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- List Pick Random Block -->
    <BlockGenus name="list-pick-random" decorator="call" kind="function" initlabel="pick random item" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list </arg-description>
        <text>Pick an element at random from the list.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-pick-random"/>
        <LangSpecProperty key="type-exclude-1" value="argument"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- List Set Item Block -->
    <BlockGenus name="replace-list-item" decorator="call" kind="command" initlabel="replace list item" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list"> The list</arg-description>
        <arg-description n="2" name="index" doc-name="index">The position of the item to replace</arg-description>
        <arg-description n="3" name="replacement" doc-name="replacement">The replacement for the item</arg-description>
        <text>Replaces the nth item in a list.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="index" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="replacement" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-set-item!"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
        <LangSpecProperty key="socket-allow-3" value="index/number"/>
        <LangSpecProperty key="socket-allow-4" value="index/value"/>
        <LangSpecProperty key="socket-exclude-1" value="replacement/argument"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- List Remove Item Block -->
    <BlockGenus name="remove-list-item" decorator="call" kind="command" initlabel="remove list item" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list</arg-description>
        <arg-description n="2" name="index" doc-name="index">The position of the item to remove</arg-description>
        <text>Removes the item at the specified position from the list.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="index" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-remove-item!"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
        <LangSpecProperty key="socket-allow-3" value="index/number"/>
        <LangSpecProperty key="socket-allow-4" value="index/value"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- List Insert Item Block -->
    <BlockGenus name="insert-list-item" decorator="call" kind="command" initlabel="insert list item" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list"> The list</arg-description>
        <arg-description n="2" name="index" doc-name="index">The position where the item should be inserted</arg-description>
        <arg-description n="3" name="item" doc-name="item">The item to insert</arg-description>
        <text>Insert an item into a list at the specified position.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="index" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="item" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-insert-item!"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
        <LangSpecProperty key="socket-allow-3" value="index/number"/>
        <LangSpecProperty key="socket-allow-4" value="index/value"/>
        <LangSpecProperty key="socket-exclude-1" value="item/argument"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- List Append Block -->
    <BlockGenus name="append-list" decorator="call" kind="command" initlabel="append to list" color="list">
      <description>
        <arg-description n="1" name="list1" doc-name="list1">The list to append on to</arg-description>
        <arg-description n="2" name="list2" doc-name="list2">The list of items to be appended</arg-description>
        <text>Appends all the items in list2 onto the end of list1.  After the append, list1 will include these additional elements, but list2 will be unchanged.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="list1" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="list2" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-append!"/>
        <LangSpecProperty key="socket-allow-1" value="list1/list"/>
        <LangSpecProperty key="socket-allow-2" value="list1/value"/>
        <LangSpecProperty key="socket-allow-3" value="list2/list"/>
        <LangSpecProperty key="socket-allow-4" value="list2/value"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- List Add-Items-to-List Block -->
    <BlockGenus name="add-items-to-list" decorator="call" kind="command" initlabel="add items to list" color="list">
      <description>
        <arg-description n="1" name="list" doc-name="list">The list</arg-description>
        <arg-description n="2" name="item" doc-name="item"> The item to add to the list</arg-description>
        <text>Adds items to the end of a list.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="item" connector-kind="socket" is-expandable="yes" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-add-to-list!"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
        <LangSpecProperty key="socket-exclude-1" value="item/argument"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- List Member Block -->
    <BlockGenus name="list-member" decorator="call" kind="function" initlabel="is in list?" color="list">
      <description>
        <arg-description n="1" name="thing" doc-name="thing">The thing to find in the list</arg-description>
        <arg-description n="2" name="list" doc-name="list">The list to check for the thing</arg-description>
        <text>Retuns true if the the thing is an item in the list, and false if not.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="thing" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-member?"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-exclude-1" value="thing/argument"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- List Index Block -->
    <BlockGenus name="list-index" decorator="call" kind="function" initlabel="position in list" color="list">
      <description>
        <arg-description n="1" name="thing" doc-name="thing">The thing whose position to find</arg-description>
        <arg-description n="2" name="list" doc-name="list">The list</arg-description>
        <text>Find the position of the thing in the list.  If it's not in the list, return 0.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="thing" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-list-index"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-exclude-1" value="thing/argument"/>
        <LangSpecProperty key="socket-allow-1" value="list/list"/>
        <LangSpecProperty key="socket-allow-2" value="list/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- List Lookup in Pairs Block -->
    <BlockGenus name="list-lookup-in-pairs" decorator="call" kind="function" initlabel="lookup in pairs " color="list">
      <description>
        <arg-description n="1" name="key" doc-name="key">The key to look up </arg-description>
        <arg-description n="2" name="pairs" doc-name="pairs">A list of (key value) pairs</arg-description>
        <arg-description n="3" name="notFound" 
                 doc-name="notFound">Value to return if there is no pair with the given key.</arg-description>
        <text>Returns the value associated with the key in the list of pairs.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="key" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="pairs" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="notFound" connector-kind="socket" connector-type="poly">
          <DefaultArg genus-name="text" label="NotFound"/>
        </BlockConnector>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-alist-lookup"/>
        <LangSpecProperty key="type-exclude-1" value="argument"/>
        <LangSpecProperty key="socket-exclude-1" value="key/argument"/>
        <LangSpecProperty key="socket-allow-1" value="pairs/value"/>
        <LangSpecProperty key="socket-allow-2" value="pairs/list"/>
        <LangSpecProperty key="socket-allow-3" value="notFound/text"/>
        <LangSpecProperty key="socket-allow-4" value="notFound/text"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Math -->

    <!-- Greaterthan Block -->
    <BlockGenus name="greaterthan" kind="function" initlabel=">" color="math">
      <description>
        <arg-description n="1" doc-name="left value">
          The first number to compare.
        </arg-description>
        <arg-description n="2" doc-name="right value">
          The second number to compare.
        </arg-description>
        <text>Tests whether the first number is greater than the second number.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value=">"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- GreaterthanOrEqual Block -->
    <BlockGenus name="greaterthanorequal" kind="function" initlabel=">=" color="math">
      <description>
        <arg-description n="1" doc-name="left value">
          The first number to compare.
        </arg-description>
        <arg-description n="2" doc-name="right value">
          The second number to compare.
        </arg-description>
        <text>Tests whether the first number is greater than or equal to the second number.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value=">="/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- Lessthan Block -->
    <BlockGenus name="lessthan" kind="function" initlabel="&lt;" color="math">
      <description>
        <arg-description n="1" doc-name="left value">
          The first number to compare.
        </arg-description>
        <arg-description n="2" doc-name="right value">
          The second number to compare.
        </arg-description>
        <text>Tests whether the first number is less than the second number.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="&lt;"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- LessthanOrEqual Block -->
    <BlockGenus name="lessthanorequal" kind="function" initlabel="&lt;=" color="math">
      <description>
        <arg-description n="1" doc-name="left value">
          The first number to compare.
        </arg-description>
        <arg-description n="2" doc-name="right value">
          The second number to compare.
        </arg-description>
        <text>Tests whether the first number is less than or equal to the second number.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="&lt;="/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>


    <BlockGenus name="number-plus" kind="function" initlabel="+" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="+"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Here we are specifying a non-ascii character (minus sign) as a label. -->
    <BlockGenus name="number-minus" kind="function" initlabel="&#x2212;" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="-"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- Here we are specifying a non-ascii character (times sign) as a label. -->
    <BlockGenus name="number-times" kind="function" initlabel="&#x00D7;" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="*"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <!-- It would be nicer to use a real division symbol here, but that looks too much like
         a + sign in Arial on the Mac
    -->
    <BlockGenus name="number-divide" kind="function" initlabel="/" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly" position-type="bottom"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-divide"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-sqrt" decorator="call" kind="function" initlabel="sqrt" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="sqrt"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-negate" decorator="call" kind="function" initlabel="negate" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="-"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-min" decorator="call" kind="function" initlabel="min" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" is-expandable="yes" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="min"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-max" decorator="call" kind="function" initlabel="max" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" is-expandable="yes" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="max"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-quotient" decorator="call" kind="function" initlabel="quotient" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="quotient"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-remainder" decorator="call" kind="function" initlabel="remainder" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="remainder"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-modulo" decorator="call" kind="function" initlabel="modulo" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="modulo"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-abs" decorator="call" kind="function" initlabel="abs" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="abs"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-round" decorator="call" kind="function" initlabel="round" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-round"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-floor" decorator="call" kind="function" initlabel="floor" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-floor"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-ceiling" decorator="call" kind="function" initlabel="ceiling" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="yail-ceiling"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-expt" decorator="call" kind="function" initlabel="expt" color="math">
       <description>
        <arg-description n="1" doc-name="base">
          The number to raise to the exponent.
        </arg-description>
        <arg-description n="2" doc-name="exponent">
          The power to raise the base to.
        </arg-description>
        <text>Returns the result of raising the base to the exponent.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="base" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="exponent" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="expt"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="exponent/number"/>
        <LangSpecProperty key="socket-allow-2" value="exponent/value"/>
        <LangSpecProperty key="socket-allow-3" value="base/number"/>
        <LangSpecProperty key="socket-allow-4" value="base/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-exp" decorator="call" kind="function" initlabel="exp" color="math">
       <description>
        <arg-description n="1" doc-name="exponent">
          The power to raise e to.
        </arg-description>
        <text>Returns the result of raising the mathematical constant 'e' to the given exponent.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="exp"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-log" decorator="call" kind="function" initlabel="log" color="math">
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="log"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-sin" decorator="call" kind="function" initlabel="sin" color="math">
      <description>
        <arg-description n="1" doc-name="degrees">
          An angle expressed in degrees
        </arg-description>
        <text>Provides the sine of the given angle in degrees</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="degrees" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="sin-degrees"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="degrees/number"/>
        <LangSpecProperty key="socket-allow-2" value="degrees/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-cos" decorator="call" kind="function" initlabel="cos" color="math">
      <description>
        <arg-description n="1" doc-name="degrees">
          An angle expressed in degrees
        </arg-description>
        <text>Provides the cosine of the given angle in degrees</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="degrees" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="cos-degrees"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="degrees/number"/>
        <LangSpecProperty key="socket-allow-2" value="degrees/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-tan" decorator="call" kind="function" initlabel="tan" color="math">
      <description>
        <arg-description n="1" doc-name="degrees">
          An angle expressed in degrees
        </arg-description>
        <text>Provides the tangent of the given angle in degrees</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="degrees" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="tan-degrees"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="degrees/number"/>
        <LangSpecProperty key="socket-allow-2" value="degrees/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-asin" decorator="call" kind="function" initlabel="asin" color="math">
      <description>
        <text>Provides the angle in the range (-90, +90] degrees with the given sine value</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="asin-degrees"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-acos" decorator="call" kind="function" initlabel="acos" color="math">
      <description>
        <text>Provides the angle in the range [0, 180) degrees with the given cosine value</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="acos-degrees"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-atan" decorator="call" kind="function" initlabel="atan" color="math">
      <description>
        <text>Provides the angle in the range (-90, +90) degrees with the given tangent value</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="atan-degrees"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="default/number"/>
        <LangSpecProperty key="socket-allow-2" value="default/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-atan2" decorator="call" kind="function" initlabel="atan2" color="math">
      <description>
        <arg-description n="1" doc-name="y">
          the y-coordinate
        </arg-description>
        <arg-description n="2" doc-name="x">
          the x-coordinate
        </arg-description>
        <text>Provides the angle in the range (-180, +180] degrees corresponding to the given rectangular coordinates</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
        <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="atan2-degrees"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="y/number"/>
        <LangSpecProperty key="socket-allow-2" value="y/value"/>
        <LangSpecProperty key="socket-allow-3" value="x/number"/>
        <LangSpecProperty key="socket-allow-4" value="x/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-radians-to-degrees" decorator="call" kind="function" initlabel="convert radians to degrees" color="math">
      <description>
        <arg-description n="1" doc-name="radians" />
        <text>Returns the degree value in the range [0, 360) corresponding to its radians argument</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="radians" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="radians->degrees"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="radians/number"/>
        <LangSpecProperty key="socket-allow-2" value="radians/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-degrees-to-radians" decorator="call" kind="function" initlabel="convert degrees to radians" color="math">
      <description>
        <arg-description n="1" doc-name="degrees" />
        <text>Returns the radian value in the range [-Pi, +Pi) corresponding to its degrees argument</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="degrees" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="degrees->radians"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="degrees/number"/>
        <LangSpecProperty key="socket-allow-2" value="degrees/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-random-set-seed" decorator="call" kind="command" initlabel="random set seed" color="math">
      <description>
        <arg-description n="1" doc-name="seed">
          Numeric seed for random number generator
        </arg-description>
        <text>Specifies a numeric seed for the random number generator.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="seed" connector-kind="socket" connector-type="poly">
        </BlockConnector>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="random-set-seed"/>
        <LangSpecProperty key="socket-allow-1" value="seed/number"/>
        <LangSpecProperty key="socket-allow-2" value="seed/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-random-fraction" decorator="call" kind="function" initlabel="random fraction" color="math">
      <description>
        <text>Returns a random number between 0 and 1.</text>
      </description>
      <BlockConnectors>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="random-fraction"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="number-random-integer" decorator="call" kind="function" initlabel="random integer" color="math">
      <description>
        <arg-description n="1" doc-name="lower bound">
          The lower bound
        </arg-description>
        <arg-description n="2" doc-name="upper bound">
          The upper bound
        </arg-description>
        <text>Returns a random integer between the lower bound and the upper bound.  The bounds will be clipped to be smaller than 2**30.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="from" connector-kind="socket" connector-type="poly">
          <DefaultArg genus-name="number" label="1"/>
        </BlockConnector>
        <BlockConnector label="to" connector-kind="socket" connector-type="poly">
          <DefaultArg genus-name="number" label="100"/>
        </BlockConnector>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="random-integer"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
        <LangSpecProperty key="socket-allow-1" value="from/number"/>
        <LangSpecProperty key="socket-allow-2" value="from/value"/>
        <LangSpecProperty key="socket-allow-3" value="to/number"/>
        <LangSpecProperty key="socket-allow-4" value="to/value"/>
      </LangSpecProperties>
    </BlockGenus>

    <BlockGenus name="format-as-decimal" decorator="call" kind="function" initlabel="format as decimal" color="math">
      <description>
        <arg-description n="1" doc-name="number">
          The number to be formatted
        </arg-description>
        <arg-description n="2" doc-name="places">
          The number of places
        </arg-description>
        <text>Returns the number formatted as a decimal with a specified number of places.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="number" connector-kind="socket" connector-type="poly">
        </BlockConnector>
        <BlockConnector label="places" connector-kind="socket" connector-type="poly">
        </BlockConnector>
        <BlockConnector connector-kind="plug" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="format-as-decimal"/>
        <LangSpecProperty key="plug-type-1" value="number"/>
       <LangSpecProperty key="socket-allow-1" value="number/number"/>
        <LangSpecProperty key="socket-allow-2" value="number/value"/>
        <LangSpecProperty key="socket-allow-3" value="places/number"/>
        <LangSpecProperty key="socket-allow-4" value="places/value"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- Is-number? block -->
    <BlockGenus name="number-is-number?" decorator="call" kind="function" initlabel="is a number?" color="math">
      <description>
        <arg-description n="1" name="thing" doc-name="thing">The thing to test.</arg-description>
        <text>Tests if something is a number.</text>
      </description>
      <BlockConnectors>
        <BlockConnector label="" connector-kind="plug" connector-type="poly"/>
        <BlockConnector label="thing" connector-kind="socket" connector-type="poly"/>
      </BlockConnectors>
      <LangSpecProperties>
        <LangSpecProperty key="ya-kind" value="primitive"/>
        <LangSpecProperty key="ya-rep" value="is-number?"/>
        <LangSpecProperty key="plug-type-1" value="boolean"/>
        <LangSpecProperty key="socket-exclude-1" value="thing/argument"/>
      </LangSpecProperties>
    </BlockGenus>


    <!-- COMPONENTS BEGIN HERE -->

<!-- AccelerometerSensor Component -->

<BlockGenus name="AccelerometerSensor" initlabel="AccelerometerSensor"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Non-visible component that can detect shaking and measure acceleration approximately in three dimensions using SI units (m/s2). The components are: - xAccel: 0 when the phone is at rest on a flat surface, positive when the phone is tilted to the right (i.e., its left side is raised), and negative when the phone is tilted to the left (i.e., its right size is raised). - yAccel: 0 when the phone is at rest on a flat surface, positive when its bottom is raised, and negative when its top is raised. - zAccel: Equal to -9.8 (earth&apos;s gravity in meters per second per second when the device is at rest parallel to the ground with the display facing up, 0 when perpindicular to the ground, and +9.8 when facing down. The value can also be affected by accelerating it with or against gravity.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="2"/>
    <LangSpecProperty key="ya-event-1" value="AccelerometerSensor-AccelerationChanged"/>
    <LangSpecProperty key="ya-event-2" value="AccelerometerSensor-Shaking"/>
    <LangSpecProperty key="ya-prop-1" value="Available/read-only-property/boolean/"/>
    <LangSpecProperty key="ya-prop-2" value="Enabled/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-3" value="MinimumInterval/read-write-property/number/The minimum interval between phone shakes"/>
    <LangSpecProperty key="ya-prop-4" value="XAccel/read-only-property/number/"/>
    <LangSpecProperty key="ya-prop-5" value="YAccel/read-only-property/number/"/>
    <LangSpecProperty key="ya-prop-6" value="ZAccel/read-only-property/number/"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="AccelerometerSensor-AccelerationChanged" initlabel="AccelerationChanged"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates the acceleration changed in the X, Y, and/or Z dimensions.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="xAccel" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="xAccel"/>
    </BlockConnector>
    <BlockConnector label="yAccel" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="yAccel"/>
    </BlockConnector>
    <BlockConnector label="zAccel" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="zAccel"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="xAccel/argument"/>
    <LangSpecProperty key="socket-allow-2" value="yAccel/argument"/>
    <LangSpecProperty key="socket-allow-3" value="zAccel/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="AccelerometerSensor-Shaking" initlabel="Shaking"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates the device started being shaken or continues to be shaken.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- ActivityStarter Component -->

<BlockGenus name="ActivityStarter" initlabel="ActivityStarter"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A component that can launch an activity using the StartActivity method. Activities that can be launched include: - starting other App Inventor for Android apps - starting the camera application - performing web search - opening a browser to a specified web page - opening the map application to a specified location You can also launch activities that return text data. See the documentation on using the Activity Starter for examples.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="4"/>
    <LangSpecProperty key="ya-event-1" value="ActivityStarter-AfterActivity"/>
    <LangSpecProperty key="ya-prop-1" value="Action/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-2" value="ActivityClass/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-3" value="ActivityPackage/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-4" value="DataType/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-5" value="DataUri/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-6" value="ExtraKey/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-7" value="ExtraValue/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-8" value="Result/read-only-property/text/"/>
    <LangSpecProperty key="ya-prop-9" value="ResultName/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-10" value="ResultType/read-only-property/text/"/>
    <LangSpecProperty key="ya-prop-11" value="ResultUri/read-only-property/text/"/>
    <LangSpecProperty key="ya-method-1" value="ActivityStarter-ResolveActivity"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-ActivityStarter-ResolveActivity"/>
    <LangSpecProperty key="ya-method-2" value="ActivityStarter-StartActivity"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-ActivityStarter-StartActivity"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="ActivityStarter-ActivityError" initlabel="ActivityError"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>The ActivityError event is no longer used. Please use the Screen.ErrorOccurred event instead.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="message"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="message/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ActivityStarter-AfterActivity" initlabel="AfterActivity"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event raised after this ActivityStarter returns.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="result" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="result"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="result/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="ActivityStarter-ResolveActivity" decorator="call" initlabel="ResolveActivity"
            kind="function" color="call">
  <description>
    <text>Returns the name of the activity that corresponds to this ActivityStarer, or an empty string if no corresponding activity can be found.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-ActivityStarter-ResolveActivity" decorator="call" initlabel="ResolveActivity"
            kind="function" color="call">
  <description>
    <text>Returns the name of the activity that corresponds to this ActivityStarer, or an empty string if no corresponding activity can be found.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ActivityStarter-StartActivity" decorator="call" initlabel="StartActivity"
            kind="command" color="call">
  <description>
    <text>Start the activity corresponding to this ActivityStarter.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-ActivityStarter-StartActivity" decorator="call" initlabel="StartActivity"
            kind="command" color="call">
  <description>
    <text>Start the activity corresponding to this ActivityStarter.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Ball Component -->

<BlockGenus name="Ball" initlabel="Ball"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A round &apos;sprite&apos; that can be placed on a Canvas, where it can react to touches and drags, interact with other sprites (ImageSprites and other Balls) and the edge of the Canvas, and move according to its property values. For example, to have a Ball move 4 pixels toward the top of a Canvas every 500 milliseconds (half second), you would set the Speed property to 4 [pixels], the Interval property to 500 [milliseconds], the Heading property to 90 [degrees], and the Enabled property to True. These and its other properties can be changed at any time. The difference between a Ball and an ImageSprite is that the latter can get its appearance from an image file, while a Ball&apos;s appearance can only be changed by varying its PaintColor and Radius properties.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="5"/>
    <LangSpecProperty key="ya-event-1" value="Ball-CollidedWith"/>
    <LangSpecProperty key="ya-event-2" value="Ball-Dragged"/>
    <LangSpecProperty key="ya-event-3" value="Ball-EdgeReached"/>
    <LangSpecProperty key="ya-event-4" value="Ball-Flung"/>
    <LangSpecProperty key="ya-event-5" value="Ball-NoLongerCollidingWith"/>
    <LangSpecProperty key="ya-event-6" value="Ball-TouchDown"/>
    <LangSpecProperty key="ya-event-7" value="Ball-TouchUp"/>
    <LangSpecProperty key="ya-event-8" value="Ball-Touched"/>
    <LangSpecProperty key="ya-prop-1" value="Enabled/read-write-property/boolean/Controls whether the sprite moves when its speed is non-zero."/>
    <LangSpecProperty key="ya-prop-2" value="Heading/read-write-property/number/Returns the sprite&apos;s heading in degrees above the positive x-axis. Zero degrees is toward the right of the screen; 90 degrees is toward the top of the screen."/>
    <LangSpecProperty key="ya-prop-3" value="Interval/read-write-property/number/The interval in milliseconds at which the sprite&apos;s position is updated. For example, if the interval is 50 and the speed is 10, then the sprite will move 10 pixels every 50 milliseconds."/>
    <LangSpecProperty key="ya-prop-4" value="PaintColor/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-5" value="Radius/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-6" value="Speed/read-write-property/number/The speed at which the sprite moves. The sprite moves this many pixels every interval."/>
    <LangSpecProperty key="ya-prop-7" value="Visible/read-write-property/boolean/True if the sprite is visible."/>
    <LangSpecProperty key="ya-prop-8" value="X/read-write-property/number/The horizontal coordinate of the left edge of the sprite, increasing as the sprite moves to the right."/>
    <LangSpecProperty key="ya-prop-9" value="Y/read-write-property/number/The vertical coordinate of the top of the sprite, increasing as the sprite moves down."/>
    <LangSpecProperty key="ya-prop-10" value="Z/read-write-property/number/How the sprite should be layered relative to other sprits, with higher-numbered layers in front of lower-numbered layers."/>
    <LangSpecProperty key="ya-method-1" value="Ball-Bounce"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-Ball-Bounce"/>
    <LangSpecProperty key="ya-method-2" value="Ball-CollidingWith"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-Ball-CollidingWith"/>
    <LangSpecProperty key="ya-method-3" value="Ball-MoveIntoBounds"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-Ball-MoveIntoBounds"/>
    <LangSpecProperty key="ya-method-4" value="Ball-MoveTo"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-Ball-MoveTo"/>
    <LangSpecProperty key="ya-method-5" value="Ball-PointInDirection"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-Ball-PointInDirection"/>
    <LangSpecProperty key="ya-method-6" value="Ball-PointTowards"/>
    <LangSpecProperty key="ya-type-method-6" value="Type-Ball-PointTowards"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Ball-CollidedWith" initlabel="CollidedWith"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Handler for CollidedWith events, called when two sprites collide. Note that checking for collisions with a rotated ImageSprite currently checks against the sprite&apos;s unrotated position. Therefore, collision checking will be inaccurate for tall narrow or short wide sprites that are rotated.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="other" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="other"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="other/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Ball-Dragged" initlabel="Dragged"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Handler for Dragged events. On all calls, the starting coordinates are where the screen was first touched, and the &quot;current&quot; coordinates describe the endpoint of the current line segment. On the first call within a given drag, the &quot;previous&quot; coordinates are the same as the starting coordinates; subsequently, they are the &quot;current&quot; coordinates from the prior call. Note that the Sprite won&apos;t actually move anywhere in response to the Dragged event unless MoveTo is specifically called.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="startX" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="startX"/>
    </BlockConnector>
    <BlockConnector label="startY" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="startY"/>
    </BlockConnector>
    <BlockConnector label="prevX" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="prevX"/>
    </BlockConnector>
    <BlockConnector label="prevY" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="prevY"/>
    </BlockConnector>
    <BlockConnector label="currentX" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="currentX"/>
    </BlockConnector>
    <BlockConnector label="currentY" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="currentY"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="startX/argument"/>
    <LangSpecProperty key="socket-allow-2" value="startY/argument"/>
    <LangSpecProperty key="socket-allow-3" value="prevX/argument"/>
    <LangSpecProperty key="socket-allow-4" value="prevY/argument"/>
    <LangSpecProperty key="socket-allow-5" value="currentX/argument"/>
    <LangSpecProperty key="socket-allow-6" value="currentY/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Ball-EdgeReached" initlabel="EdgeReached"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event handler called when the sprite reaches an edge of the screen. If Bounce is then called with that edge, the sprite will appear to bounce off of the edge it reached.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="edge" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="edge"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="edge/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Ball-Flung" initlabel="Flung"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>When a fling gesture (quick swipe) is made on the sprite: provides the (x,y) position of the start of the fling, relative to the upper left of the canvas. Also provides the speed (pixels per millisecond) and heading (0-360 degrees) of the fling, as well as the x velocity and y velocity components of the fling&apos;s vector.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="x"/>
    </BlockConnector>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="y"/>
    </BlockConnector>
    <BlockConnector label="speed" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="speed"/>
    </BlockConnector>
    <BlockConnector label="heading" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="heading"/>
    </BlockConnector>
    <BlockConnector label="xvel" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="xvel"/>
    </BlockConnector>
    <BlockConnector label="yvel" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="yvel"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="x/argument"/>
    <LangSpecProperty key="socket-allow-2" value="y/argument"/>
    <LangSpecProperty key="socket-allow-3" value="speed/argument"/>
    <LangSpecProperty key="socket-allow-4" value="heading/argument"/>
    <LangSpecProperty key="socket-allow-5" value="xvel/argument"/>
    <LangSpecProperty key="socket-allow-6" value="yvel/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Ball-NoLongerCollidingWith" initlabel="NoLongerCollidingWith"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event indicating that a pair of sprites are no longer colliding.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="other" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="other"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="other/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Ball-TouchDown" initlabel="TouchDown"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>When the user begins touching the sprite (places finger on sprite and leaves it there): provides the (x,y) position of the touch, relative to the upper left of the canvas</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="x"/>
    </BlockConnector>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="y"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="x/argument"/>
    <LangSpecProperty key="socket-allow-2" value="y/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Ball-TouchUp" initlabel="TouchUp"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>When the user stops touching the sprite (lifts finger after a TouchDown event): provides the (x,y) position of the touch, relative to the upper left of the canvas</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="x"/>
    </BlockConnector>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="y"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="x/argument"/>
    <LangSpecProperty key="socket-allow-2" value="y/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Ball-Touched" initlabel="Touched"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>When the user touches the sprite and then immediately lifts finger: provides the (x,y) position of the touch, relative to the upper left of the canvas</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="x"/>
    </BlockConnector>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="y"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="x/argument"/>
    <LangSpecProperty key="socket-allow-2" value="y/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="Ball-Bounce" decorator="call" initlabel="Bounce"
            kind="command" color="call">
  <description>
    <text>Makes this sprite bounce, as if off a wall. For normal bouncing, the edge argument should be the one returned by EdgeReached.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="edge" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="edge/value"/>
    <LangSpecProperty key="socket-allow-2" value="edge/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Ball-Bounce" decorator="call" initlabel="Bounce"
            kind="command" color="call">
  <description>
    <text>Makes this sprite bounce, as if off a wall. For normal bouncing, the edge argument should be the one returned by EdgeReached.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="edge" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="edge/value"/>
    <LangSpecProperty key="socket-allow-4" value="edge/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Ball-CollidingWith" decorator="call" initlabel="CollidingWith"
            kind="function" color="call">
  <description>
    <text>Indicates whether a collision has been registered between this sprite and the passed sprite.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="other" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="boolean"/>
    <LangSpecProperty key="socket-allow-1" value="other/value"/>
    <LangSpecProperty key="socket-allow-2" value="other/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Ball-CollidingWith" decorator="call" initlabel="CollidingWith"
            kind="function" color="call">
  <description>
    <text>Indicates whether a collision has been registered between this sprite and the passed sprite.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="other" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="boolean"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="other/value"/>
    <LangSpecProperty key="socket-allow-4" value="other/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Ball-MoveIntoBounds" decorator="call" initlabel="MoveIntoBounds"
            kind="command" color="call">
  <description>
    <text>Moves the sprite back in bounds if part of it extends out of bounds, having no effect otherwise. If the sprite is too wide to fit on the canvas, this aligns the left side of the sprite with the left side of the canvas. If the sprite is too tall to fit on the canvas, this aligns the top side of the sprite with the top side of the canvas.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Ball-MoveIntoBounds" decorator="call" initlabel="MoveIntoBounds"
            kind="command" color="call">
  <description>
    <text>Moves the sprite back in bounds if part of it extends out of bounds, having no effect otherwise. If the sprite is too wide to fit on the canvas, this aligns the left side of the sprite with the left side of the canvas. If the sprite is too tall to fit on the canvas, this aligns the top side of the sprite with the top side of the canvas.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Ball-MoveTo" decorator="call" initlabel="MoveTo"
            kind="command" color="call">
  <description>
    <text>Moves the sprite so that its left top corner is at the specfied x and y coordinates.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="x/value"/>
    <LangSpecProperty key="socket-allow-2" value="y/value"/>
    <LangSpecProperty key="socket-allow-3" value="x/number"/>
    <LangSpecProperty key="socket-allow-4" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Ball-MoveTo" decorator="call" initlabel="MoveTo"
            kind="command" color="call">
  <description>
    <text>Moves the sprite so that its left top corner is at the specfied x and y coordinates.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="x/value"/>
    <LangSpecProperty key="socket-allow-4" value="y/value"/>
    <LangSpecProperty key="socket-allow-5" value="x/number"/>
    <LangSpecProperty key="socket-allow-6" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Ball-PointInDirection" decorator="call" initlabel="PointInDirection"
            kind="command" color="call">
  <description>
    <text>Turns the sprite to point towards the point with coordinates as (x, y).</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="x/value"/>
    <LangSpecProperty key="socket-allow-2" value="y/value"/>
    <LangSpecProperty key="socket-allow-3" value="x/number"/>
    <LangSpecProperty key="socket-allow-4" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Ball-PointInDirection" decorator="call" initlabel="PointInDirection"
            kind="command" color="call">
  <description>
    <text>Turns the sprite to point towards the point with coordinates as (x, y).</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="x/value"/>
    <LangSpecProperty key="socket-allow-4" value="y/value"/>
    <LangSpecProperty key="socket-allow-5" value="x/number"/>
    <LangSpecProperty key="socket-allow-6" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Ball-PointTowards" decorator="call" initlabel="PointTowards"
            kind="command" color="call">
  <description>
    <text>Turns the sprite to point towards a designated target sprite. The new heading will be parallel to the line joining the centerpoints of the two sprites.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="target" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="target/value"/>
    <LangSpecProperty key="socket-allow-2" value="target/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Ball-PointTowards" decorator="call" initlabel="PointTowards"
            kind="command" color="call">
  <description>
    <text>Turns the sprite to point towards a designated target sprite. The new heading will be parallel to the line joining the centerpoints of the two sprites.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="target" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="target/value"/>
    <LangSpecProperty key="socket-allow-4" value="target/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- BarcodeScanner Component -->

<BlockGenus name="BarcodeScanner" initlabel="BarcodeScanner"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Component for using the Barcode Scanner to read a barcode</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-event-1" value="BarcodeScanner-AfterScan"/>
    <LangSpecProperty key="ya-prop-1" value="Result/read-only-property/text/"/>
    <LangSpecProperty key="ya-method-1" value="BarcodeScanner-DoScan"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-BarcodeScanner-DoScan"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="BarcodeScanner-AfterScan" initlabel="AfterScan"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Simple event to raise after the scanner activity has returned</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="result" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="result"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="result/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="BarcodeScanner-DoScan" decorator="call" initlabel="DoScan"
            kind="command" color="call">
  <description>
    <text>Begins a barcode scan, using the camera. When the scan is complete, the AfterScan event will be raised.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BarcodeScanner-DoScan" decorator="call" initlabel="DoScan"
            kind="command" color="call">
  <description>
    <text>Begins a barcode scan, using the camera. When the scan is complete, the AfterScan event will be raised.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- BluetoothClient Component -->

<BlockGenus name="BluetoothClient" initlabel="BluetoothClient"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Bluetooth client component</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="5"/>
    <LangSpecProperty key="ya-prop-1" value="AddressesAndNames/read-only-property/list/The addresses and names of paired Bluetooth devices"/>
    <LangSpecProperty key="ya-prop-2" value="Available/read-only-property/boolean/Whether Bluetooth is available on the device"/>
    <LangSpecProperty key="ya-prop-3" value="CharacterEncoding/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-4" value="DelimiterByte/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-5" value="Enabled/read-only-property/boolean/Whether Bluetooth is enabled"/>
    <LangSpecProperty key="ya-prop-6" value="HighByteFirst/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-7" value="IsConnected/read-only-property/boolean/"/>
    <LangSpecProperty key="ya-prop-8" value="Secure/read-write-property/boolean/Whether to invoke SSP (Simple Secure Pairing), which is supported on devices with Bluetooth v2.1 or higher. When working with embedded Bluetooth devices, this property may need to be set to False. For Android 2.0-2.2, this property setting will be ignored."/>
    <LangSpecProperty key="ya-method-1" value="BluetoothClient-BytesAvailableToReceive"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-BluetoothClient-BytesAvailableToReceive"/>
    <LangSpecProperty key="ya-method-2" value="BluetoothClient-Connect"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-BluetoothClient-Connect"/>
    <LangSpecProperty key="ya-method-3" value="BluetoothClient-ConnectWithUUID"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-BluetoothClient-ConnectWithUUID"/>
    <LangSpecProperty key="ya-method-4" value="BluetoothClient-Disconnect"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-BluetoothClient-Disconnect"/>
    <LangSpecProperty key="ya-method-5" value="BluetoothClient-IsDevicePaired"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-BluetoothClient-IsDevicePaired"/>
    <LangSpecProperty key="ya-method-6" value="BluetoothClient-ReceiveSigned1ByteNumber"/>
    <LangSpecProperty key="ya-type-method-6" value="Type-BluetoothClient-ReceiveSigned1ByteNumber"/>
    <LangSpecProperty key="ya-method-7" value="BluetoothClient-ReceiveSigned2ByteNumber"/>
    <LangSpecProperty key="ya-type-method-7" value="Type-BluetoothClient-ReceiveSigned2ByteNumber"/>
    <LangSpecProperty key="ya-method-8" value="BluetoothClient-ReceiveSigned4ByteNumber"/>
    <LangSpecProperty key="ya-type-method-8" value="Type-BluetoothClient-ReceiveSigned4ByteNumber"/>
    <LangSpecProperty key="ya-method-9" value="BluetoothClient-ReceiveSignedBytes"/>
    <LangSpecProperty key="ya-type-method-9" value="Type-BluetoothClient-ReceiveSignedBytes"/>
    <LangSpecProperty key="ya-method-10" value="BluetoothClient-ReceiveText"/>
    <LangSpecProperty key="ya-type-method-10" value="Type-BluetoothClient-ReceiveText"/>
    <LangSpecProperty key="ya-method-11" value="BluetoothClient-ReceiveUnsigned1ByteNumber"/>
    <LangSpecProperty key="ya-type-method-11" value="Type-BluetoothClient-ReceiveUnsigned1ByteNumber"/>
    <LangSpecProperty key="ya-method-12" value="BluetoothClient-ReceiveUnsigned2ByteNumber"/>
    <LangSpecProperty key="ya-type-method-12" value="Type-BluetoothClient-ReceiveUnsigned2ByteNumber"/>
    <LangSpecProperty key="ya-method-13" value="BluetoothClient-ReceiveUnsigned4ByteNumber"/>
    <LangSpecProperty key="ya-type-method-13" value="Type-BluetoothClient-ReceiveUnsigned4ByteNumber"/>
    <LangSpecProperty key="ya-method-14" value="BluetoothClient-ReceiveUnsignedBytes"/>
    <LangSpecProperty key="ya-type-method-14" value="Type-BluetoothClient-ReceiveUnsignedBytes"/>
    <LangSpecProperty key="ya-method-15" value="BluetoothClient-Send1ByteNumber"/>
    <LangSpecProperty key="ya-type-method-15" value="Type-BluetoothClient-Send1ByteNumber"/>
    <LangSpecProperty key="ya-method-16" value="BluetoothClient-Send2ByteNumber"/>
    <LangSpecProperty key="ya-type-method-16" value="Type-BluetoothClient-Send2ByteNumber"/>
    <LangSpecProperty key="ya-method-17" value="BluetoothClient-Send4ByteNumber"/>
    <LangSpecProperty key="ya-type-method-17" value="Type-BluetoothClient-Send4ByteNumber"/>
    <LangSpecProperty key="ya-method-18" value="BluetoothClient-SendBytes"/>
    <LangSpecProperty key="ya-type-method-18" value="Type-BluetoothClient-SendBytes"/>
    <LangSpecProperty key="ya-method-19" value="BluetoothClient-SendText"/>
    <LangSpecProperty key="ya-type-method-19" value="Type-BluetoothClient-SendText"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="BluetoothClient-BluetoothError" initlabel="BluetoothError"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>The BluetoothError event is no longer used. Please use the Screen.ErrorOccurred event instead.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="functionName" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="functionName"/>
    </BlockConnector>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="message"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="functionName/argument"/>
    <LangSpecProperty key="socket-allow-2" value="message/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="BluetoothClient-BytesAvailableToReceive" decorator="call" initlabel="BytesAvailableToReceive"
            kind="function" color="call">
  <description>
    <text>Returns an estimate of the number of bytes that can be received without blocking</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothClient-BytesAvailableToReceive" decorator="call" initlabel="BytesAvailableToReceive"
            kind="function" color="call">
  <description>
    <text>Returns an estimate of the number of bytes that can be received without blocking</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothClient-Connect" decorator="call" initlabel="Connect"
            kind="function" color="call">
  <description>
    <text>Connect to the Bluetooth device with the specified address and the Serial Port Profile (SPP). Returns true if the connection was successful.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="address" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="boolean"/>
    <LangSpecProperty key="socket-allow-1" value="address/value"/>
    <LangSpecProperty key="socket-allow-2" value="address/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothClient-Connect" decorator="call" initlabel="Connect"
            kind="function" color="call">
  <description>
    <text>Connect to the Bluetooth device with the specified address and the Serial Port Profile (SPP). Returns true if the connection was successful.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="address" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="boolean"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="address/value"/>
    <LangSpecProperty key="socket-allow-4" value="address/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothClient-ConnectWithUUID" decorator="call" initlabel="ConnectWithUUID"
            kind="function" color="call">
  <description>
    <text>Connect to the Bluetooth device with the specified address and UUID. Returns true if the connection was successful.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="address" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="uuid" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="boolean"/>
    <LangSpecProperty key="socket-allow-1" value="address/value"/>
    <LangSpecProperty key="socket-allow-2" value="uuid/value"/>
    <LangSpecProperty key="socket-allow-3" value="address/text"/>
    <LangSpecProperty key="socket-allow-4" value="uuid/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothClient-ConnectWithUUID" decorator="call" initlabel="ConnectWithUUID"
            kind="function" color="call">
  <description>
    <text>Connect to the Bluetooth device with the specified address and UUID. Returns true if the connection was successful.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="address" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="uuid" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="boolean"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="address/value"/>
    <LangSpecProperty key="socket-allow-4" value="uuid/value"/>
    <LangSpecProperty key="socket-allow-5" value="address/text"/>
    <LangSpecProperty key="socket-allow-6" value="uuid/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothClient-Disconnect" decorator="call" initlabel="Disconnect"
            kind="command" color="call">
  <description>
    <text>Disconnect from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothClient-Disconnect" decorator="call" initlabel="Disconnect"
            kind="command" color="call">
  <description>
    <text>Disconnect from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothClient-IsDevicePaired" decorator="call" initlabel="IsDevicePaired"
            kind="function" color="call">
  <description>
    <text>Checks whether the Bluetooth device with the specified address is paired.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="address" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="boolean"/>
    <LangSpecProperty key="socket-allow-1" value="address/value"/>
    <LangSpecProperty key="socket-allow-2" value="address/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothClient-IsDevicePaired" decorator="call" initlabel="IsDevicePaired"
            kind="function" color="call">
  <description>
    <text>Checks whether the Bluetooth device with the specified address is paired.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="address" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="boolean"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="address/value"/>
    <LangSpecProperty key="socket-allow-4" value="address/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothClient-ReceiveSigned1ByteNumber" decorator="call" initlabel="ReceiveSigned1ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive a signed 1-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothClient-ReceiveSigned1ByteNumber" decorator="call" initlabel="ReceiveSigned1ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive a signed 1-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothClient-ReceiveSigned2ByteNumber" decorator="call" initlabel="ReceiveSigned2ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive a signed 2-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothClient-ReceiveSigned2ByteNumber" decorator="call" initlabel="ReceiveSigned2ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive a signed 2-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothClient-ReceiveSigned4ByteNumber" decorator="call" initlabel="ReceiveSigned4ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive a signed 4-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothClient-ReceiveSigned4ByteNumber" decorator="call" initlabel="ReceiveSigned4ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive a signed 4-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothClient-ReceiveSignedBytes" decorator="call" initlabel="ReceiveSignedBytes"
            kind="function" color="call">
  <description>
    <text>Receive multiple signed byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="numberOfBytes" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="list"/>
    <LangSpecProperty key="socket-allow-1" value="numberOfBytes/value"/>
    <LangSpecProperty key="socket-allow-2" value="numberOfBytes/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothClient-ReceiveSignedBytes" decorator="call" initlabel="ReceiveSignedBytes"
            kind="function" color="call">
  <description>
    <text>Receive multiple signed byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="numberOfBytes" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="list"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="numberOfBytes/value"/>
    <LangSpecProperty key="socket-allow-4" value="numberOfBytes/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothClient-ReceiveText" decorator="call" initlabel="ReceiveText"
            kind="function" color="call">
  <description>
    <text>Receive text from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="numberOfBytes" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="numberOfBytes/value"/>
    <LangSpecProperty key="socket-allow-2" value="numberOfBytes/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothClient-ReceiveText" decorator="call" initlabel="ReceiveText"
            kind="function" color="call">
  <description>
    <text>Receive text from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="numberOfBytes" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="numberOfBytes/value"/>
    <LangSpecProperty key="socket-allow-4" value="numberOfBytes/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothClient-ReceiveUnsigned1ByteNumber" decorator="call" initlabel="ReceiveUnsigned1ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive an unsigned 1-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothClient-ReceiveUnsigned1ByteNumber" decorator="call" initlabel="ReceiveUnsigned1ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive an unsigned 1-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothClient-ReceiveUnsigned2ByteNumber" decorator="call" initlabel="ReceiveUnsigned2ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive a unsigned 2-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothClient-ReceiveUnsigned2ByteNumber" decorator="call" initlabel="ReceiveUnsigned2ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive a unsigned 2-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothClient-ReceiveUnsigned4ByteNumber" decorator="call" initlabel="ReceiveUnsigned4ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive a unsigned 4-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothClient-ReceiveUnsigned4ByteNumber" decorator="call" initlabel="ReceiveUnsigned4ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive a unsigned 4-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothClient-ReceiveUnsignedBytes" decorator="call" initlabel="ReceiveUnsignedBytes"
            kind="function" color="call">
  <description>
    <text>Receive multiple unsigned byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="numberOfBytes" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="list"/>
    <LangSpecProperty key="socket-allow-1" value="numberOfBytes/value"/>
    <LangSpecProperty key="socket-allow-2" value="numberOfBytes/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothClient-ReceiveUnsignedBytes" decorator="call" initlabel="ReceiveUnsignedBytes"
            kind="function" color="call">
  <description>
    <text>Receive multiple unsigned byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="numberOfBytes" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="list"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="numberOfBytes/value"/>
    <LangSpecProperty key="socket-allow-4" value="numberOfBytes/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothClient-Send1ByteNumber" decorator="call" initlabel="Send1ByteNumber"
            kind="command" color="call">
  <description>
    <text>Send a 1-byte number to the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="number" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="number/value"/>
    <LangSpecProperty key="socket-allow-2" value="number/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothClient-Send1ByteNumber" decorator="call" initlabel="Send1ByteNumber"
            kind="command" color="call">
  <description>
    <text>Send a 1-byte number to the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="number" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="number/value"/>
    <LangSpecProperty key="socket-allow-4" value="number/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothClient-Send2ByteNumber" decorator="call" initlabel="Send2ByteNumber"
            kind="command" color="call">
  <description>
    <text>Send a 2-byte number to the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="number" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="number/value"/>
    <LangSpecProperty key="socket-allow-2" value="number/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothClient-Send2ByteNumber" decorator="call" initlabel="Send2ByteNumber"
            kind="command" color="call">
  <description>
    <text>Send a 2-byte number to the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="number" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="number/value"/>
    <LangSpecProperty key="socket-allow-4" value="number/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothClient-Send4ByteNumber" decorator="call" initlabel="Send4ByteNumber"
            kind="command" color="call">
  <description>
    <text>Send a 4-byte number to the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="number" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="number/value"/>
    <LangSpecProperty key="socket-allow-2" value="number/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothClient-Send4ByteNumber" decorator="call" initlabel="Send4ByteNumber"
            kind="command" color="call">
  <description>
    <text>Send a 4-byte number to the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="number" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="number/value"/>
    <LangSpecProperty key="socket-allow-4" value="number/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothClient-SendBytes" decorator="call" initlabel="SendBytes"
            kind="command" color="call">
  <description>
    <text>Send a list of byte values to the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="list/value"/>
    <LangSpecProperty key="socket-allow-2" value="list/list"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothClient-SendBytes" decorator="call" initlabel="SendBytes"
            kind="command" color="call">
  <description>
    <text>Send a list of byte values to the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="list/value"/>
    <LangSpecProperty key="socket-allow-4" value="list/list"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothClient-SendText" decorator="call" initlabel="SendText"
            kind="command" color="call">
  <description>
    <text>Send text to the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="text/value"/>
    <LangSpecProperty key="socket-allow-2" value="text/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothClient-SendText" decorator="call" initlabel="SendText"
            kind="command" color="call">
  <description>
    <text>Send text to the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="text/value"/>
    <LangSpecProperty key="socket-allow-4" value="text/text"/>
  </LangSpecProperties>
</BlockGenus>

<!-- BluetoothServer Component -->

<BlockGenus name="BluetoothServer" initlabel="BluetoothServer"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Bluetooth server component</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="5"/>
    <LangSpecProperty key="ya-event-1" value="BluetoothServer-ConnectionAccepted"/>
    <LangSpecProperty key="ya-prop-1" value="Available/read-only-property/boolean/Whether Bluetooth is available on the device"/>
    <LangSpecProperty key="ya-prop-2" value="CharacterEncoding/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-3" value="DelimiterByte/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-4" value="Enabled/read-only-property/boolean/Whether Bluetooth is enabled"/>
    <LangSpecProperty key="ya-prop-5" value="HighByteFirst/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-6" value="IsAccepting/read-only-property/boolean/"/>
    <LangSpecProperty key="ya-prop-7" value="IsConnected/read-only-property/boolean/"/>
    <LangSpecProperty key="ya-prop-8" value="Secure/read-write-property/boolean/Whether to invoke SSP (Simple Secure Pairing), which is supported on devices with Bluetooth v2.1 or higher. When working with embedded Bluetooth devices, this property may need to be set to False. For Android 2.0-2.2, this property setting will be ignored."/>
    <LangSpecProperty key="ya-method-1" value="BluetoothServer-AcceptConnection"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-BluetoothServer-AcceptConnection"/>
    <LangSpecProperty key="ya-method-2" value="BluetoothServer-AcceptConnectionWithUUID"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-BluetoothServer-AcceptConnectionWithUUID"/>
    <LangSpecProperty key="ya-method-3" value="BluetoothServer-BytesAvailableToReceive"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-BluetoothServer-BytesAvailableToReceive"/>
    <LangSpecProperty key="ya-method-4" value="BluetoothServer-Disconnect"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-BluetoothServer-Disconnect"/>
    <LangSpecProperty key="ya-method-5" value="BluetoothServer-ReceiveSigned1ByteNumber"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-BluetoothServer-ReceiveSigned1ByteNumber"/>
    <LangSpecProperty key="ya-method-6" value="BluetoothServer-ReceiveSigned2ByteNumber"/>
    <LangSpecProperty key="ya-type-method-6" value="Type-BluetoothServer-ReceiveSigned2ByteNumber"/>
    <LangSpecProperty key="ya-method-7" value="BluetoothServer-ReceiveSigned4ByteNumber"/>
    <LangSpecProperty key="ya-type-method-7" value="Type-BluetoothServer-ReceiveSigned4ByteNumber"/>
    <LangSpecProperty key="ya-method-8" value="BluetoothServer-ReceiveSignedBytes"/>
    <LangSpecProperty key="ya-type-method-8" value="Type-BluetoothServer-ReceiveSignedBytes"/>
    <LangSpecProperty key="ya-method-9" value="BluetoothServer-ReceiveText"/>
    <LangSpecProperty key="ya-type-method-9" value="Type-BluetoothServer-ReceiveText"/>
    <LangSpecProperty key="ya-method-10" value="BluetoothServer-ReceiveUnsigned1ByteNumber"/>
    <LangSpecProperty key="ya-type-method-10" value="Type-BluetoothServer-ReceiveUnsigned1ByteNumber"/>
    <LangSpecProperty key="ya-method-11" value="BluetoothServer-ReceiveUnsigned2ByteNumber"/>
    <LangSpecProperty key="ya-type-method-11" value="Type-BluetoothServer-ReceiveUnsigned2ByteNumber"/>
    <LangSpecProperty key="ya-method-12" value="BluetoothServer-ReceiveUnsigned4ByteNumber"/>
    <LangSpecProperty key="ya-type-method-12" value="Type-BluetoothServer-ReceiveUnsigned4ByteNumber"/>
    <LangSpecProperty key="ya-method-13" value="BluetoothServer-ReceiveUnsignedBytes"/>
    <LangSpecProperty key="ya-type-method-13" value="Type-BluetoothServer-ReceiveUnsignedBytes"/>
    <LangSpecProperty key="ya-method-14" value="BluetoothServer-Send1ByteNumber"/>
    <LangSpecProperty key="ya-type-method-14" value="Type-BluetoothServer-Send1ByteNumber"/>
    <LangSpecProperty key="ya-method-15" value="BluetoothServer-Send2ByteNumber"/>
    <LangSpecProperty key="ya-type-method-15" value="Type-BluetoothServer-Send2ByteNumber"/>
    <LangSpecProperty key="ya-method-16" value="BluetoothServer-Send4ByteNumber"/>
    <LangSpecProperty key="ya-type-method-16" value="Type-BluetoothServer-Send4ByteNumber"/>
    <LangSpecProperty key="ya-method-17" value="BluetoothServer-SendBytes"/>
    <LangSpecProperty key="ya-type-method-17" value="Type-BluetoothServer-SendBytes"/>
    <LangSpecProperty key="ya-method-18" value="BluetoothServer-SendText"/>
    <LangSpecProperty key="ya-type-method-18" value="Type-BluetoothServer-SendText"/>
    <LangSpecProperty key="ya-method-19" value="BluetoothServer-StopAccepting"/>
    <LangSpecProperty key="ya-type-method-19" value="Type-BluetoothServer-StopAccepting"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="BluetoothServer-BluetoothError" initlabel="BluetoothError"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>The BluetoothError event is no longer used. Please use the Screen.ErrorOccurred event instead.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="functionName" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="functionName"/>
    </BlockConnector>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="message"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="functionName/argument"/>
    <LangSpecProperty key="socket-allow-2" value="message/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothServer-ConnectionAccepted" initlabel="ConnectionAccepted"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that a bluetooth connection has been accepted.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="BluetoothServer-AcceptConnection" decorator="call" initlabel="AcceptConnection"
            kind="command" color="call">
  <description>
    <text>Accept an incoming connection with the Serial Port Profile (SPP).</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="serviceName" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="serviceName/value"/>
    <LangSpecProperty key="socket-allow-2" value="serviceName/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothServer-AcceptConnection" decorator="call" initlabel="AcceptConnection"
            kind="command" color="call">
  <description>
    <text>Accept an incoming connection with the Serial Port Profile (SPP).</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="serviceName" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="serviceName/value"/>
    <LangSpecProperty key="socket-allow-4" value="serviceName/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothServer-AcceptConnectionWithUUID" decorator="call" initlabel="AcceptConnectionWithUUID"
            kind="command" color="call">
  <description>
    <text>Accept an incoming connection with a specific UUID.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="serviceName" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="uuid" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="serviceName/value"/>
    <LangSpecProperty key="socket-allow-2" value="uuid/value"/>
    <LangSpecProperty key="socket-allow-3" value="serviceName/text"/>
    <LangSpecProperty key="socket-allow-4" value="uuid/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothServer-AcceptConnectionWithUUID" decorator="call" initlabel="AcceptConnectionWithUUID"
            kind="command" color="call">
  <description>
    <text>Accept an incoming connection with a specific UUID.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="serviceName" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="uuid" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="serviceName/value"/>
    <LangSpecProperty key="socket-allow-4" value="uuid/value"/>
    <LangSpecProperty key="socket-allow-5" value="serviceName/text"/>
    <LangSpecProperty key="socket-allow-6" value="uuid/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothServer-BytesAvailableToReceive" decorator="call" initlabel="BytesAvailableToReceive"
            kind="function" color="call">
  <description>
    <text>Returns an estimate of the number of bytes that can be received without blocking</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothServer-BytesAvailableToReceive" decorator="call" initlabel="BytesAvailableToReceive"
            kind="function" color="call">
  <description>
    <text>Returns an estimate of the number of bytes that can be received without blocking</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothServer-Disconnect" decorator="call" initlabel="Disconnect"
            kind="command" color="call">
  <description>
    <text>Disconnect from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothServer-Disconnect" decorator="call" initlabel="Disconnect"
            kind="command" color="call">
  <description>
    <text>Disconnect from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothServer-ReceiveSigned1ByteNumber" decorator="call" initlabel="ReceiveSigned1ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive a signed 1-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothServer-ReceiveSigned1ByteNumber" decorator="call" initlabel="ReceiveSigned1ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive a signed 1-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothServer-ReceiveSigned2ByteNumber" decorator="call" initlabel="ReceiveSigned2ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive a signed 2-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothServer-ReceiveSigned2ByteNumber" decorator="call" initlabel="ReceiveSigned2ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive a signed 2-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothServer-ReceiveSigned4ByteNumber" decorator="call" initlabel="ReceiveSigned4ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive a signed 4-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothServer-ReceiveSigned4ByteNumber" decorator="call" initlabel="ReceiveSigned4ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive a signed 4-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothServer-ReceiveSignedBytes" decorator="call" initlabel="ReceiveSignedBytes"
            kind="function" color="call">
  <description>
    <text>Receive multiple signed byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="numberOfBytes" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="list"/>
    <LangSpecProperty key="socket-allow-1" value="numberOfBytes/value"/>
    <LangSpecProperty key="socket-allow-2" value="numberOfBytes/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothServer-ReceiveSignedBytes" decorator="call" initlabel="ReceiveSignedBytes"
            kind="function" color="call">
  <description>
    <text>Receive multiple signed byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="numberOfBytes" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="list"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="numberOfBytes/value"/>
    <LangSpecProperty key="socket-allow-4" value="numberOfBytes/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothServer-ReceiveText" decorator="call" initlabel="ReceiveText"
            kind="function" color="call">
  <description>
    <text>Receive text from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="numberOfBytes" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="numberOfBytes/value"/>
    <LangSpecProperty key="socket-allow-2" value="numberOfBytes/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothServer-ReceiveText" decorator="call" initlabel="ReceiveText"
            kind="function" color="call">
  <description>
    <text>Receive text from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="numberOfBytes" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="numberOfBytes/value"/>
    <LangSpecProperty key="socket-allow-4" value="numberOfBytes/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothServer-ReceiveUnsigned1ByteNumber" decorator="call" initlabel="ReceiveUnsigned1ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive an unsigned 1-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothServer-ReceiveUnsigned1ByteNumber" decorator="call" initlabel="ReceiveUnsigned1ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive an unsigned 1-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothServer-ReceiveUnsigned2ByteNumber" decorator="call" initlabel="ReceiveUnsigned2ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive a unsigned 2-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothServer-ReceiveUnsigned2ByteNumber" decorator="call" initlabel="ReceiveUnsigned2ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive a unsigned 2-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothServer-ReceiveUnsigned4ByteNumber" decorator="call" initlabel="ReceiveUnsigned4ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive a unsigned 4-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothServer-ReceiveUnsigned4ByteNumber" decorator="call" initlabel="ReceiveUnsigned4ByteNumber"
            kind="function" color="call">
  <description>
    <text>Receive a unsigned 4-byte number from the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothServer-ReceiveUnsignedBytes" decorator="call" initlabel="ReceiveUnsignedBytes"
            kind="function" color="call">
  <description>
    <text>Receive multiple unsigned byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="numberOfBytes" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="list"/>
    <LangSpecProperty key="socket-allow-1" value="numberOfBytes/value"/>
    <LangSpecProperty key="socket-allow-2" value="numberOfBytes/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothServer-ReceiveUnsignedBytes" decorator="call" initlabel="ReceiveUnsignedBytes"
            kind="function" color="call">
  <description>
    <text>Receive multiple unsigned byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="numberOfBytes" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="list"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="numberOfBytes/value"/>
    <LangSpecProperty key="socket-allow-4" value="numberOfBytes/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothServer-Send1ByteNumber" decorator="call" initlabel="Send1ByteNumber"
            kind="command" color="call">
  <description>
    <text>Send a 1-byte number to the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="number" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="number/value"/>
    <LangSpecProperty key="socket-allow-2" value="number/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothServer-Send1ByteNumber" decorator="call" initlabel="Send1ByteNumber"
            kind="command" color="call">
  <description>
    <text>Send a 1-byte number to the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="number" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="number/value"/>
    <LangSpecProperty key="socket-allow-4" value="number/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothServer-Send2ByteNumber" decorator="call" initlabel="Send2ByteNumber"
            kind="command" color="call">
  <description>
    <text>Send a 2-byte number to the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="number" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="number/value"/>
    <LangSpecProperty key="socket-allow-2" value="number/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothServer-Send2ByteNumber" decorator="call" initlabel="Send2ByteNumber"
            kind="command" color="call">
  <description>
    <text>Send a 2-byte number to the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="number" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="number/value"/>
    <LangSpecProperty key="socket-allow-4" value="number/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothServer-Send4ByteNumber" decorator="call" initlabel="Send4ByteNumber"
            kind="command" color="call">
  <description>
    <text>Send a 4-byte number to the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="number" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="number/value"/>
    <LangSpecProperty key="socket-allow-2" value="number/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothServer-Send4ByteNumber" decorator="call" initlabel="Send4ByteNumber"
            kind="command" color="call">
  <description>
    <text>Send a 4-byte number to the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="number" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="number/value"/>
    <LangSpecProperty key="socket-allow-4" value="number/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothServer-SendBytes" decorator="call" initlabel="SendBytes"
            kind="command" color="call">
  <description>
    <text>Send a list of byte values to the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="list/value"/>
    <LangSpecProperty key="socket-allow-2" value="list/list"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothServer-SendBytes" decorator="call" initlabel="SendBytes"
            kind="command" color="call">
  <description>
    <text>Send a list of byte values to the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="list/value"/>
    <LangSpecProperty key="socket-allow-4" value="list/list"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothServer-SendText" decorator="call" initlabel="SendText"
            kind="command" color="call">
  <description>
    <text>Send text to the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="text/value"/>
    <LangSpecProperty key="socket-allow-2" value="text/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothServer-SendText" decorator="call" initlabel="SendText"
            kind="command" color="call">
  <description>
    <text>Send text to the connected Bluetooth device.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="text/value"/>
    <LangSpecProperty key="socket-allow-4" value="text/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="BluetoothServer-StopAccepting" decorator="call" initlabel="StopAccepting"
            kind="command" color="call">
  <description>
    <text>Stop accepting an incoming connection.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-BluetoothServer-StopAccepting" decorator="call" initlabel="StopAccepting"
            kind="command" color="call">
  <description>
    <text>Stop accepting an incoming connection.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Button Component -->

<BlockGenus name="Button" initlabel="Button"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Button with the ability to detect clicks. Many aspects of its appearance can be changed, as well as whether it is clickable (Enabled), can be changed in the Designer or in the Blocks Editor.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="5"/>
    <LangSpecProperty key="ya-event-1" value="Button-Click"/>
    <LangSpecProperty key="ya-event-2" value="Button-GotFocus"/>
    <LangSpecProperty key="ya-event-3" value="Button-LongClick"/>
    <LangSpecProperty key="ya-event-4" value="Button-LostFocus"/>
    <LangSpecProperty key="ya-prop-1" value="BackgroundColor/read-write-property/number/Returns the button&apos;s background color"/>
    <LangSpecProperty key="ya-prop-2" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-3" value="Enabled/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-4" value="FontBold/invisible-property/boolean/"/>
    <LangSpecProperty key="ya-prop-5" value="FontItalic/invisible-property/boolean/"/>
    <LangSpecProperty key="ya-prop-6" value="FontSize/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-7" value="FontTypeface/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-8" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-9" value="Image/read-write-property/text/Specifies the path of the button&apos;s image. If there is both an Image and a BackgroundColor, only the Image will be visible."/>
    <LangSpecProperty key="ya-prop-10" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-11" value="Shape/invisible-property/number/Specifies the button&apos;s shape (default, rounded, rectangular, oval). The shape will not be visible if an Image is being displayed."/>
    <LangSpecProperty key="ya-prop-12" value="ShowFeedback/read-write-property/boolean/Specifies if a visual feedback should be shown for a button that as an image as background."/>
    <LangSpecProperty key="ya-prop-13" value="Text/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-14" value="TextAlignment/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-15" value="TextColor/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-16" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-17" value="Width/read-write-property/number/"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Button-Click" initlabel="Click"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates a user has clicked on the button.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Button-GotFocus" initlabel="GotFocus"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates the cursor moved over the button so it is now possible to click it.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Button-LongClick" initlabel="LongClick"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates a user has long clicked on the button.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Button-LostFocus" initlabel="LostFocus"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates the cursor moved away from the button so it is now no longer possible to click it.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Camcorder Component -->

<BlockGenus name="Camcorder" initlabel="Camcorder"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A component to record a video using the device&apos;s camcorder.After the video is recorded, the name of the file on the phone containing the clip is available as an argument to the AfterRecording event. The file name can be used, for example, to set the source property of a VideoPlayer component.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-event-1" value="Camcorder-AfterRecording"/>
    <LangSpecProperty key="ya-method-1" value="Camcorder-RecordVideo"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-Camcorder-RecordVideo"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Camcorder-AfterRecording" initlabel="AfterRecording"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that a video was recorded with the camera and provides the path to the stored picture.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="clip" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="clip"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="clip/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="Camcorder-RecordVideo" decorator="call" initlabel="RecordVideo"
            kind="command" color="call">
  <description>
    <text>Records a video, then raises the AfterRecoding event.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Camcorder-RecordVideo" decorator="call" initlabel="RecordVideo"
            kind="command" color="call">
  <description>
    <text>Records a video, then raises the AfterRecoding event.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Camera Component -->

<BlockGenus name="Camera" initlabel="Camera"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A component to take a picture using the device&apos;s camera. After the picture is taken, the name of the file on the phone containing the picture is available as an argument to the AfterPicture event. The file name can be used, for example, to set the Picture property of an Image component.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-event-1" value="Camera-AfterPicture"/>
    <LangSpecProperty key="ya-method-1" value="Camera-TakePicture"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-Camera-TakePicture"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Camera-AfterPicture" initlabel="AfterPicture"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that a photo was taken with the camera and provides the path to the stored picture.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="image" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="image"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="image/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="Camera-TakePicture" decorator="call" initlabel="TakePicture"
            kind="command" color="call">
  <description>
    <text>Takes a picture, then raises the AfterPicture event.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Camera-TakePicture" decorator="call" initlabel="TakePicture"
            kind="command" color="call">
  <description>
    <text>Takes a picture, then raises the AfterPicture event.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Canvas Component -->

<BlockGenus name="Canvas" initlabel="Canvas"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A two-dimensional touch-sensitive rectangular panel on which drawing can be done and sprites can be moved. The BackgroundColor, PaintColor, BackgroundImage, Width, and Height of the Canvas can be set in either the Designer or in the Blocks Editor. The Width and Height are measured in pixels and must be positive. Any location on the Canvas can be specified as a pair of (X, Y) values, where - X is the number of pixels away from the left edge of the Canvas - Y is the number of pixels away from the top edge of the Canvas. There are events to tell when and where a Canvas has been touched or a Sprite (ImageSprite or Ball) has been dragged. There are also methods for drawing points, lines, and circles.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="7"/>
    <LangSpecProperty key="ya-event-1" value="Canvas-Dragged"/>
    <LangSpecProperty key="ya-event-2" value="Canvas-Flung"/>
    <LangSpecProperty key="ya-event-3" value="Canvas-TouchDown"/>
    <LangSpecProperty key="ya-event-4" value="Canvas-TouchUp"/>
    <LangSpecProperty key="ya-event-5" value="Canvas-Touched"/>
    <LangSpecProperty key="ya-prop-1" value="BackgroundColor/read-write-property/number/The color of the canvas background."/>
    <LangSpecProperty key="ya-prop-2" value="BackgroundImage/read-write-property/text/The name of a file containing the background image for the canvas"/>
    <LangSpecProperty key="ya-prop-3" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-4" value="FontSize/read-write-property/number/The font size of text drawn on the canvas."/>
    <LangSpecProperty key="ya-prop-5" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-6" value="LineWidth/read-write-property/number/The width of lines drawn on the canvas."/>
    <LangSpecProperty key="ya-prop-7" value="PaintColor/read-write-property/number/The color in which lines are drawn"/>
    <LangSpecProperty key="ya-prop-8" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-9" value="TextAlignment/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-10" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-11" value="Width/read-write-property/number/"/>
    <LangSpecProperty key="ya-method-1" value="Canvas-Clear"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-Canvas-Clear"/>
    <LangSpecProperty key="ya-method-2" value="Canvas-DrawCircle"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-Canvas-DrawCircle"/>
    <LangSpecProperty key="ya-method-3" value="Canvas-DrawLine"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-Canvas-DrawLine"/>
    <LangSpecProperty key="ya-method-4" value="Canvas-DrawPoint"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-Canvas-DrawPoint"/>
    <LangSpecProperty key="ya-method-5" value="Canvas-DrawText"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-Canvas-DrawText"/>
    <LangSpecProperty key="ya-method-6" value="Canvas-DrawTextAtAngle"/>
    <LangSpecProperty key="ya-type-method-6" value="Type-Canvas-DrawTextAtAngle"/>
    <LangSpecProperty key="ya-method-7" value="Canvas-GetBackgroundPixelColor"/>
    <LangSpecProperty key="ya-type-method-7" value="Type-Canvas-GetBackgroundPixelColor"/>
    <LangSpecProperty key="ya-method-8" value="Canvas-GetPixelColor"/>
    <LangSpecProperty key="ya-type-method-8" value="Type-Canvas-GetPixelColor"/>
    <LangSpecProperty key="ya-method-9" value="Canvas-Save"/>
    <LangSpecProperty key="ya-type-method-9" value="Type-Canvas-Save"/>
    <LangSpecProperty key="ya-method-10" value="Canvas-SaveAs"/>
    <LangSpecProperty key="ya-type-method-10" value="Type-Canvas-SaveAs"/>
    <LangSpecProperty key="ya-method-11" value="Canvas-SetBackgroundPixelColor"/>
    <LangSpecProperty key="ya-type-method-11" value="Type-Canvas-SetBackgroundPixelColor"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Canvas-Dragged" initlabel="Dragged"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>When the user does a drag from one point (prevX, prevY) to another (x, y). The pair (startX, startY) indicates where the user first touched the screen, and &quot;draggedSprite&quot; indicates whether a sprite is being dragged.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="startX" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="startX"/>
    </BlockConnector>
    <BlockConnector label="startY" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="startY"/>
    </BlockConnector>
    <BlockConnector label="prevX" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="prevX"/>
    </BlockConnector>
    <BlockConnector label="prevY" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="prevY"/>
    </BlockConnector>
    <BlockConnector label="currentX" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="currentX"/>
    </BlockConnector>
    <BlockConnector label="currentY" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="currentY"/>
    </BlockConnector>
    <BlockConnector label="draggedSprite" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="draggedSprite"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="startX/argument"/>
    <LangSpecProperty key="socket-allow-2" value="startY/argument"/>
    <LangSpecProperty key="socket-allow-3" value="prevX/argument"/>
    <LangSpecProperty key="socket-allow-4" value="prevY/argument"/>
    <LangSpecProperty key="socket-allow-5" value="currentX/argument"/>
    <LangSpecProperty key="socket-allow-6" value="currentY/argument"/>
    <LangSpecProperty key="socket-allow-7" value="draggedSprite/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-Flung" initlabel="Flung"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>When a fling gesture (quick swipe) is made on the canvas: provides the (x,y) position of the start of the fling, relative to the upper left of the canvas. Also provides the speed (pixels per millisecond) and heading (0-360 degrees) of the fling, as well as the x velocity and y velocity components of the fling&apos;s vector. The value &quot;flungSprite&quot; is true if a sprite was located near the the starting point of the fling gesture.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="x"/>
    </BlockConnector>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="y"/>
    </BlockConnector>
    <BlockConnector label="speed" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="speed"/>
    </BlockConnector>
    <BlockConnector label="heading" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="heading"/>
    </BlockConnector>
    <BlockConnector label="xvel" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="xvel"/>
    </BlockConnector>
    <BlockConnector label="yvel" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="yvel"/>
    </BlockConnector>
    <BlockConnector label="flungSprite" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="flungSprite"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="x/argument"/>
    <LangSpecProperty key="socket-allow-2" value="y/argument"/>
    <LangSpecProperty key="socket-allow-3" value="speed/argument"/>
    <LangSpecProperty key="socket-allow-4" value="heading/argument"/>
    <LangSpecProperty key="socket-allow-5" value="xvel/argument"/>
    <LangSpecProperty key="socket-allow-6" value="yvel/argument"/>
    <LangSpecProperty key="socket-allow-7" value="flungSprite/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-TouchDown" initlabel="TouchDown"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>When the user begins touching the canvas (places finger on canvas and leaves it there): provides the (x,y) position of the touch, relative to the upper left of the canvas</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="x"/>
    </BlockConnector>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="y"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="x/argument"/>
    <LangSpecProperty key="socket-allow-2" value="y/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-TouchUp" initlabel="TouchUp"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>When the user stops touching the canvas (lifts finger after a TouchDown event): provides the (x,y) position of the touch, relative to the upper left of the canvas</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="x"/>
    </BlockConnector>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="y"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="x/argument"/>
    <LangSpecProperty key="socket-allow-2" value="y/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-Touched" initlabel="Touched"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>When the user touches the canvas and then immediately lifts finger: provides the (x,y) position of the touch, relative to the upper left of the canvas. TouchedSprite is true if the same touch also touched a sprite, and false otherwise.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="x"/>
    </BlockConnector>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="y"/>
    </BlockConnector>
    <BlockConnector label="touchedSprite" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="touchedSprite"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="x/argument"/>
    <LangSpecProperty key="socket-allow-2" value="y/argument"/>
    <LangSpecProperty key="socket-allow-3" value="touchedSprite/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="Canvas-Clear" decorator="call" initlabel="Clear"
            kind="command" color="call">
  <description>
    <text>Clears anything drawn on this Canvas but not any background color or image.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-Clear" decorator="call" initlabel="Clear"
            kind="command" color="call">
  <description>
    <text>Clears anything drawn on this Canvas but not any background color or image.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-DrawCircle" decorator="call" initlabel="DrawCircle"
            kind="command" color="call">
  <description>
    <text>Draws a circle (filled in) at the given coordinates on the canvas, with the given radius.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="r" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="x/value"/>
    <LangSpecProperty key="socket-allow-2" value="y/value"/>
    <LangSpecProperty key="socket-allow-3" value="r/value"/>
    <LangSpecProperty key="socket-allow-4" value="x/number"/>
    <LangSpecProperty key="socket-allow-5" value="y/number"/>
    <LangSpecProperty key="socket-allow-6" value="r/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-DrawCircle" decorator="call" initlabel="DrawCircle"
            kind="command" color="call">
  <description>
    <text>Draws a circle (filled in) at the given coordinates on the canvas, with the given radius.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="r" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="x/value"/>
    <LangSpecProperty key="socket-allow-4" value="y/value"/>
    <LangSpecProperty key="socket-allow-5" value="r/value"/>
    <LangSpecProperty key="socket-allow-6" value="x/number"/>
    <LangSpecProperty key="socket-allow-7" value="y/number"/>
    <LangSpecProperty key="socket-allow-8" value="r/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-DrawLine" decorator="call" initlabel="DrawLine"
            kind="command" color="call">
  <description>
    <text>Draws a line between the given coordinates on the canvas.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x1" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y1" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x2" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y2" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="x1/value"/>
    <LangSpecProperty key="socket-allow-2" value="y1/value"/>
    <LangSpecProperty key="socket-allow-3" value="x2/value"/>
    <LangSpecProperty key="socket-allow-4" value="y2/value"/>
    <LangSpecProperty key="socket-allow-5" value="x1/number"/>
    <LangSpecProperty key="socket-allow-6" value="y1/number"/>
    <LangSpecProperty key="socket-allow-7" value="x2/number"/>
    <LangSpecProperty key="socket-allow-8" value="y2/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-DrawLine" decorator="call" initlabel="DrawLine"
            kind="command" color="call">
  <description>
    <text>Draws a line between the given coordinates on the canvas.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x1" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y1" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x2" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y2" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="x1/value"/>
    <LangSpecProperty key="socket-allow-4" value="y1/value"/>
    <LangSpecProperty key="socket-allow-5" value="x2/value"/>
    <LangSpecProperty key="socket-allow-6" value="y2/value"/>
    <LangSpecProperty key="socket-allow-7" value="x1/number"/>
    <LangSpecProperty key="socket-allow-8" value="y1/number"/>
    <LangSpecProperty key="socket-allow-9" value="x2/number"/>
    <LangSpecProperty key="socket-allow-10" value="y2/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-DrawPoint" decorator="call" initlabel="DrawPoint"
            kind="command" color="call">
  <description>
    <text>Draws a point at the given coordinates on the canvas.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="x/value"/>
    <LangSpecProperty key="socket-allow-2" value="y/value"/>
    <LangSpecProperty key="socket-allow-3" value="x/number"/>
    <LangSpecProperty key="socket-allow-4" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-DrawPoint" decorator="call" initlabel="DrawPoint"
            kind="command" color="call">
  <description>
    <text>Draws a point at the given coordinates on the canvas.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="x/value"/>
    <LangSpecProperty key="socket-allow-4" value="y/value"/>
    <LangSpecProperty key="socket-allow-5" value="x/number"/>
    <LangSpecProperty key="socket-allow-6" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-DrawText" decorator="call" initlabel="DrawText"
            kind="command" color="call">
  <description>
    <text>Draws the specified text relative to the specified coordinates using the values of the FontSize and TextAlignment properties.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="text/value"/>
    <LangSpecProperty key="socket-allow-2" value="x/value"/>
    <LangSpecProperty key="socket-allow-3" value="y/value"/>
    <LangSpecProperty key="socket-allow-4" value="text/text"/>
    <LangSpecProperty key="socket-allow-5" value="x/number"/>
    <LangSpecProperty key="socket-allow-6" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-DrawText" decorator="call" initlabel="DrawText"
            kind="command" color="call">
  <description>
    <text>Draws the specified text relative to the specified coordinates using the values of the FontSize and TextAlignment properties.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="text/value"/>
    <LangSpecProperty key="socket-allow-4" value="x/value"/>
    <LangSpecProperty key="socket-allow-5" value="y/value"/>
    <LangSpecProperty key="socket-allow-6" value="text/text"/>
    <LangSpecProperty key="socket-allow-7" value="x/number"/>
    <LangSpecProperty key="socket-allow-8" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-DrawTextAtAngle" decorator="call" initlabel="DrawTextAtAngle"
            kind="command" color="call">
  <description>
    <text>Draws the specified text starting at the specified coordinates at the specified angle using the values of the FontSize and TextAlignment properties.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="angle" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="text/value"/>
    <LangSpecProperty key="socket-allow-2" value="x/value"/>
    <LangSpecProperty key="socket-allow-3" value="y/value"/>
    <LangSpecProperty key="socket-allow-4" value="angle/value"/>
    <LangSpecProperty key="socket-allow-5" value="text/text"/>
    <LangSpecProperty key="socket-allow-6" value="x/number"/>
    <LangSpecProperty key="socket-allow-7" value="y/number"/>
    <LangSpecProperty key="socket-allow-8" value="angle/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-DrawTextAtAngle" decorator="call" initlabel="DrawTextAtAngle"
            kind="command" color="call">
  <description>
    <text>Draws the specified text starting at the specified coordinates at the specified angle using the values of the FontSize and TextAlignment properties.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="angle" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="text/value"/>
    <LangSpecProperty key="socket-allow-4" value="x/value"/>
    <LangSpecProperty key="socket-allow-5" value="y/value"/>
    <LangSpecProperty key="socket-allow-6" value="angle/value"/>
    <LangSpecProperty key="socket-allow-7" value="text/text"/>
    <LangSpecProperty key="socket-allow-8" value="x/number"/>
    <LangSpecProperty key="socket-allow-9" value="y/number"/>
    <LangSpecProperty key="socket-allow-10" value="angle/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-GetBackgroundPixelColor" decorator="call" initlabel="GetBackgroundPixelColor"
            kind="function" color="call">
  <description>
    <text>Gets the color of the specified point. This includes the background and any drawn points, lines, or circles but not sprites.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="x/value"/>
    <LangSpecProperty key="socket-allow-2" value="y/value"/>
    <LangSpecProperty key="socket-allow-3" value="x/number"/>
    <LangSpecProperty key="socket-allow-4" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-GetBackgroundPixelColor" decorator="call" initlabel="GetBackgroundPixelColor"
            kind="function" color="call">
  <description>
    <text>Gets the color of the specified point. This includes the background and any drawn points, lines, or circles but not sprites.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="x/value"/>
    <LangSpecProperty key="socket-allow-4" value="y/value"/>
    <LangSpecProperty key="socket-allow-5" value="x/number"/>
    <LangSpecProperty key="socket-allow-6" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-GetPixelColor" decorator="call" initlabel="GetPixelColor"
            kind="function" color="call">
  <description>
    <text>Gets the color of the specified point.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="x/value"/>
    <LangSpecProperty key="socket-allow-2" value="y/value"/>
    <LangSpecProperty key="socket-allow-3" value="x/number"/>
    <LangSpecProperty key="socket-allow-4" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-GetPixelColor" decorator="call" initlabel="GetPixelColor"
            kind="function" color="call">
  <description>
    <text>Gets the color of the specified point.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="x/value"/>
    <LangSpecProperty key="socket-allow-4" value="y/value"/>
    <LangSpecProperty key="socket-allow-5" value="x/number"/>
    <LangSpecProperty key="socket-allow-6" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-Save" decorator="call" initlabel="Save"
            kind="function" color="call">
  <description>
    <text>Saves a picture of this Canvas to the device&apos;s external storage. If an error occurs, the Screen&apos;s ErrorOccurred event will be called.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-Save" decorator="call" initlabel="Save"
            kind="function" color="call">
  <description>
    <text>Saves a picture of this Canvas to the device&apos;s external storage. If an error occurs, the Screen&apos;s ErrorOccurred event will be called.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-SaveAs" decorator="call" initlabel="SaveAs"
            kind="function" color="call">
  <description>
    <text>Saves a picture of this Canvas to the device&apos;s external storage in the file named fileName. fileName must end with one of .jpg, .jpeg, or .png, which determines the file type.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="fileName" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="fileName/value"/>
    <LangSpecProperty key="socket-allow-2" value="fileName/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-SaveAs" decorator="call" initlabel="SaveAs"
            kind="function" color="call">
  <description>
    <text>Saves a picture of this Canvas to the device&apos;s external storage in the file named fileName. fileName must end with one of .jpg, .jpeg, or .png, which determines the file type.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="fileName" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="fileName/value"/>
    <LangSpecProperty key="socket-allow-4" value="fileName/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Canvas-SetBackgroundPixelColor" decorator="call" initlabel="SetBackgroundPixelColor"
            kind="command" color="call">
  <description>
    <text>Sets the color of the specified point. This differs from DrawPoint by having an argument for color.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="color" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="x/value"/>
    <LangSpecProperty key="socket-allow-2" value="y/value"/>
    <LangSpecProperty key="socket-allow-3" value="color/value"/>
    <LangSpecProperty key="socket-allow-4" value="x/number"/>
    <LangSpecProperty key="socket-allow-5" value="y/number"/>
    <LangSpecProperty key="socket-allow-6" value="color/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Canvas-SetBackgroundPixelColor" decorator="call" initlabel="SetBackgroundPixelColor"
            kind="command" color="call">
  <description>
    <text>Sets the color of the specified point. This differs from DrawPoint by having an argument for color.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="color" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="x/value"/>
    <LangSpecProperty key="socket-allow-4" value="y/value"/>
    <LangSpecProperty key="socket-allow-5" value="color/value"/>
    <LangSpecProperty key="socket-allow-6" value="x/number"/>
    <LangSpecProperty key="socket-allow-7" value="y/number"/>
    <LangSpecProperty key="socket-allow-8" value="color/number"/>
  </LangSpecProperties>
</BlockGenus>

<!-- CheckBox Component -->

<BlockGenus name="CheckBox" initlabel="CheckBox"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Checkbox that raises an event when the user clicks on it. There are many properties affecting its appearance that can be set in the Designer or Blocks Editor.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="2"/>
    <LangSpecProperty key="ya-event-1" value="CheckBox-Changed"/>
    <LangSpecProperty key="ya-event-2" value="CheckBox-GotFocus"/>
    <LangSpecProperty key="ya-event-3" value="CheckBox-LostFocus"/>
    <LangSpecProperty key="ya-prop-1" value="BackgroundColor/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-2" value="Checked/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-3" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-4" value="Enabled/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-5" value="FontBold/invisible-property/boolean/"/>
    <LangSpecProperty key="ya-prop-6" value="FontItalic/invisible-property/boolean/"/>
    <LangSpecProperty key="ya-prop-7" value="FontSize/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-8" value="FontTypeface/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-9" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-10" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-11" value="Text/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-12" value="TextColor/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-13" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-14" value="Width/read-write-property/number/"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="CheckBox-Changed" initlabel="Changed"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Default Changed event handler.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="CheckBox-GotFocus" initlabel="GotFocus"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Default GotFocus event handler.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="CheckBox-LostFocus" initlabel="LostFocus"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Default LostFocus event handler.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Clock Component -->

<BlockGenus name="Clock" initlabel="Clock"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Non-visible component that provides the phone&apos;s clock, a timer, and time calculations.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-event-1" value="Clock-Timer"/>
    <LangSpecProperty key="ya-prop-1" value="TimerAlwaysFires/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-2" value="TimerEnabled/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-3" value="TimerInterval/read-write-property/number/"/>
    <LangSpecProperty key="ya-method-1" value="Clock-AddDays"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-Clock-AddDays"/>
    <LangSpecProperty key="ya-method-2" value="Clock-AddHours"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-Clock-AddHours"/>
    <LangSpecProperty key="ya-method-3" value="Clock-AddMinutes"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-Clock-AddMinutes"/>
    <LangSpecProperty key="ya-method-4" value="Clock-AddMonths"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-Clock-AddMonths"/>
    <LangSpecProperty key="ya-method-5" value="Clock-AddSeconds"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-Clock-AddSeconds"/>
    <LangSpecProperty key="ya-method-6" value="Clock-AddWeeks"/>
    <LangSpecProperty key="ya-type-method-6" value="Type-Clock-AddWeeks"/>
    <LangSpecProperty key="ya-method-7" value="Clock-AddYears"/>
    <LangSpecProperty key="ya-type-method-7" value="Type-Clock-AddYears"/>
    <LangSpecProperty key="ya-method-8" value="Clock-DayOfMonth"/>
    <LangSpecProperty key="ya-type-method-8" value="Type-Clock-DayOfMonth"/>
    <LangSpecProperty key="ya-method-9" value="Clock-Duration"/>
    <LangSpecProperty key="ya-type-method-9" value="Type-Clock-Duration"/>
    <LangSpecProperty key="ya-method-10" value="Clock-FormatDate"/>
    <LangSpecProperty key="ya-type-method-10" value="Type-Clock-FormatDate"/>
    <LangSpecProperty key="ya-method-11" value="Clock-FormatDateTime"/>
    <LangSpecProperty key="ya-type-method-11" value="Type-Clock-FormatDateTime"/>
    <LangSpecProperty key="ya-method-12" value="Clock-FormatTime"/>
    <LangSpecProperty key="ya-type-method-12" value="Type-Clock-FormatTime"/>
    <LangSpecProperty key="ya-method-13" value="Clock-GetMillis"/>
    <LangSpecProperty key="ya-type-method-13" value="Type-Clock-GetMillis"/>
    <LangSpecProperty key="ya-method-14" value="Clock-Hour"/>
    <LangSpecProperty key="ya-type-method-14" value="Type-Clock-Hour"/>
    <LangSpecProperty key="ya-method-15" value="Clock-MakeInstant"/>
    <LangSpecProperty key="ya-type-method-15" value="Type-Clock-MakeInstant"/>
    <LangSpecProperty key="ya-method-16" value="Clock-MakeInstantFromMillis"/>
    <LangSpecProperty key="ya-type-method-16" value="Type-Clock-MakeInstantFromMillis"/>
    <LangSpecProperty key="ya-method-17" value="Clock-Minute"/>
    <LangSpecProperty key="ya-type-method-17" value="Type-Clock-Minute"/>
    <LangSpecProperty key="ya-method-18" value="Clock-Month"/>
    <LangSpecProperty key="ya-type-method-18" value="Type-Clock-Month"/>
    <LangSpecProperty key="ya-method-19" value="Clock-MonthName"/>
    <LangSpecProperty key="ya-type-method-19" value="Type-Clock-MonthName"/>
    <LangSpecProperty key="ya-method-20" value="Clock-Now"/>
    <LangSpecProperty key="ya-type-method-20" value="Type-Clock-Now"/>
    <LangSpecProperty key="ya-method-21" value="Clock-Second"/>
    <LangSpecProperty key="ya-type-method-21" value="Type-Clock-Second"/>
    <LangSpecProperty key="ya-method-22" value="Clock-SystemTime"/>
    <LangSpecProperty key="ya-type-method-22" value="Type-Clock-SystemTime"/>
    <LangSpecProperty key="ya-method-23" value="Clock-Weekday"/>
    <LangSpecProperty key="ya-type-method-23" value="Type-Clock-Weekday"/>
    <LangSpecProperty key="ya-method-24" value="Clock-WeekdayName"/>
    <LangSpecProperty key="ya-type-method-24" value="Type-Clock-WeekdayName"/>
    <LangSpecProperty key="ya-method-25" value="Clock-Year"/>
    <LangSpecProperty key="ya-type-method-25" value="Type-Clock-Year"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Clock-Timer" initlabel="Timer"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Timer has gone off.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="Clock-AddDays" decorator="call" initlabel="AddDays"
            kind="function" color="call">
  <description>
    <text>An instant in time some days after the argument</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="days" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="InstantInTime"/>
    <LangSpecProperty key="socket-allow-1" value="instant/value"/>
    <LangSpecProperty key="socket-allow-2" value="days/value"/>
    <LangSpecProperty key="socket-allow-3" value="instant/InstantInTime"/>
    <LangSpecProperty key="socket-allow-4" value="days/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-AddDays" decorator="call" initlabel="AddDays"
            kind="function" color="call">
  <description>
    <text>An instant in time some days after the argument</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="days" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="InstantInTime"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instant/value"/>
    <LangSpecProperty key="socket-allow-4" value="days/value"/>
    <LangSpecProperty key="socket-allow-5" value="instant/InstantInTime"/>
    <LangSpecProperty key="socket-allow-6" value="days/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-AddHours" decorator="call" initlabel="AddHours"
            kind="function" color="call">
  <description>
    <text>An instant in time some hours after the argument</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="hours" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="InstantInTime"/>
    <LangSpecProperty key="socket-allow-1" value="instant/value"/>
    <LangSpecProperty key="socket-allow-2" value="hours/value"/>
    <LangSpecProperty key="socket-allow-3" value="instant/InstantInTime"/>
    <LangSpecProperty key="socket-allow-4" value="hours/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-AddHours" decorator="call" initlabel="AddHours"
            kind="function" color="call">
  <description>
    <text>An instant in time some hours after the argument</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="hours" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="InstantInTime"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instant/value"/>
    <LangSpecProperty key="socket-allow-4" value="hours/value"/>
    <LangSpecProperty key="socket-allow-5" value="instant/InstantInTime"/>
    <LangSpecProperty key="socket-allow-6" value="hours/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-AddMinutes" decorator="call" initlabel="AddMinutes"
            kind="function" color="call">
  <description>
    <text>An instant in time some minutes after the argument</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="minutes" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="InstantInTime"/>
    <LangSpecProperty key="socket-allow-1" value="instant/value"/>
    <LangSpecProperty key="socket-allow-2" value="minutes/value"/>
    <LangSpecProperty key="socket-allow-3" value="instant/InstantInTime"/>
    <LangSpecProperty key="socket-allow-4" value="minutes/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-AddMinutes" decorator="call" initlabel="AddMinutes"
            kind="function" color="call">
  <description>
    <text>An instant in time some minutes after the argument</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="minutes" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="InstantInTime"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instant/value"/>
    <LangSpecProperty key="socket-allow-4" value="minutes/value"/>
    <LangSpecProperty key="socket-allow-5" value="instant/InstantInTime"/>
    <LangSpecProperty key="socket-allow-6" value="minutes/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-AddMonths" decorator="call" initlabel="AddMonths"
            kind="function" color="call">
  <description>
    <text>An instant in time some months after the argument</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="months" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="InstantInTime"/>
    <LangSpecProperty key="socket-allow-1" value="instant/value"/>
    <LangSpecProperty key="socket-allow-2" value="months/value"/>
    <LangSpecProperty key="socket-allow-3" value="instant/InstantInTime"/>
    <LangSpecProperty key="socket-allow-4" value="months/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-AddMonths" decorator="call" initlabel="AddMonths"
            kind="function" color="call">
  <description>
    <text>An instant in time some months after the argument</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="months" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="InstantInTime"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instant/value"/>
    <LangSpecProperty key="socket-allow-4" value="months/value"/>
    <LangSpecProperty key="socket-allow-5" value="instant/InstantInTime"/>
    <LangSpecProperty key="socket-allow-6" value="months/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-AddSeconds" decorator="call" initlabel="AddSeconds"
            kind="function" color="call">
  <description>
    <text>An instant in time some seconds after the argument</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="seconds" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="InstantInTime"/>
    <LangSpecProperty key="socket-allow-1" value="instant/value"/>
    <LangSpecProperty key="socket-allow-2" value="seconds/value"/>
    <LangSpecProperty key="socket-allow-3" value="instant/InstantInTime"/>
    <LangSpecProperty key="socket-allow-4" value="seconds/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-AddSeconds" decorator="call" initlabel="AddSeconds"
            kind="function" color="call">
  <description>
    <text>An instant in time some seconds after the argument</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="seconds" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="InstantInTime"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instant/value"/>
    <LangSpecProperty key="socket-allow-4" value="seconds/value"/>
    <LangSpecProperty key="socket-allow-5" value="instant/InstantInTime"/>
    <LangSpecProperty key="socket-allow-6" value="seconds/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-AddWeeks" decorator="call" initlabel="AddWeeks"
            kind="function" color="call">
  <description>
    <text>An instant in time some weeks after the argument</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="weeks" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="InstantInTime"/>
    <LangSpecProperty key="socket-allow-1" value="instant/value"/>
    <LangSpecProperty key="socket-allow-2" value="weeks/value"/>
    <LangSpecProperty key="socket-allow-3" value="instant/InstantInTime"/>
    <LangSpecProperty key="socket-allow-4" value="weeks/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-AddWeeks" decorator="call" initlabel="AddWeeks"
            kind="function" color="call">
  <description>
    <text>An instant in time some weeks after the argument</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="weeks" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="InstantInTime"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instant/value"/>
    <LangSpecProperty key="socket-allow-4" value="weeks/value"/>
    <LangSpecProperty key="socket-allow-5" value="instant/InstantInTime"/>
    <LangSpecProperty key="socket-allow-6" value="weeks/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-AddYears" decorator="call" initlabel="AddYears"
            kind="function" color="call">
  <description>
    <text>An instant in time some years after the argument</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="years" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="InstantInTime"/>
    <LangSpecProperty key="socket-allow-1" value="instant/value"/>
    <LangSpecProperty key="socket-allow-2" value="years/value"/>
    <LangSpecProperty key="socket-allow-3" value="instant/InstantInTime"/>
    <LangSpecProperty key="socket-allow-4" value="years/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-AddYears" decorator="call" initlabel="AddYears"
            kind="function" color="call">
  <description>
    <text>An instant in time some years after the argument</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="years" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="InstantInTime"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instant/value"/>
    <LangSpecProperty key="socket-allow-4" value="years/value"/>
    <LangSpecProperty key="socket-allow-5" value="instant/InstantInTime"/>
    <LangSpecProperty key="socket-allow-6" value="years/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-DayOfMonth" decorator="call" initlabel="DayOfMonth"
            kind="function" color="call">
  <description>
    <text>The day of the month</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="instant/value"/>
    <LangSpecProperty key="socket-allow-2" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-DayOfMonth" decorator="call" initlabel="DayOfMonth"
            kind="function" color="call">
  <description>
    <text>The day of the month</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instant/value"/>
    <LangSpecProperty key="socket-allow-4" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-Duration" decorator="call" initlabel="Duration"
            kind="function" color="call">
  <description>
    <text>Milliseconds between instants</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="start" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="end" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="start/value"/>
    <LangSpecProperty key="socket-allow-2" value="end/value"/>
    <LangSpecProperty key="socket-allow-3" value="start/InstantInTime"/>
    <LangSpecProperty key="socket-allow-4" value="end/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-Duration" decorator="call" initlabel="Duration"
            kind="function" color="call">
  <description>
    <text>Milliseconds between instants</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="start" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="end" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="start/value"/>
    <LangSpecProperty key="socket-allow-4" value="end/value"/>
    <LangSpecProperty key="socket-allow-5" value="start/InstantInTime"/>
    <LangSpecProperty key="socket-allow-6" value="end/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-FormatDate" decorator="call" initlabel="FormatDate"
            kind="function" color="call">
  <description>
    <text>Text describing the date of an instant</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="instant/value"/>
    <LangSpecProperty key="socket-allow-2" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-FormatDate" decorator="call" initlabel="FormatDate"
            kind="function" color="call">
  <description>
    <text>Text describing the date of an instant</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instant/value"/>
    <LangSpecProperty key="socket-allow-4" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-FormatDateTime" decorator="call" initlabel="FormatDateTime"
            kind="function" color="call">
  <description>
    <text>Text describing the date and time of an instant</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="instant/value"/>
    <LangSpecProperty key="socket-allow-2" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-FormatDateTime" decorator="call" initlabel="FormatDateTime"
            kind="function" color="call">
  <description>
    <text>Text describing the date and time of an instant</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instant/value"/>
    <LangSpecProperty key="socket-allow-4" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-FormatTime" decorator="call" initlabel="FormatTime"
            kind="function" color="call">
  <description>
    <text>Text describing time time of an instant</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="instant/value"/>
    <LangSpecProperty key="socket-allow-2" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-FormatTime" decorator="call" initlabel="FormatTime"
            kind="function" color="call">
  <description>
    <text>Text describing time time of an instant</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instant/value"/>
    <LangSpecProperty key="socket-allow-4" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-GetMillis" decorator="call" initlabel="GetMillis"
            kind="function" color="call">
  <description>
    <text>The instant in time measured as milliseconds since 1970.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="instant/value"/>
    <LangSpecProperty key="socket-allow-2" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-GetMillis" decorator="call" initlabel="GetMillis"
            kind="function" color="call">
  <description>
    <text>The instant in time measured as milliseconds since 1970.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instant/value"/>
    <LangSpecProperty key="socket-allow-4" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-Hour" decorator="call" initlabel="Hour"
            kind="function" color="call">
  <description>
    <text>The hour of the day</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="instant/value"/>
    <LangSpecProperty key="socket-allow-2" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-Hour" decorator="call" initlabel="Hour"
            kind="function" color="call">
  <description>
    <text>The hour of the day</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instant/value"/>
    <LangSpecProperty key="socket-allow-4" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-MakeInstant" decorator="call" initlabel="MakeInstant"
            kind="function" color="call">
  <description>
    <text>An instant specified by MM/DD/YYYY hh:mm:ss or MM/DD/YYYY or hh:mm</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="from" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="InstantInTime"/>
    <LangSpecProperty key="socket-allow-1" value="from/value"/>
    <LangSpecProperty key="socket-allow-2" value="from/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-MakeInstant" decorator="call" initlabel="MakeInstant"
            kind="function" color="call">
  <description>
    <text>An instant specified by MM/DD/YYYY hh:mm:ss or MM/DD/YYYY or hh:mm</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="from" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="InstantInTime"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="from/value"/>
    <LangSpecProperty key="socket-allow-4" value="from/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-MakeInstantFromMillis" decorator="call" initlabel="MakeInstantFromMillis"
            kind="function" color="call">
  <description>
    <text>An instant in time specified by the milliseconds since 1970.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="millis" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="InstantInTime"/>
    <LangSpecProperty key="socket-allow-1" value="millis/value"/>
    <LangSpecProperty key="socket-allow-2" value="millis/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-MakeInstantFromMillis" decorator="call" initlabel="MakeInstantFromMillis"
            kind="function" color="call">
  <description>
    <text>An instant in time specified by the milliseconds since 1970.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="millis" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="InstantInTime"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="millis/value"/>
    <LangSpecProperty key="socket-allow-4" value="millis/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-Minute" decorator="call" initlabel="Minute"
            kind="function" color="call">
  <description>
    <text>The minute of the hour</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="instant/value"/>
    <LangSpecProperty key="socket-allow-2" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-Minute" decorator="call" initlabel="Minute"
            kind="function" color="call">
  <description>
    <text>The minute of the hour</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instant/value"/>
    <LangSpecProperty key="socket-allow-4" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-Month" decorator="call" initlabel="Month"
            kind="function" color="call">
  <description>
    <text>The month of the year, a number from 1 to 12)</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="instant/value"/>
    <LangSpecProperty key="socket-allow-2" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-Month" decorator="call" initlabel="Month"
            kind="function" color="call">
  <description>
    <text>The month of the year, a number from 1 to 12)</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instant/value"/>
    <LangSpecProperty key="socket-allow-4" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-MonthName" decorator="call" initlabel="MonthName"
            kind="function" color="call">
  <description>
    <text>The name of the month</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="instant/value"/>
    <LangSpecProperty key="socket-allow-2" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-MonthName" decorator="call" initlabel="MonthName"
            kind="function" color="call">
  <description>
    <text>The name of the month</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instant/value"/>
    <LangSpecProperty key="socket-allow-4" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-Now" decorator="call" initlabel="Now"
            kind="function" color="call">
  <description>
    <text>The instant in time read from phone&apos;s clock</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-Now" decorator="call" initlabel="Now"
            kind="function" color="call">
  <description>
    <text>The instant in time read from phone&apos;s clock</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="InstantInTime"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-Second" decorator="call" initlabel="Second"
            kind="function" color="call">
  <description>
    <text>The second of the minute</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="instant/value"/>
    <LangSpecProperty key="socket-allow-2" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-Second" decorator="call" initlabel="Second"
            kind="function" color="call">
  <description>
    <text>The second of the minute</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instant/value"/>
    <LangSpecProperty key="socket-allow-4" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-SystemTime" decorator="call" initlabel="SystemTime"
            kind="function" color="call">
  <description>
    <text>The phone&apos;s internal time</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-SystemTime" decorator="call" initlabel="SystemTime"
            kind="function" color="call">
  <description>
    <text>The phone&apos;s internal time</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-Weekday" decorator="call" initlabel="Weekday"
            kind="function" color="call">
  <description>
    <text>The day of the week. a number from 1 (Sunday) to 7 (Saturday)</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="instant/value"/>
    <LangSpecProperty key="socket-allow-2" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-Weekday" decorator="call" initlabel="Weekday"
            kind="function" color="call">
  <description>
    <text>The day of the week. a number from 1 (Sunday) to 7 (Saturday)</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instant/value"/>
    <LangSpecProperty key="socket-allow-4" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-WeekdayName" decorator="call" initlabel="WeekdayName"
            kind="function" color="call">
  <description>
    <text>The name of the day of the week</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="instant/value"/>
    <LangSpecProperty key="socket-allow-2" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-WeekdayName" decorator="call" initlabel="WeekdayName"
            kind="function" color="call">
  <description>
    <text>The name of the day of the week</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instant/value"/>
    <LangSpecProperty key="socket-allow-4" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Clock-Year" decorator="call" initlabel="Year"
            kind="function" color="call">
  <description>
    <text>The year</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="instant/value"/>
    <LangSpecProperty key="socket-allow-2" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Clock-Year" decorator="call" initlabel="Year"
            kind="function" color="call">
  <description>
    <text>The year</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instant" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instant/value"/>
    <LangSpecProperty key="socket-allow-4" value="instant/InstantInTime"/>
  </LangSpecProperties>
</BlockGenus>

<!-- ContactPicker Component -->

<BlockGenus name="ContactPicker" initlabel="ContactPicker"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A button that, when clicked on, displays a list of the contacts to choose among. After the user has made a selection, the following properties will be set to information about the chosen contact: - ContactName: the contact&apos;s name - EmailAddress: the contact&apos;s primary email address - Picture: the name of the file containing the contact&apos;s image, which can be used as a Picture property value for the Image or ImageSprite component. Other properties affect the appearance of the button (TextAlignment, BackgroundColor, etc.) and whether it can be clicked on (Enabled). Picking is not supported on all phones. If it fails, this component will show a notification. The error behavior can be overridden with the Screen.ErrorOccurred event handler.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="4"/>
    <LangSpecProperty key="ya-event-1" value="ContactPicker-AfterPicking"/>
    <LangSpecProperty key="ya-event-2" value="ContactPicker-BeforePicking"/>
    <LangSpecProperty key="ya-event-3" value="ContactPicker-GotFocus"/>
    <LangSpecProperty key="ya-event-4" value="ContactPicker-LostFocus"/>
    <LangSpecProperty key="ya-prop-1" value="BackgroundColor/read-write-property/number/Returns the button&apos;s background color"/>
    <LangSpecProperty key="ya-prop-2" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-3" value="ContactName/read-only-property/text/"/>
    <LangSpecProperty key="ya-prop-4" value="EmailAddress/read-only-property/text/"/>
    <LangSpecProperty key="ya-prop-5" value="Enabled/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-6" value="FontBold/invisible-property/boolean/"/>
    <LangSpecProperty key="ya-prop-7" value="FontItalic/invisible-property/boolean/"/>
    <LangSpecProperty key="ya-prop-8" value="FontSize/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-9" value="FontTypeface/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-10" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-11" value="Image/read-write-property/text/Specifies the path of the button&apos;s image. If there is both an Image and a BackgroundColor, only the Image will be visible."/>
    <LangSpecProperty key="ya-prop-12" value="Picture/read-only-property/text/"/>
    <LangSpecProperty key="ya-prop-13" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-14" value="Shape/invisible-property/number/Specifies the button&apos;s shape (default, rounded, rectangular, oval). The shape will not be visible if an Image is being displayed."/>
    <LangSpecProperty key="ya-prop-15" value="ShowFeedback/read-write-property/boolean/Specifies if a visual feedback should be shown for a button that as an image as background."/>
    <LangSpecProperty key="ya-prop-16" value="Text/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-17" value="TextAlignment/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-18" value="TextColor/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-19" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-20" value="Width/read-write-property/number/"/>
    <LangSpecProperty key="ya-method-1" value="ContactPicker-Open"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-ContactPicker-Open"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="ContactPicker-AfterPicking" initlabel="AfterPicking"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Simple event to be raised after the picker activity returns its result and the properties have been filled in.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ContactPicker-BeforePicking" initlabel="BeforePicking"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Simple event to raise when the component is clicked but before the picker activity is started.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ContactPicker-GotFocus" initlabel="GotFocus"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates the cursor moved over the button so it is now possible to click it.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ContactPicker-LostFocus" initlabel="LostFocus"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates the cursor moved away from the button so it is now no longer possible to click it.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="ContactPicker-Open" decorator="call" initlabel="Open"
            kind="command" color="call">
  <description>
    <text>Opens the picker, as though the user clicked on it.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-ContactPicker-Open" decorator="call" initlabel="Open"
            kind="command" color="call">
  <description>
    <text>Opens the picker, as though the user clicked on it.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- EmailPicker Component -->

<BlockGenus name="EmailPicker" initlabel="EmailPicker"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A text box in which a user can begin entering an email address of a contact and be offered auto-completion. The initial value of the box and the value after user entry is in the Text property. If the Text property is initially empty, the contents of the Hint property will be faintly shown in the text box as a hint to the user. Other properties affect the appearance of the text box (TextAlignment, BackgroundColor, etc.) and whether it can be used (Enabled). Text boxes are usually used with the Button component, with the user clicking on the button when text entry is complete.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="2"/>
    <LangSpecProperty key="ya-event-1" value="EmailPicker-GotFocus"/>
    <LangSpecProperty key="ya-event-2" value="EmailPicker-LostFocus"/>
    <LangSpecProperty key="ya-prop-1" value="BackgroundColor/read-write-property/number/The background color of the input box. You can choose a color by name in the Designer or in the Blocks Editor. The default background color is &apos;default&apos; (shaded 3-D look)."/>
    <LangSpecProperty key="ya-prop-2" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-3" value="Enabled/read-write-property/boolean/Whether the user can enter text into this input box. By default, this is true."/>
    <LangSpecProperty key="ya-prop-4" value="FontBold/invisible-property/boolean/Whether the font for the text should be bold. By default, it is not."/>
    <LangSpecProperty key="ya-prop-5" value="FontItalic/invisible-property/boolean/Whether the text should appear in italics. By default, it does not."/>
    <LangSpecProperty key="ya-prop-6" value="FontSize/read-write-property/number/The font size for the text. By default, it is 14.0 points."/>
    <LangSpecProperty key="ya-prop-7" value="FontTypeface/invisible-property/number/The font for the text. The value can be changed in the Designer."/>
    <LangSpecProperty key="ya-prop-8" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-9" value="Hint/read-write-property/text/Text that should appear faintly in the input box to provide a hint as to what the user should enter. This can only be seen if the Text property is empty."/>
    <LangSpecProperty key="ya-prop-10" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-11" value="Text/read-write-property/text/The text in the input box, which can be set by the programmer in the Designer or Blocks Editor, or it can be entered by the user (unless the Enabled property is false)."/>
    <LangSpecProperty key="ya-prop-12" value="TextAlignment/invisible-property/number/Whether the text should be left justified, centered, or right justified. By default, text is left justified."/>
    <LangSpecProperty key="ya-prop-13" value="TextColor/read-write-property/number/The color for the text. You can choose a color by name in the Designer or in the Blocks Editor. The default text color is black."/>
    <LangSpecProperty key="ya-prop-14" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-15" value="Width/read-write-property/number/"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="EmailPicker-GotFocus" initlabel="GotFocus"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event raised when this component is selected for input, such as by the user touching it.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="EmailPicker-LostFocus" initlabel="LostFocus"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event raised when this component is no longer selected for input, such as if the user touches a different text box.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Screen Component -->

<BlockGenus name="Screen" initlabel="Screen"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Top-level component containing all other components in the program</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="11"/>
    <LangSpecProperty key="ya-event-1" value="Screen-BackPressed"/>
    <LangSpecProperty key="ya-event-2" value="Screen-ErrorOccurred"/>
    <LangSpecProperty key="ya-event-3" value="Screen-Initialize"/>
    <LangSpecProperty key="ya-event-4" value="Screen-OtherScreenClosed"/>
    <LangSpecProperty key="ya-event-5" value="Screen-ScreenOrientationChanged"/>
    <LangSpecProperty key="ya-prop-1" value="AlignHorizontal/read-write-property/number/A number that encodes how contents of the screen are aligned horizontally. The choices are: 1 = left aligned, 2 = horizontally centered, 3 = right aligned."/>
    <LangSpecProperty key="ya-prop-2" value="AlignVertical/read-write-property/number/A number that encodes how the contents of the arrangement are aligned vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom. Vertical alignment has no effect if the screen is scrollable."/>
    <LangSpecProperty key="ya-prop-3" value="BackgroundColor/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-4" value="BackgroundImage/read-write-property/text/The screen background image."/>
    <LangSpecProperty key="ya-prop-5" value="CloseScreenAnimation/read-write-property/text/The animation for closing current screen and returning to the previous screen. Valid options are default, fade, zoom, slidehorizontal, slidevertical, and none"/>
    <LangSpecProperty key="ya-prop-6" value="Height/read-only-property/number/"/>
    <LangSpecProperty key="ya-prop-7" value="Icon/invisible-property/text/"/>
    <LangSpecProperty key="ya-prop-8" value="OpenScreenAnimation/read-write-property/text/The animation for switching to another screen. Valid options are default, fade, zoom, slidehorizontal, slidevertical, and none"/>
    <LangSpecProperty key="ya-prop-9" value="ScreenOrientation/read-write-property/text/The requested screen orientation. Commonly used values are unspecified (-1), landscape (0), portrait (1), sensor (4), and user (2). See the Android developer docuemntation for ActivityInfo.Screen_Orientation for the complete list of possible settings."/>
    <LangSpecProperty key="ya-prop-10" value="Scrollable/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-11" value="Title/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-12" value="VersionCode/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-13" value="VersionName/invisible-property/text/"/>
    <LangSpecProperty key="ya-prop-14" value="Width/read-only-property/number/"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Screen-BackPressed" initlabel="BackPressed"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Device back button pressed.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Screen-ErrorOccurred" initlabel="ErrorOccurred"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event raised when an error occurs. Only some errors will raise this condition. For those errors, the system will show a notification by default. You can use this event handler to prescribe an error behavior different than the default.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="component"/>
    </BlockConnector>
    <BlockConnector label="functionName" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="functionName"/>
    </BlockConnector>
    <BlockConnector label="errorNumber" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="errorNumber"/>
    </BlockConnector>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="message"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="component/argument"/>
    <LangSpecProperty key="socket-allow-2" value="functionName/argument"/>
    <LangSpecProperty key="socket-allow-3" value="errorNumber/argument"/>
    <LangSpecProperty key="socket-allow-4" value="message/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Screen-Initialize" initlabel="Initialize"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Screen starting</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Screen-OtherScreenClosed" initlabel="OtherScreenClosed"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event raised when another screen has closed and control has returned to this screen.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="otherScreenName" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="otherScreenName"/>
    </BlockConnector>
    <BlockConnector label="result" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="result"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="otherScreenName/argument"/>
    <LangSpecProperty key="socket-allow-2" value="result/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Screen-ScreenOrientationChanged" initlabel="ScreenOrientationChanged"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Screen orientation changed</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- FusiontablesControl Component -->

<BlockGenus name="FusiontablesControl" initlabel="FusiontablesControl"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A non-visible component that communicates with Google Fusion Tables. Fusion Tables let you store, share, query and visualize data tables; this component lets you query, create, and modify these tables. This component uses the Fusion Tables API V1.0. In order to develop apps that use Fusiontables, you must obtain an API Key. To get an API key, follow these instructions. - Go to your Google APIs Console and login if necessary. - Select the Services item from the menu on the left. - Choose the Fusiontables service from the list provided and turn it on. - Go back to the main menu and select the API Access item. Your API Key will be near the bottom of that pane in the section called &quot;Simple API Access&quot;.You will have to provide that key as the value for the ApiKey property in your Fusiontables app. Once you have an API key, set the value of the Query property to a valid Fusiontables SQL query and call SendQuery to execute the query. App Inventor will send the query to the Fusion Tables server and the GotResult block will fire when a result is returned from the server.Query results will be returned in CSV format, and can be converted to list format using the &quot;list from csv table&quot; or &quot;list from csv row&quot; blocks. Note that you do not need to worry about UTF-encoding the query. But you do need to make sure the query follows the syntax described in the reference manual, which means that things like capitalization for names of columns matters, and that single quotes must be used around column names if there are spaces in them.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="2"/>
    <LangSpecProperty key="ya-event-1" value="FusiontablesControl-GotResult"/>
    <LangSpecProperty key="ya-prop-1" value="ApiKey/read-write-property/text/Your Google API Key. For help, click on the questionmark (?) next to the FusiontablesControl component in the Palette."/>
    <LangSpecProperty key="ya-prop-2" value="Query/read-write-property/text/The query to send to the Fusion Tables API. For legal query formats and examples, see the Fusion Tables API v1.0 reference manual. Note that you do not need to worry about UTF-encoding the query. But you do need to make sure it follows the syntax described in the reference manual, which means that things like capitalization for names of columns matters, and that single quotes need to be used around column names if there are spaces in them."/>
    <LangSpecProperty key="ya-method-1" value="FusiontablesControl-DoQuery"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-FusiontablesControl-DoQuery"/>
    <LangSpecProperty key="ya-method-2" value="FusiontablesControl-ForgetLogin"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-FusiontablesControl-ForgetLogin"/>
    <LangSpecProperty key="ya-method-3" value="FusiontablesControl-SendQuery"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-FusiontablesControl-SendQuery"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="FusiontablesControl-GotResult" initlabel="GotResult"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that the Fusion Tables query has finished processing, with a result. The result of the query will generally be returned in CSV format, and can be converted to list format using the &quot;list from csv table&quot; or &quot;list from csv row&quot; blocks.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="result" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="result"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="result/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="FusiontablesControl-DoQuery" decorator="call" initlabel="DoQuery"
            kind="command" color="call">
  <description>
    <text>DEPRECATED. This block will be deprecated by the end of 2012. Use SendQuery.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-FusiontablesControl-DoQuery" decorator="call" initlabel="DoQuery"
            kind="command" color="call">
  <description>
    <text>DEPRECATED. This block will be deprecated by the end of 2012. Use SendQuery.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="FusiontablesControl-ForgetLogin" decorator="call" initlabel="ForgetLogin"
            kind="command" color="call">
  <description>
    <text>Method for ForgetLogin</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-FusiontablesControl-ForgetLogin" decorator="call" initlabel="ForgetLogin"
            kind="command" color="call">
  <description>
    <text>Method for ForgetLogin</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="FusiontablesControl-SendQuery" decorator="call" initlabel="SendQuery"
            kind="command" color="call">
  <description>
    <text>Send the query to the Fusiontables server.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-FusiontablesControl-SendQuery" decorator="call" initlabel="SendQuery"
            kind="command" color="call">
  <description>
    <text>Send the query to the Fusiontables server.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- GameClient Component -->

<BlockGenus name="GameClient" initlabel="GameClient"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Provides a way for applications to communicate with online game servers</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-event-1" value="GameClient-FunctionCompleted"/>
    <LangSpecProperty key="ya-event-2" value="GameClient-GotMessage"/>
    <LangSpecProperty key="ya-event-3" value="GameClient-Info"/>
    <LangSpecProperty key="ya-event-4" value="GameClient-InstanceIdChanged"/>
    <LangSpecProperty key="ya-event-5" value="GameClient-Invited"/>
    <LangSpecProperty key="ya-event-6" value="GameClient-NewInstanceMade"/>
    <LangSpecProperty key="ya-event-7" value="GameClient-NewLeader"/>
    <LangSpecProperty key="ya-event-8" value="GameClient-PlayerJoined"/>
    <LangSpecProperty key="ya-event-9" value="GameClient-PlayerLeft"/>
    <LangSpecProperty key="ya-event-10" value="GameClient-ServerCommandFailure"/>
    <LangSpecProperty key="ya-event-11" value="GameClient-ServerCommandSuccess"/>
    <LangSpecProperty key="ya-event-12" value="GameClient-UserEmailAddressSet"/>
    <LangSpecProperty key="ya-event-13" value="GameClient-WebServiceError"/>
    <LangSpecProperty key="ya-prop-1" value="GameId/read-only-property/text/The game name for this application. The same game ID can have one or more game instances."/>
    <LangSpecProperty key="ya-prop-2" value="InstanceId/read-only-property/text/The game instance id. Taken together,the game ID and the instance ID uniquely identify the game."/>
    <LangSpecProperty key="ya-prop-3" value="InvitedInstances/read-only-property/list/The set of game instances to which this player has been invited but has not yet joined. To ensure current values are returned, first invoke GetInstanceLists."/>
    <LangSpecProperty key="ya-prop-4" value="JoinedInstances/read-only-property/list/The set of game instances in which this player is participating. To ensure current values are returned, first invoke GetInstanceLists."/>
    <LangSpecProperty key="ya-prop-5" value="Leader/read-only-property/text/The game&apos;s leader. At any time, each game instance has only one leader, but the leader may change with time. Initially, the leader is the game instance creator. Application writers determine special properties of the leader. The leader value is updated each time a successful communication is made with the server."/>
    <LangSpecProperty key="ya-prop-6" value="Players/read-only-property/list/The current set of players for this game instance. Each player is designated by an email address, which is a string. The list of players is updated each time a successful communication is made with the game server."/>
    <LangSpecProperty key="ya-prop-7" value="PublicInstances/read-only-property/list/The set of game instances that have been marked public. To ensure current values are returned, first invoke {@link #GetInstanceLists}."/>
    <LangSpecProperty key="ya-prop-8" value="ServiceUrl/read-only-property/text/The URL of the game server."/>
    <LangSpecProperty key="ya-prop-9" value="UserEmailAddress/read-write-property/text/The email address that is being used as the player id for this game client. At present, users must set this manually in oder to join a game. But this property will change in the future so that is set automatically, and users will not be able to change it."/>
    <LangSpecProperty key="ya-method-1" value="GameClient-GetInstanceLists"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-GameClient-GetInstanceLists"/>
    <LangSpecProperty key="ya-method-2" value="GameClient-GetMessages"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-GameClient-GetMessages"/>
    <LangSpecProperty key="ya-method-3" value="GameClient-Invite"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-GameClient-Invite"/>
    <LangSpecProperty key="ya-method-4" value="GameClient-LeaveInstance"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-GameClient-LeaveInstance"/>
    <LangSpecProperty key="ya-method-5" value="GameClient-MakeNewInstance"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-GameClient-MakeNewInstance"/>
    <LangSpecProperty key="ya-method-6" value="GameClient-SendMessage"/>
    <LangSpecProperty key="ya-type-method-6" value="Type-GameClient-SendMessage"/>
    <LangSpecProperty key="ya-method-7" value="GameClient-ServerCommand"/>
    <LangSpecProperty key="ya-type-method-7" value="Type-GameClient-ServerCommand"/>
    <LangSpecProperty key="ya-method-8" value="GameClient-SetInstance"/>
    <LangSpecProperty key="ya-type-method-8" value="Type-GameClient-SetInstance"/>
    <LangSpecProperty key="ya-method-9" value="GameClient-SetLeader"/>
    <LangSpecProperty key="ya-type-method-9" value="Type-GameClient-SetLeader"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="GameClient-FunctionCompleted" initlabel="FunctionCompleted"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that a function call completed.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="functionName" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="functionName"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="functionName/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="GameClient-GotMessage" initlabel="GotMessage"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that a new message has been received.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="type" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="type"/>
    </BlockConnector>
    <BlockConnector label="sender" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="sender"/>
    </BlockConnector>
    <BlockConnector label="contents" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="contents"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="type/argument"/>
    <LangSpecProperty key="socket-allow-2" value="sender/argument"/>
    <LangSpecProperty key="socket-allow-3" value="contents/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="GameClient-Info" initlabel="Info"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that something has occurred which the player should know about.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="message"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="message/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="GameClient-InstanceIdChanged" initlabel="InstanceIdChanged"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that the InstanceId property has changed as a result of calling MakeNewInstance or SetInstance.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instanceId" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="instanceId"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="instanceId/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="GameClient-Invited" initlabel="Invited"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that a user has been invited to this game instance.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instanceId" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="instanceId"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="instanceId/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="GameClient-NewInstanceMade" initlabel="NewInstanceMade"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that a new instance was successfully created after calling MakeNewInstance.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instanceId" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="instanceId"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="instanceId/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="GameClient-NewLeader" initlabel="NewLeader"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that this game has a new leader as specified through SetLeader</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="playerId" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="playerId"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="playerId/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="GameClient-PlayerJoined" initlabel="PlayerJoined"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that a new player has joined this game instance.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="playerId" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="playerId"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="playerId/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="GameClient-PlayerLeft" initlabel="PlayerLeft"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that a player has left this game instance.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="playerId" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="playerId"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="playerId/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="GameClient-ServerCommandFailure" initlabel="ServerCommandFailure"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that a server command failed.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="command" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="command"/>
    </BlockConnector>
    <BlockConnector label="arguments" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="arguments"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="command/argument"/>
    <LangSpecProperty key="socket-allow-2" value="arguments/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="GameClient-ServerCommandSuccess" initlabel="ServerCommandSuccess"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that a server command returned successfully.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="command" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="command"/>
    </BlockConnector>
    <BlockConnector label="response" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="response"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="command/argument"/>
    <LangSpecProperty key="socket-allow-2" value="response/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="GameClient-UserEmailAddressSet" initlabel="UserEmailAddressSet"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that the user email address has been set.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="emailAddress" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="emailAddress"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="emailAddress/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="GameClient-WebServiceError" initlabel="WebServiceError"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that an error occurred while communicating with the web server.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="functionName" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="functionName"/>
    </BlockConnector>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="message"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="functionName/argument"/>
    <LangSpecProperty key="socket-allow-2" value="message/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="GameClient-GetInstanceLists" decorator="call" initlabel="GetInstanceLists"
            kind="command" color="call">
  <description>
    <text>Updates the InstancesJoined and InstancesInvited lists. This procedure can be called before setting the InstanceId.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-GameClient-GetInstanceLists" decorator="call" initlabel="GetInstanceLists"
            kind="command" color="call">
  <description>
    <text>Updates the InstancesJoined and InstancesInvited lists. This procedure can be called before setting the InstanceId.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="GameClient-GetMessages" decorator="call" initlabel="GetMessages"
            kind="command" color="call">
  <description>
    <text>Retrieves messages of the specified type.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="type" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="count" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="type/value"/>
    <LangSpecProperty key="socket-allow-2" value="count/value"/>
    <LangSpecProperty key="socket-allow-3" value="type/text"/>
    <LangSpecProperty key="socket-allow-4" value="count/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-GameClient-GetMessages" decorator="call" initlabel="GetMessages"
            kind="command" color="call">
  <description>
    <text>Retrieves messages of the specified type.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="type" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="count" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="type/value"/>
    <LangSpecProperty key="socket-allow-4" value="count/value"/>
    <LangSpecProperty key="socket-allow-5" value="type/text"/>
    <LangSpecProperty key="socket-allow-6" value="count/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="GameClient-Invite" decorator="call" initlabel="Invite"
            kind="command" color="call">
  <description>
    <text>Invites a player to this game instance.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="playerEmail" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="playerEmail/value"/>
    <LangSpecProperty key="socket-allow-2" value="playerEmail/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-GameClient-Invite" decorator="call" initlabel="Invite"
            kind="command" color="call">
  <description>
    <text>Invites a player to this game instance.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="playerEmail" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="playerEmail/value"/>
    <LangSpecProperty key="socket-allow-4" value="playerEmail/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="GameClient-LeaveInstance" decorator="call" initlabel="LeaveInstance"
            kind="command" color="call">
  <description>
    <text>Leaves the current instance.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-GameClient-LeaveInstance" decorator="call" initlabel="LeaveInstance"
            kind="command" color="call">
  <description>
    <text>Leaves the current instance.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="GameClient-MakeNewInstance" decorator="call" initlabel="MakeNewInstance"
            kind="command" color="call">
  <description>
    <text>Asks the server to create a new instance of this game.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instanceId" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="makePublic" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="instanceId/value"/>
    <LangSpecProperty key="socket-allow-2" value="makePublic/value"/>
    <LangSpecProperty key="socket-allow-3" value="instanceId/text"/>
    <LangSpecProperty key="socket-allow-4" value="makePublic/boolean"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-GameClient-MakeNewInstance" decorator="call" initlabel="MakeNewInstance"
            kind="command" color="call">
  <description>
    <text>Asks the server to create a new instance of this game.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instanceId" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="makePublic" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instanceId/value"/>
    <LangSpecProperty key="socket-allow-4" value="makePublic/value"/>
    <LangSpecProperty key="socket-allow-5" value="instanceId/text"/>
    <LangSpecProperty key="socket-allow-6" value="makePublic/boolean"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="GameClient-SendMessage" decorator="call" initlabel="SendMessage"
            kind="command" color="call">
  <description>
    <text>Sends a keyed message to all recipients in the recipients list. The message will consist of the contents list.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="type" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="recipients" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="contents" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="type/value"/>
    <LangSpecProperty key="socket-allow-2" value="recipients/value"/>
    <LangSpecProperty key="socket-allow-3" value="contents/value"/>
    <LangSpecProperty key="socket-allow-4" value="type/text"/>
    <LangSpecProperty key="socket-allow-5" value="recipients/list"/>
    <LangSpecProperty key="socket-allow-6" value="contents/list"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-GameClient-SendMessage" decorator="call" initlabel="SendMessage"
            kind="command" color="call">
  <description>
    <text>Sends a keyed message to all recipients in the recipients list. The message will consist of the contents list.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="type" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="recipients" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="contents" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="type/value"/>
    <LangSpecProperty key="socket-allow-4" value="recipients/value"/>
    <LangSpecProperty key="socket-allow-5" value="contents/value"/>
    <LangSpecProperty key="socket-allow-6" value="type/text"/>
    <LangSpecProperty key="socket-allow-7" value="recipients/list"/>
    <LangSpecProperty key="socket-allow-8" value="contents/list"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="GameClient-ServerCommand" decorator="call" initlabel="ServerCommand"
            kind="command" color="call">
  <description>
    <text>Sends the specified command to the game server.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="command" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="arguments" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="command/value"/>
    <LangSpecProperty key="socket-allow-2" value="arguments/value"/>
    <LangSpecProperty key="socket-allow-3" value="command/text"/>
    <LangSpecProperty key="socket-allow-4" value="arguments/list"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-GameClient-ServerCommand" decorator="call" initlabel="ServerCommand"
            kind="command" color="call">
  <description>
    <text>Sends the specified command to the game server.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="command" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="arguments" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="command/value"/>
    <LangSpecProperty key="socket-allow-4" value="arguments/value"/>
    <LangSpecProperty key="socket-allow-5" value="command/text"/>
    <LangSpecProperty key="socket-allow-6" value="arguments/list"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="GameClient-SetInstance" decorator="call" initlabel="SetInstance"
            kind="command" color="call">
  <description>
    <text>Sets InstanceId and joins the specified instance.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="instanceId" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="instanceId/value"/>
    <LangSpecProperty key="socket-allow-2" value="instanceId/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-GameClient-SetInstance" decorator="call" initlabel="SetInstance"
            kind="command" color="call">
  <description>
    <text>Sets InstanceId and joins the specified instance.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="instanceId" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="instanceId/value"/>
    <LangSpecProperty key="socket-allow-4" value="instanceId/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="GameClient-SetLeader" decorator="call" initlabel="SetLeader"
            kind="command" color="call">
  <description>
    <text>Tells the server to set the leader to playerId. Only the current leader may successfully set a new leader.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="playerEmail" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="playerEmail/value"/>
    <LangSpecProperty key="socket-allow-2" value="playerEmail/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-GameClient-SetLeader" decorator="call" initlabel="SetLeader"
            kind="command" color="call">
  <description>
    <text>Tells the server to set the leader to playerId. Only the current leader may successfully set a new leader.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="playerEmail" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="playerEmail/value"/>
    <LangSpecProperty key="socket-allow-4" value="playerEmail/text"/>
  </LangSpecProperties>
</BlockGenus>

<!-- HorizontalArrangement Component -->

<BlockGenus name="HorizontalArrangement" initlabel="HorizontalArrangement"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A formatting element in which to place components that should be displayed from left to right. If you wish to have components displayed one over another, use VerticalArrangement instead.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="2"/>
    <LangSpecProperty key="ya-prop-1" value="AlignHorizontal/read-write-property/number/A number that encodes how contents of the arrangement are aligned horizontally. The choices are: 1 = left aligned, 2 = horizontally centered, 3 = right aligned. Alignment has no effect if the arrangement&apos;s width is automatic."/>
    <LangSpecProperty key="ya-prop-2" value="AlignVertical/read-write-property/number/A number that encodes how the contents of the arrangement are aligned vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom. Alignment has no effect if the arrangement&apos;s height is automatic."/>
    <LangSpecProperty key="ya-prop-3" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-4" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-5" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-6" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-7" value="Width/read-write-property/number/"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Image Component -->

<BlockGenus name="Image" initlabel="Image"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Component for displaying images. The picture to display, and other aspects of the Image&apos;s appearance, can be specified in the Designer or in the Blocks Editor.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-prop-1" value="Animation/write-only-property/text/"/>
    <LangSpecProperty key="ya-prop-2" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-3" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-4" value="Picture/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-5" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-6" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-7" value="Width/read-write-property/number/"/>
  </LangSpecProperties>
</BlockGenus>

<!-- ImagePicker Component -->

<BlockGenus name="ImagePicker" initlabel="ImagePicker"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A special-purpose button. When the user taps an image picker, the device&apos;s image gallery appears, and the user can choose an image. After an image is picked, it is saved on the SD card and the ImageFile property will be the name of the file where the image is stored. In order to not fill up storage, a maximum of 10 images will be stored. Picking more images will delete previous images, in order from oldest to newest.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="5"/>
    <LangSpecProperty key="ya-event-1" value="ImagePicker-AfterPicking"/>
    <LangSpecProperty key="ya-event-2" value="ImagePicker-BeforePicking"/>
    <LangSpecProperty key="ya-event-3" value="ImagePicker-GotFocus"/>
    <LangSpecProperty key="ya-event-4" value="ImagePicker-LostFocus"/>
    <LangSpecProperty key="ya-prop-1" value="BackgroundColor/read-write-property/number/Returns the button&apos;s background color"/>
    <LangSpecProperty key="ya-prop-2" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-3" value="Enabled/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-4" value="FontBold/invisible-property/boolean/"/>
    <LangSpecProperty key="ya-prop-5" value="FontItalic/invisible-property/boolean/"/>
    <LangSpecProperty key="ya-prop-6" value="FontSize/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-7" value="FontTypeface/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-8" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-9" value="Image/read-write-property/text/Specifies the path of the button&apos;s image. If there is both an Image and a BackgroundColor, only the Image will be visible."/>
    <LangSpecProperty key="ya-prop-10" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-11" value="Selection/read-only-property/text/Path to the file containing the image that was selected."/>
    <LangSpecProperty key="ya-prop-12" value="Shape/invisible-property/number/Specifies the button&apos;s shape (default, rounded, rectangular, oval). The shape will not be visible if an Image is being displayed."/>
    <LangSpecProperty key="ya-prop-13" value="ShowFeedback/read-write-property/boolean/Specifies if a visual feedback should be shown for a button that as an image as background."/>
    <LangSpecProperty key="ya-prop-14" value="Text/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-15" value="TextAlignment/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-16" value="TextColor/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-17" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-18" value="Width/read-write-property/number/"/>
    <LangSpecProperty key="ya-method-1" value="ImagePicker-Open"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-ImagePicker-Open"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="ImagePicker-AfterPicking" initlabel="AfterPicking"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Simple event to be raised after the picker activity returns its result and the properties have been filled in.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ImagePicker-BeforePicking" initlabel="BeforePicking"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Simple event to raise when the component is clicked but before the picker activity is started.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ImagePicker-GotFocus" initlabel="GotFocus"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates the cursor moved over the button so it is now possible to click it.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ImagePicker-LostFocus" initlabel="LostFocus"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates the cursor moved away from the button so it is now no longer possible to click it.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="ImagePicker-Open" decorator="call" initlabel="Open"
            kind="command" color="call">
  <description>
    <text>Opens the picker, as though the user clicked on it.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-ImagePicker-Open" decorator="call" initlabel="Open"
            kind="command" color="call">
  <description>
    <text>Opens the picker, as though the user clicked on it.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- ImageSprite Component -->

<BlockGenus name="ImageSprite" initlabel="ImageSprite"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A &apos;sprite&apos; that can be placed on a Canvas, where it can react to touches and drags, interact with other sprites (Balls and other ImageSprites) and the edge of the Canvas, and move according to its property values. Its appearance is that of the image specified in its Picture property (unless its Visible property is False. To have an ImageSprite move 10 pixels to the left every 1000 milliseconds (one second), for example, you would set the Speed property to 10 [pixels], the Interval property to 1000 [milliseconds], the Heading property to 180 [degrees], and the Enabled property to True. A sprite whose Rotates property is True will rotate its image as the sprite&apos;s Heading changes. Checking for collisions with a rotated sprite currently checks the sprite&apos;s unrotated position so that collision checking will be inaccurate for tall narrow or short wide sprites that are rotated. Any of the sprite properties can be changed at any time under program control.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="6"/>
    <LangSpecProperty key="ya-event-1" value="ImageSprite-CollidedWith"/>
    <LangSpecProperty key="ya-event-2" value="ImageSprite-Dragged"/>
    <LangSpecProperty key="ya-event-3" value="ImageSprite-EdgeReached"/>
    <LangSpecProperty key="ya-event-4" value="ImageSprite-Flung"/>
    <LangSpecProperty key="ya-event-5" value="ImageSprite-NoLongerCollidingWith"/>
    <LangSpecProperty key="ya-event-6" value="ImageSprite-TouchDown"/>
    <LangSpecProperty key="ya-event-7" value="ImageSprite-TouchUp"/>
    <LangSpecProperty key="ya-event-8" value="ImageSprite-Touched"/>
    <LangSpecProperty key="ya-prop-1" value="Enabled/read-write-property/boolean/Controls whether the sprite moves when its speed is non-zero."/>
    <LangSpecProperty key="ya-prop-2" value="Heading/read-write-property/number/Returns the sprite&apos;s heading in degrees above the positive x-axis. Zero degrees is toward the right of the screen; 90 degrees is toward the top of the screen."/>
    <LangSpecProperty key="ya-prop-3" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-4" value="Interval/read-write-property/number/The interval in milliseconds at which the sprite&apos;s position is updated. For example, if the interval is 50 and the speed is 10, then the sprite will move 10 pixels every 50 milliseconds."/>
    <LangSpecProperty key="ya-prop-5" value="Picture/read-write-property/text/The picture that determines the sprite&apos;s appearence"/>
    <LangSpecProperty key="ya-prop-6" value="Rotates/read-write-property/boolean/If true, the sprite image rotates to match the sprite&apos;s heading. If false, the sprite image does not rotate when the sprite changes heading. The sprite rotates around its centerpoint."/>
    <LangSpecProperty key="ya-prop-7" value="Speed/read-write-property/number/The speed at which the sprite moves. The sprite moves this many pixels every interval."/>
    <LangSpecProperty key="ya-prop-8" value="Visible/read-write-property/boolean/True if the sprite is visible."/>
    <LangSpecProperty key="ya-prop-9" value="Width/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-10" value="X/read-write-property/number/The horizontal coordinate of the left edge of the sprite, increasing as the sprite moves to the right."/>
    <LangSpecProperty key="ya-prop-11" value="Y/read-write-property/number/The vertical coordinate of the top of the sprite, increasing as the sprite moves down."/>
    <LangSpecProperty key="ya-prop-12" value="Z/read-write-property/number/How the sprite should be layered relative to other sprits, with higher-numbered layers in front of lower-numbered layers."/>
    <LangSpecProperty key="ya-method-1" value="ImageSprite-Bounce"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-ImageSprite-Bounce"/>
    <LangSpecProperty key="ya-method-2" value="ImageSprite-CollidingWith"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-ImageSprite-CollidingWith"/>
    <LangSpecProperty key="ya-method-3" value="ImageSprite-MoveIntoBounds"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-ImageSprite-MoveIntoBounds"/>
    <LangSpecProperty key="ya-method-4" value="ImageSprite-MoveTo"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-ImageSprite-MoveTo"/>
    <LangSpecProperty key="ya-method-5" value="ImageSprite-PointInDirection"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-ImageSprite-PointInDirection"/>
    <LangSpecProperty key="ya-method-6" value="ImageSprite-PointTowards"/>
    <LangSpecProperty key="ya-type-method-6" value="Type-ImageSprite-PointTowards"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="ImageSprite-CollidedWith" initlabel="CollidedWith"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Handler for CollidedWith events, called when two sprites collide. Note that checking for collisions with a rotated ImageSprite currently checks against the sprite&apos;s unrotated position. Therefore, collision checking will be inaccurate for tall narrow or short wide sprites that are rotated.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="other" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="other"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="other/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ImageSprite-Dragged" initlabel="Dragged"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Handler for Dragged events. On all calls, the starting coordinates are where the screen was first touched, and the &quot;current&quot; coordinates describe the endpoint of the current line segment. On the first call within a given drag, the &quot;previous&quot; coordinates are the same as the starting coordinates; subsequently, they are the &quot;current&quot; coordinates from the prior call. Note that the Sprite won&apos;t actually move anywhere in response to the Dragged event unless MoveTo is specifically called.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="startX" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="startX"/>
    </BlockConnector>
    <BlockConnector label="startY" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="startY"/>
    </BlockConnector>
    <BlockConnector label="prevX" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="prevX"/>
    </BlockConnector>
    <BlockConnector label="prevY" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="prevY"/>
    </BlockConnector>
    <BlockConnector label="currentX" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="currentX"/>
    </BlockConnector>
    <BlockConnector label="currentY" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="currentY"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="startX/argument"/>
    <LangSpecProperty key="socket-allow-2" value="startY/argument"/>
    <LangSpecProperty key="socket-allow-3" value="prevX/argument"/>
    <LangSpecProperty key="socket-allow-4" value="prevY/argument"/>
    <LangSpecProperty key="socket-allow-5" value="currentX/argument"/>
    <LangSpecProperty key="socket-allow-6" value="currentY/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ImageSprite-EdgeReached" initlabel="EdgeReached"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event handler called when the sprite reaches an edge of the screen. If Bounce is then called with that edge, the sprite will appear to bounce off of the edge it reached.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="edge" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="edge"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="edge/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ImageSprite-Flung" initlabel="Flung"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>When a fling gesture (quick swipe) is made on the sprite: provides the (x,y) position of the start of the fling, relative to the upper left of the canvas. Also provides the speed (pixels per millisecond) and heading (0-360 degrees) of the fling, as well as the x velocity and y velocity components of the fling&apos;s vector.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="x"/>
    </BlockConnector>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="y"/>
    </BlockConnector>
    <BlockConnector label="speed" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="speed"/>
    </BlockConnector>
    <BlockConnector label="heading" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="heading"/>
    </BlockConnector>
    <BlockConnector label="xvel" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="xvel"/>
    </BlockConnector>
    <BlockConnector label="yvel" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="yvel"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="x/argument"/>
    <LangSpecProperty key="socket-allow-2" value="y/argument"/>
    <LangSpecProperty key="socket-allow-3" value="speed/argument"/>
    <LangSpecProperty key="socket-allow-4" value="heading/argument"/>
    <LangSpecProperty key="socket-allow-5" value="xvel/argument"/>
    <LangSpecProperty key="socket-allow-6" value="yvel/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ImageSprite-NoLongerCollidingWith" initlabel="NoLongerCollidingWith"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event indicating that a pair of sprites are no longer colliding.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="other" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="other"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="other/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ImageSprite-TouchDown" initlabel="TouchDown"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>When the user begins touching the sprite (places finger on sprite and leaves it there): provides the (x,y) position of the touch, relative to the upper left of the canvas</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="x"/>
    </BlockConnector>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="y"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="x/argument"/>
    <LangSpecProperty key="socket-allow-2" value="y/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ImageSprite-TouchUp" initlabel="TouchUp"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>When the user stops touching the sprite (lifts finger after a TouchDown event): provides the (x,y) position of the touch, relative to the upper left of the canvas</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="x"/>
    </BlockConnector>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="y"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="x/argument"/>
    <LangSpecProperty key="socket-allow-2" value="y/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ImageSprite-Touched" initlabel="Touched"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>When the user touches the sprite and then immediately lifts finger: provides the (x,y) position of the touch, relative to the upper left of the canvas</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="x"/>
    </BlockConnector>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="y"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="x/argument"/>
    <LangSpecProperty key="socket-allow-2" value="y/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="ImageSprite-Bounce" decorator="call" initlabel="Bounce"
            kind="command" color="call">
  <description>
    <text>Makes this sprite bounce, as if off a wall. For normal bouncing, the edge argument should be the one returned by EdgeReached.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="edge" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="edge/value"/>
    <LangSpecProperty key="socket-allow-2" value="edge/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-ImageSprite-Bounce" decorator="call" initlabel="Bounce"
            kind="command" color="call">
  <description>
    <text>Makes this sprite bounce, as if off a wall. For normal bouncing, the edge argument should be the one returned by EdgeReached.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="edge" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="edge/value"/>
    <LangSpecProperty key="socket-allow-4" value="edge/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ImageSprite-CollidingWith" decorator="call" initlabel="CollidingWith"
            kind="function" color="call">
  <description>
    <text>Indicates whether a collision has been registered between this sprite and the passed sprite.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="other" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="boolean"/>
    <LangSpecProperty key="socket-allow-1" value="other/value"/>
    <LangSpecProperty key="socket-allow-2" value="other/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-ImageSprite-CollidingWith" decorator="call" initlabel="CollidingWith"
            kind="function" color="call">
  <description>
    <text>Indicates whether a collision has been registered between this sprite and the passed sprite.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="other" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="boolean"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="other/value"/>
    <LangSpecProperty key="socket-allow-4" value="other/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ImageSprite-MoveIntoBounds" decorator="call" initlabel="MoveIntoBounds"
            kind="command" color="call">
  <description>
    <text>Moves the sprite back in bounds if part of it extends out of bounds, having no effect otherwise. If the sprite is too wide to fit on the canvas, this aligns the left side of the sprite with the left side of the canvas. If the sprite is too tall to fit on the canvas, this aligns the top side of the sprite with the top side of the canvas.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-ImageSprite-MoveIntoBounds" decorator="call" initlabel="MoveIntoBounds"
            kind="command" color="call">
  <description>
    <text>Moves the sprite back in bounds if part of it extends out of bounds, having no effect otherwise. If the sprite is too wide to fit on the canvas, this aligns the left side of the sprite with the left side of the canvas. If the sprite is too tall to fit on the canvas, this aligns the top side of the sprite with the top side of the canvas.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ImageSprite-MoveTo" decorator="call" initlabel="MoveTo"
            kind="command" color="call">
  <description>
    <text>Moves the sprite so that its left top corner is at the specfied x and y coordinates.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="x/value"/>
    <LangSpecProperty key="socket-allow-2" value="y/value"/>
    <LangSpecProperty key="socket-allow-3" value="x/number"/>
    <LangSpecProperty key="socket-allow-4" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-ImageSprite-MoveTo" decorator="call" initlabel="MoveTo"
            kind="command" color="call">
  <description>
    <text>Moves the sprite so that its left top corner is at the specfied x and y coordinates.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="x/value"/>
    <LangSpecProperty key="socket-allow-4" value="y/value"/>
    <LangSpecProperty key="socket-allow-5" value="x/number"/>
    <LangSpecProperty key="socket-allow-6" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ImageSprite-PointInDirection" decorator="call" initlabel="PointInDirection"
            kind="command" color="call">
  <description>
    <text>Turns the sprite to point towards the point with coordinates as (x, y).</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="x/value"/>
    <LangSpecProperty key="socket-allow-2" value="y/value"/>
    <LangSpecProperty key="socket-allow-3" value="x/number"/>
    <LangSpecProperty key="socket-allow-4" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-ImageSprite-PointInDirection" decorator="call" initlabel="PointInDirection"
            kind="command" color="call">
  <description>
    <text>Turns the sprite to point towards the point with coordinates as (x, y).</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="x" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="y" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="x/value"/>
    <LangSpecProperty key="socket-allow-4" value="y/value"/>
    <LangSpecProperty key="socket-allow-5" value="x/number"/>
    <LangSpecProperty key="socket-allow-6" value="y/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ImageSprite-PointTowards" decorator="call" initlabel="PointTowards"
            kind="command" color="call">
  <description>
    <text>Turns the sprite to point towards a designated target sprite. The new heading will be parallel to the line joining the centerpoints of the two sprites.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="target" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="target/value"/>
    <LangSpecProperty key="socket-allow-2" value="target/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-ImageSprite-PointTowards" decorator="call" initlabel="PointTowards"
            kind="command" color="call">
  <description>
    <text>Turns the sprite to point towards a designated target sprite. The new heading will be parallel to the line joining the centerpoints of the two sprites.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="target" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="target/value"/>
    <LangSpecProperty key="socket-allow-4" value="target/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Label Component -->

<BlockGenus name="Label" initlabel="Label"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A Label displays a piece of text, which is specified through the Text property. Other properties, all of which can be set in the Designer or Blocks Editor, control the appearance and placement of the text.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="2"/>
    <LangSpecProperty key="ya-prop-1" value="BackgroundColor/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-2" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-3" value="FontBold/invisible-property/boolean/"/>
    <LangSpecProperty key="ya-prop-4" value="FontItalic/invisible-property/boolean/"/>
    <LangSpecProperty key="ya-prop-5" value="FontSize/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-6" value="FontTypeface/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-7" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-8" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-9" value="Text/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-10" value="TextAlignment/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-11" value="TextColor/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-12" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-13" value="Width/read-write-property/number/"/>
  </LangSpecProperties>
</BlockGenus>

<!-- ListPicker Component -->

<BlockGenus name="ListPicker" initlabel="ListPicker"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A button that, when clicked on, displays a list of texts for the user to choose among. The texts can be specified through the Designer or Blocks Editor by setting the ElementsFromString property to their string-separated concatenation (for example, choice 1, choice 2, choice 3) or by setting the Elements property to a List in the Blocks editor. Other properties affect the appearance of the button (TextAlignment, BackgroundColor, etc.) and whether it can be clicked on (Enabled).</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="6"/>
    <LangSpecProperty key="ya-event-1" value="ListPicker-AfterPicking"/>
    <LangSpecProperty key="ya-event-2" value="ListPicker-BeforePicking"/>
    <LangSpecProperty key="ya-event-3" value="ListPicker-GotFocus"/>
    <LangSpecProperty key="ya-event-4" value="ListPicker-LostFocus"/>
    <LangSpecProperty key="ya-prop-1" value="BackgroundColor/read-write-property/number/Returns the button&apos;s background color"/>
    <LangSpecProperty key="ya-prop-2" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-3" value="Elements/read-write-property/list/"/>
    <LangSpecProperty key="ya-prop-4" value="ElementsFromString/write-only-property/text/"/>
    <LangSpecProperty key="ya-prop-5" value="Enabled/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-6" value="FontBold/invisible-property/boolean/"/>
    <LangSpecProperty key="ya-prop-7" value="FontItalic/invisible-property/boolean/"/>
    <LangSpecProperty key="ya-prop-8" value="FontSize/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-9" value="FontTypeface/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-10" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-11" value="Image/read-write-property/text/Specifies the path of the button&apos;s image. If there is both an Image and a BackgroundColor, only the Image will be visible."/>
    <LangSpecProperty key="ya-prop-12" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-13" value="Selection/read-write-property/text/The selected item. When directly changed by the programmer, the SelectionIndex property is also changed to the first item in the ListPicker with the given value. If the value does not appear, SelectionIndex will be set to 0."/>
    <LangSpecProperty key="ya-prop-14" value="SelectionIndex/read-write-property/number/The index of the currently selected item, starting at 1. If no item is selected, the value will be 0. If an attempt is made to set this to a number less than 1 or greater than the number of items in the ListPicker, SelectionIndex will be set to 0, and Selection will be set to the empty text."/>
    <LangSpecProperty key="ya-prop-15" value="Shape/invisible-property/number/Specifies the button&apos;s shape (default, rounded, rectangular, oval). The shape will not be visible if an Image is being displayed."/>
    <LangSpecProperty key="ya-prop-16" value="ShowFeedback/read-write-property/boolean/Specifies if a visual feedback should be shown for a button that as an image as background."/>
    <LangSpecProperty key="ya-prop-17" value="Text/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-18" value="TextAlignment/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-19" value="TextColor/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-20" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-21" value="Width/read-write-property/number/"/>
    <LangSpecProperty key="ya-method-1" value="ListPicker-Open"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-ListPicker-Open"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="ListPicker-AfterPicking" initlabel="AfterPicking"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Simple event to be raised after the picker activity returns its result and the properties have been filled in.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ListPicker-BeforePicking" initlabel="BeforePicking"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Simple event to raise when the component is clicked but before the picker activity is started.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ListPicker-GotFocus" initlabel="GotFocus"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates the cursor moved over the button so it is now possible to click it.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="ListPicker-LostFocus" initlabel="LostFocus"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates the cursor moved away from the button so it is now no longer possible to click it.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="ListPicker-Open" decorator="call" initlabel="Open"
            kind="command" color="call">
  <description>
    <text>Opens the picker, as though the user clicked on it.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-ListPicker-Open" decorator="call" initlabel="Open"
            kind="command" color="call">
  <description>
    <text>Opens the picker, as though the user clicked on it.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- LocationSensor Component -->

<BlockGenus name="LocationSensor" initlabel="LocationSensor"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Non-visible component providing location information, including longitude, latitude, altitude (if supported by the device), and address. This can also perform &quot;geocoding&quot;, converting a given address (not necessarily the current one) to a latitude (with the LatitudeFromAddress method) and a longitude (with the LongitudeFromAddress method). In order to function, the component must have its Enabled property set to True, and the device must have location sensing enabled through either wireless networks or GPS satellites (if outside).</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="2"/>
    <LangSpecProperty key="ya-event-1" value="LocationSensor-LocationChanged"/>
    <LangSpecProperty key="ya-event-2" value="LocationSensor-StatusChanged"/>
    <LangSpecProperty key="ya-prop-1" value="Accuracy/read-only-property/number/"/>
    <LangSpecProperty key="ya-prop-2" value="Altitude/read-only-property/number/"/>
    <LangSpecProperty key="ya-prop-3" value="AvailableProviders/read-only-property/list/"/>
    <LangSpecProperty key="ya-prop-4" value="CurrentAddress/read-only-property/text/"/>
    <LangSpecProperty key="ya-prop-5" value="DistanceInterval/read-write-property/number/Determines the minimum distance interval, in meters, that the sensor will try to use for sending out location updates. For example, if this is set to 5, then the sensor will fire a LocationChanged event only after 5 meters have been traversed. However, the sensor does not guarantee that an update will be received at exactly the distance interval. It may take more than 5 meters to fire an event, for instance."/>
    <LangSpecProperty key="ya-prop-6" value="Enabled/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-7" value="HasAccuracy/read-only-property/boolean/"/>
    <LangSpecProperty key="ya-prop-8" value="HasAltitude/read-only-property/boolean/"/>
    <LangSpecProperty key="ya-prop-9" value="HasLongitudeLatitude/read-only-property/boolean/"/>
    <LangSpecProperty key="ya-prop-10" value="Latitude/read-only-property/number/"/>
    <LangSpecProperty key="ya-prop-11" value="Longitude/read-only-property/number/"/>
    <LangSpecProperty key="ya-prop-12" value="ProviderLocked/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-13" value="ProviderName/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-14" value="TimeInterval/read-write-property/number/Determines the minimum time interval, in milliseconds, that the sensor will try to use for sending out location updates. However, location updates will only be received when the location of the phone actually changes, and use of the specified time interval is not guaranteed. For example, if 1000 is used as the time interval, location updates will never be fired sooner than 1000ms, but they may be fired anytime after."/>
    <LangSpecProperty key="ya-method-1" value="LocationSensor-LatitudeFromAddress"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-LocationSensor-LatitudeFromAddress"/>
    <LangSpecProperty key="ya-method-2" value="LocationSensor-LongitudeFromAddress"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-LocationSensor-LongitudeFromAddress"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="LocationSensor-LocationChanged" initlabel="LocationChanged"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that a new location has been detected.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="latitude" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="latitude"/>
    </BlockConnector>
    <BlockConnector label="longitude" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="longitude"/>
    </BlockConnector>
    <BlockConnector label="altitude" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="altitude"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="latitude/argument"/>
    <LangSpecProperty key="socket-allow-2" value="longitude/argument"/>
    <LangSpecProperty key="socket-allow-3" value="altitude/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="LocationSensor-StatusChanged" initlabel="StatusChanged"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that the status of the provider has changed.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="provider" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="provider"/>
    </BlockConnector>
    <BlockConnector label="status" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="status"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="provider/argument"/>
    <LangSpecProperty key="socket-allow-2" value="status/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="LocationSensor-LatitudeFromAddress" decorator="call" initlabel="LatitudeFromAddress"
            kind="function" color="call">
  <description>
    <text>Derives latitude of given address</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="locationName" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="locationName/value"/>
    <LangSpecProperty key="socket-allow-2" value="locationName/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-LocationSensor-LatitudeFromAddress" decorator="call" initlabel="LatitudeFromAddress"
            kind="function" color="call">
  <description>
    <text>Derives latitude of given address</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="locationName" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="locationName/value"/>
    <LangSpecProperty key="socket-allow-4" value="locationName/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="LocationSensor-LongitudeFromAddress" decorator="call" initlabel="LongitudeFromAddress"
            kind="function" color="call">
  <description>
    <text>Derives longitude of given address</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="locationName" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="locationName/value"/>
    <LangSpecProperty key="socket-allow-2" value="locationName/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-LocationSensor-LongitudeFromAddress" decorator="call" initlabel="LongitudeFromAddress"
            kind="function" color="call">
  <description>
    <text>Derives longitude of given address</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="locationName" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="locationName/value"/>
    <LangSpecProperty key="socket-allow-4" value="locationName/text"/>
  </LangSpecProperties>
</BlockGenus>

<!-- NearField Component -->

<BlockGenus name="NearField" initlabel="NearField"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Non-visible component to provide NFC capabilities.For now this component supports the reading and writing of text(if supported by the device) In order to read and write text tags, the component must have its ReadMode property set to True or False respectively.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-event-1" value="NearField-TagRead"/>
    <LangSpecProperty key="ya-event-2" value="NearField-TagWritten"/>
    <LangSpecProperty key="ya-prop-1" value="LastMessage/read-only-property/text/"/>
    <LangSpecProperty key="ya-prop-2" value="ReadMode/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-3" value="TextToWrite/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-4" value="WriteType/read-only-property/number/"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="NearField-TagRead" initlabel="TagRead"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that a new tag has been detected. Currently this is only a plain text tag, as specified in the manifest. See Compiler.java.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="message"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="message/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NearField-TagWritten" initlabel="TagWritten"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event for TagWritten</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Notifier Component -->

<BlockGenus name="Notifier" initlabel="Notifier"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Component that creates alert messages, popup dialogs, and log entries.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="2"/>
    <LangSpecProperty key="ya-event-1" value="Notifier-AfterChoosing"/>
    <LangSpecProperty key="ya-event-2" value="Notifier-AfterTextInput"/>
    <LangSpecProperty key="ya-method-1" value="Notifier-LogError"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-Notifier-LogError"/>
    <LangSpecProperty key="ya-method-2" value="Notifier-LogInfo"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-Notifier-LogInfo"/>
    <LangSpecProperty key="ya-method-3" value="Notifier-LogWarning"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-Notifier-LogWarning"/>
    <LangSpecProperty key="ya-method-4" value="Notifier-ShowAlert"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-Notifier-ShowAlert"/>
    <LangSpecProperty key="ya-method-5" value="Notifier-ShowChooseDialog"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-Notifier-ShowChooseDialog"/>
    <LangSpecProperty key="ya-method-6" value="Notifier-ShowMessageDialog"/>
    <LangSpecProperty key="ya-type-method-6" value="Type-Notifier-ShowMessageDialog"/>
    <LangSpecProperty key="ya-method-7" value="Notifier-ShowTextDialog"/>
    <LangSpecProperty key="ya-type-method-7" value="Type-Notifier-ShowTextDialog"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Notifier-AfterChoosing" initlabel="AfterChoosing"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event after the user has made a selection for ShowChooseDialog.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="choice" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="choice"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="choice/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Notifier-AfterTextInput" initlabel="AfterTextInput"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event raised after the user has responded to ShowTextDialog.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="response" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="response"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="response/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="Notifier-LogError" decorator="call" initlabel="LogError"
            kind="command" color="call">
  <description>
    <text>Log an error message.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="message/value"/>
    <LangSpecProperty key="socket-allow-2" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Notifier-LogError" decorator="call" initlabel="LogError"
            kind="command" color="call">
  <description>
    <text>Log an error message.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="message/value"/>
    <LangSpecProperty key="socket-allow-4" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Notifier-LogInfo" decorator="call" initlabel="LogInfo"
            kind="command" color="call">
  <description>
    <text>Log an information message.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="message/value"/>
    <LangSpecProperty key="socket-allow-2" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Notifier-LogInfo" decorator="call" initlabel="LogInfo"
            kind="command" color="call">
  <description>
    <text>Log an information message.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="message/value"/>
    <LangSpecProperty key="socket-allow-4" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Notifier-LogWarning" decorator="call" initlabel="LogWarning"
            kind="command" color="call">
  <description>
    <text>Log a warning message.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="message/value"/>
    <LangSpecProperty key="socket-allow-2" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Notifier-LogWarning" decorator="call" initlabel="LogWarning"
            kind="command" color="call">
  <description>
    <text>Log a warning message.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="message/value"/>
    <LangSpecProperty key="socket-allow-4" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Notifier-ShowAlert" decorator="call" initlabel="ShowAlert"
            kind="command" color="call">
  <description>
    <text>Display a temporary notification</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="notice" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="notice/value"/>
    <LangSpecProperty key="socket-allow-2" value="notice/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Notifier-ShowAlert" decorator="call" initlabel="ShowAlert"
            kind="command" color="call">
  <description>
    <text>Display a temporary notification</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="notice" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="notice/value"/>
    <LangSpecProperty key="socket-allow-4" value="notice/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Notifier-ShowChooseDialog" decorator="call" initlabel="ShowChooseDialog"
            kind="command" color="call">
  <description>
    <text>Displays an alert with two buttons that have specified text, and additional button marked CANCEL if cancelable is set. Raises the AfterChoosing event when the choice has been made, and returns the text of the button that was pressed.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="title" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="button1Text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="button2Text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="cancelable" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="message/value"/>
    <LangSpecProperty key="socket-allow-2" value="title/value"/>
    <LangSpecProperty key="socket-allow-3" value="button1Text/value"/>
    <LangSpecProperty key="socket-allow-4" value="button2Text/value"/>
    <LangSpecProperty key="socket-allow-5" value="cancelable/value"/>
    <LangSpecProperty key="socket-allow-6" value="message/text"/>
    <LangSpecProperty key="socket-allow-7" value="title/text"/>
    <LangSpecProperty key="socket-allow-8" value="button1Text/text"/>
    <LangSpecProperty key="socket-allow-9" value="button2Text/text"/>
    <LangSpecProperty key="socket-allow-10" value="cancelable/boolean"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Notifier-ShowChooseDialog" decorator="call" initlabel="ShowChooseDialog"
            kind="command" color="call">
  <description>
    <text>Displays an alert with two buttons that have specified text, and additional button marked CANCEL if cancelable is set. Raises the AfterChoosing event when the choice has been made, and returns the text of the button that was pressed.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="title" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="button1Text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="button2Text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="cancelable" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="message/value"/>
    <LangSpecProperty key="socket-allow-4" value="title/value"/>
    <LangSpecProperty key="socket-allow-5" value="button1Text/value"/>
    <LangSpecProperty key="socket-allow-6" value="button2Text/value"/>
    <LangSpecProperty key="socket-allow-7" value="cancelable/value"/>
    <LangSpecProperty key="socket-allow-8" value="message/text"/>
    <LangSpecProperty key="socket-allow-9" value="title/text"/>
    <LangSpecProperty key="socket-allow-10" value="button1Text/text"/>
    <LangSpecProperty key="socket-allow-11" value="button2Text/text"/>
    <LangSpecProperty key="socket-allow-12" value="cancelable/boolean"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Notifier-ShowMessageDialog" decorator="call" initlabel="ShowMessageDialog"
            kind="command" color="call">
  <description>
    <text>Display an alert dialog with a single button</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="title" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="buttonText" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="message/value"/>
    <LangSpecProperty key="socket-allow-2" value="title/value"/>
    <LangSpecProperty key="socket-allow-3" value="buttonText/value"/>
    <LangSpecProperty key="socket-allow-4" value="message/text"/>
    <LangSpecProperty key="socket-allow-5" value="title/text"/>
    <LangSpecProperty key="socket-allow-6" value="buttonText/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Notifier-ShowMessageDialog" decorator="call" initlabel="ShowMessageDialog"
            kind="command" color="call">
  <description>
    <text>Display an alert dialog with a single button</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="title" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="buttonText" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="message/value"/>
    <LangSpecProperty key="socket-allow-4" value="title/value"/>
    <LangSpecProperty key="socket-allow-5" value="buttonText/value"/>
    <LangSpecProperty key="socket-allow-6" value="message/text"/>
    <LangSpecProperty key="socket-allow-7" value="title/text"/>
    <LangSpecProperty key="socket-allow-8" value="buttonText/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Notifier-ShowTextDialog" decorator="call" initlabel="ShowTextDialog"
            kind="command" color="call">
  <description>
    <text>Shows a dialog box in which the user can enter text, after which the AfterTextInput event is raised.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="title" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="cancelable" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="message/value"/>
    <LangSpecProperty key="socket-allow-2" value="title/value"/>
    <LangSpecProperty key="socket-allow-3" value="cancelable/value"/>
    <LangSpecProperty key="socket-allow-4" value="message/text"/>
    <LangSpecProperty key="socket-allow-5" value="title/text"/>
    <LangSpecProperty key="socket-allow-6" value="cancelable/boolean"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Notifier-ShowTextDialog" decorator="call" initlabel="ShowTextDialog"
            kind="command" color="call">
  <description>
    <text>Shows a dialog box in which the user can enter text, after which the AfterTextInput event is raised.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="title" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="cancelable" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="message/value"/>
    <LangSpecProperty key="socket-allow-4" value="title/value"/>
    <LangSpecProperty key="socket-allow-5" value="cancelable/value"/>
    <LangSpecProperty key="socket-allow-6" value="message/text"/>
    <LangSpecProperty key="socket-allow-7" value="title/text"/>
    <LangSpecProperty key="socket-allow-8" value="cancelable/boolean"/>
  </LangSpecProperties>
</BlockGenus>

<!-- NxtColorSensor Component -->

<BlockGenus name="NxtColorSensor" initlabel="NxtColorSensor"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A component that provides a high-level interface to a color sensor on a LEGO MINDSTORMS NXT robot.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-event-1" value="NxtColorSensor-AboveRange"/>
    <LangSpecProperty key="ya-event-2" value="NxtColorSensor-BelowRange"/>
    <LangSpecProperty key="ya-event-3" value="NxtColorSensor-ColorChanged"/>
    <LangSpecProperty key="ya-event-4" value="NxtColorSensor-WithinRange"/>
    <LangSpecProperty key="ya-prop-1" value="AboveRangeEventEnabled/read-write-property/boolean/Whether the AboveRange event should fire when the DetectColor property is set to False and the light level goes above the TopOfRange."/>
    <LangSpecProperty key="ya-prop-2" value="BelowRangeEventEnabled/read-write-property/boolean/Whether the BelowRange event should fire when the DetectColor property is set to False and the light level goes below the BottomOfRange."/>
    <LangSpecProperty key="ya-prop-3" value="BluetoothClient/invisible-property/component/The BluetoothClient component that should be used for communication."/>
    <LangSpecProperty key="ya-prop-4" value="BottomOfRange/read-write-property/number/The bottom of the range used for the BelowRange, WithinRange, and AboveRange events."/>
    <LangSpecProperty key="ya-prop-5" value="ColorChangedEventEnabled/read-write-property/boolean/Whether the ColorChanged event should fire when the DetectColor property is set to True and the detected color changes."/>
    <LangSpecProperty key="ya-prop-6" value="DetectColor/read-write-property/boolean/Whether the sensor should detect color or light. True indicates that the sensor should detect color; False indicates that the sensor should detect light. If the DetectColor property is set to True, the BelowRange, WithinRange, and AboveRange events will not occur and the sensor will not generate color. If the DetectColor property is set to False, the ColorChanged event will not occur."/>
    <LangSpecProperty key="ya-prop-7" value="GenerateColor/read-write-property/number/The color that should generated by the sensor. Only None, Red, Green, or Blue are valid values. The sensor will not generate color when the DetectColor property is set to True."/>
    <LangSpecProperty key="ya-prop-8" value="SensorPort/invisible-property/text/The sensor port that the sensor is connected to."/>
    <LangSpecProperty key="ya-prop-9" value="TopOfRange/read-write-property/number/The top of the range used for the BelowRange, WithinRange, and AboveRange events."/>
    <LangSpecProperty key="ya-prop-10" value="WithinRangeEventEnabled/read-write-property/boolean/Whether the WithinRange event should fire when the DetectColor property is set to False and the light level goes between the BottomOfRange and the TopOfRange."/>
    <LangSpecProperty key="ya-method-1" value="NxtColorSensor-GetColor"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-NxtColorSensor-GetColor"/>
    <LangSpecProperty key="ya-method-2" value="NxtColorSensor-GetLightLevel"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-NxtColorSensor-GetLightLevel"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="NxtColorSensor-AboveRange" initlabel="AboveRange"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Light level has gone above the range. The AboveRange event will not occur if the DetectColor property is set to True or if the AboveRangeEventEnabled property is set to False.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtColorSensor-BelowRange" initlabel="BelowRange"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Light level has gone below the range. The BelowRange event will not occur if the DetectColor property is set to True or if the BelowRangeEventEnabled property is set to False.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtColorSensor-ColorChanged" initlabel="ColorChanged"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Detected color has changed. The ColorChanged event will not occur if the DetectColor property is set to False or if the ColorChangedEventEnabled property is set to False.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="color" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="color"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="color/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtColorSensor-WithinRange" initlabel="WithinRange"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Light level has gone within the range. The WithinRange event will not occur if the DetectColor property is set to True or if the WithinRangeEventEnabled property is set to False.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="NxtColorSensor-GetColor" decorator="call" initlabel="GetColor"
            kind="function" color="call">
  <description>
    <text>Returns the current detected color, or the color None if the color can not be read or if the DetectColor property is set to False.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtColorSensor-GetColor" decorator="call" initlabel="GetColor"
            kind="function" color="call">
  <description>
    <text>Returns the current detected color, or the color None if the color can not be read or if the DetectColor property is set to False.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtColorSensor-GetLightLevel" decorator="call" initlabel="GetLightLevel"
            kind="function" color="call">
  <description>
    <text>Returns the current light level as a value between 0 and 1023, or -1 if the light level can not be read or if the DetectColor property is set to True.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtColorSensor-GetLightLevel" decorator="call" initlabel="GetLightLevel"
            kind="function" color="call">
  <description>
    <text>Returns the current light level as a value between 0 and 1023, or -1 if the light level can not be read or if the DetectColor property is set to True.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- NxtDirectCommands Component -->

<BlockGenus name="NxtDirectCommands" initlabel="NxtDirectCommands"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A component that provides a low-level interface to a LEGO MINDSTORMS NXT robot, with functions to send NXT Direct Commands.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-prop-1" value="BluetoothClient/invisible-property/component/The BluetoothClient component that should be used for communication."/>
    <LangSpecProperty key="ya-method-1" value="NxtDirectCommands-DeleteFile"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-NxtDirectCommands-DeleteFile"/>
    <LangSpecProperty key="ya-method-2" value="NxtDirectCommands-DownloadFile"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-NxtDirectCommands-DownloadFile"/>
    <LangSpecProperty key="ya-method-3" value="NxtDirectCommands-GetBatteryLevel"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-NxtDirectCommands-GetBatteryLevel"/>
    <LangSpecProperty key="ya-method-4" value="NxtDirectCommands-GetBrickName"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-NxtDirectCommands-GetBrickName"/>
    <LangSpecProperty key="ya-method-5" value="NxtDirectCommands-GetCurrentProgramName"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-NxtDirectCommands-GetCurrentProgramName"/>
    <LangSpecProperty key="ya-method-6" value="NxtDirectCommands-GetFirmwareVersion"/>
    <LangSpecProperty key="ya-type-method-6" value="Type-NxtDirectCommands-GetFirmwareVersion"/>
    <LangSpecProperty key="ya-method-7" value="NxtDirectCommands-GetInputValues"/>
    <LangSpecProperty key="ya-type-method-7" value="Type-NxtDirectCommands-GetInputValues"/>
    <LangSpecProperty key="ya-method-8" value="NxtDirectCommands-GetOutputState"/>
    <LangSpecProperty key="ya-type-method-8" value="Type-NxtDirectCommands-GetOutputState"/>
    <LangSpecProperty key="ya-method-9" value="NxtDirectCommands-KeepAlive"/>
    <LangSpecProperty key="ya-type-method-9" value="Type-NxtDirectCommands-KeepAlive"/>
    <LangSpecProperty key="ya-method-10" value="NxtDirectCommands-ListFiles"/>
    <LangSpecProperty key="ya-type-method-10" value="Type-NxtDirectCommands-ListFiles"/>
    <LangSpecProperty key="ya-method-11" value="NxtDirectCommands-LsGetStatus"/>
    <LangSpecProperty key="ya-type-method-11" value="Type-NxtDirectCommands-LsGetStatus"/>
    <LangSpecProperty key="ya-method-12" value="NxtDirectCommands-LsRead"/>
    <LangSpecProperty key="ya-type-method-12" value="Type-NxtDirectCommands-LsRead"/>
    <LangSpecProperty key="ya-method-13" value="NxtDirectCommands-LsWrite"/>
    <LangSpecProperty key="ya-type-method-13" value="Type-NxtDirectCommands-LsWrite"/>
    <LangSpecProperty key="ya-method-14" value="NxtDirectCommands-MessageRead"/>
    <LangSpecProperty key="ya-type-method-14" value="Type-NxtDirectCommands-MessageRead"/>
    <LangSpecProperty key="ya-method-15" value="NxtDirectCommands-MessageWrite"/>
    <LangSpecProperty key="ya-type-method-15" value="Type-NxtDirectCommands-MessageWrite"/>
    <LangSpecProperty key="ya-method-16" value="NxtDirectCommands-PlaySoundFile"/>
    <LangSpecProperty key="ya-type-method-16" value="Type-NxtDirectCommands-PlaySoundFile"/>
    <LangSpecProperty key="ya-method-17" value="NxtDirectCommands-PlayTone"/>
    <LangSpecProperty key="ya-type-method-17" value="Type-NxtDirectCommands-PlayTone"/>
    <LangSpecProperty key="ya-method-18" value="NxtDirectCommands-ResetInputScaledValue"/>
    <LangSpecProperty key="ya-type-method-18" value="Type-NxtDirectCommands-ResetInputScaledValue"/>
    <LangSpecProperty key="ya-method-19" value="NxtDirectCommands-ResetMotorPosition"/>
    <LangSpecProperty key="ya-type-method-19" value="Type-NxtDirectCommands-ResetMotorPosition"/>
    <LangSpecProperty key="ya-method-20" value="NxtDirectCommands-SetBrickName"/>
    <LangSpecProperty key="ya-type-method-20" value="Type-NxtDirectCommands-SetBrickName"/>
    <LangSpecProperty key="ya-method-21" value="NxtDirectCommands-SetInputMode"/>
    <LangSpecProperty key="ya-type-method-21" value="Type-NxtDirectCommands-SetInputMode"/>
    <LangSpecProperty key="ya-method-22" value="NxtDirectCommands-SetOutputState"/>
    <LangSpecProperty key="ya-type-method-22" value="Type-NxtDirectCommands-SetOutputState"/>
    <LangSpecProperty key="ya-method-23" value="NxtDirectCommands-StartProgram"/>
    <LangSpecProperty key="ya-type-method-23" value="Type-NxtDirectCommands-StartProgram"/>
    <LangSpecProperty key="ya-method-24" value="NxtDirectCommands-StopProgram"/>
    <LangSpecProperty key="ya-type-method-24" value="Type-NxtDirectCommands-StopProgram"/>
    <LangSpecProperty key="ya-method-25" value="NxtDirectCommands-StopSoundPlayback"/>
    <LangSpecProperty key="ya-type-method-25" value="Type-NxtDirectCommands-StopSoundPlayback"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="NxtDirectCommands-DeleteFile" decorator="call" initlabel="DeleteFile"
            kind="command" color="call">
  <description>
    <text>Delete a file on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="fileName" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="fileName/value"/>
    <LangSpecProperty key="socket-allow-2" value="fileName/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-DeleteFile" decorator="call" initlabel="DeleteFile"
            kind="command" color="call">
  <description>
    <text>Delete a file on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="fileName" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="fileName/value"/>
    <LangSpecProperty key="socket-allow-4" value="fileName/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-DownloadFile" decorator="call" initlabel="DownloadFile"
            kind="command" color="call">
  <description>
    <text>Download a file to the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="source" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="destination" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="source/value"/>
    <LangSpecProperty key="socket-allow-2" value="destination/value"/>
    <LangSpecProperty key="socket-allow-3" value="source/text"/>
    <LangSpecProperty key="socket-allow-4" value="destination/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-DownloadFile" decorator="call" initlabel="DownloadFile"
            kind="command" color="call">
  <description>
    <text>Download a file to the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="source" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="destination" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="source/value"/>
    <LangSpecProperty key="socket-allow-4" value="destination/value"/>
    <LangSpecProperty key="socket-allow-5" value="source/text"/>
    <LangSpecProperty key="socket-allow-6" value="destination/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-GetBatteryLevel" decorator="call" initlabel="GetBatteryLevel"
            kind="function" color="call">
  <description>
    <text>Get the battery level for the robot. Returns the voltage in millivolts.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-GetBatteryLevel" decorator="call" initlabel="GetBatteryLevel"
            kind="function" color="call">
  <description>
    <text>Get the battery level for the robot. Returns the voltage in millivolts.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-GetBrickName" decorator="call" initlabel="GetBrickName"
            kind="function" color="call">
  <description>
    <text>Get the brick name of the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-GetBrickName" decorator="call" initlabel="GetBrickName"
            kind="function" color="call">
  <description>
    <text>Get the brick name of the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-GetCurrentProgramName" decorator="call" initlabel="GetCurrentProgramName"
            kind="function" color="call">
  <description>
    <text>Get the name of currently running program on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-GetCurrentProgramName" decorator="call" initlabel="GetCurrentProgramName"
            kind="function" color="call">
  <description>
    <text>Get the name of currently running program on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-GetFirmwareVersion" decorator="call" initlabel="GetFirmwareVersion"
            kind="function" color="call">
  <description>
    <text>Get the firmware and protocol version numbers for the robot as a list where the first element is the firmware version number and the second element is the protocol version number.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="list"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-GetFirmwareVersion" decorator="call" initlabel="GetFirmwareVersion"
            kind="function" color="call">
  <description>
    <text>Get the firmware and protocol version numbers for the robot as a list where the first element is the firmware version number and the second element is the protocol version number.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="list"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-GetInputValues" decorator="call" initlabel="GetInputValues"
            kind="function" color="call">
  <description>
    <text>Reads the values of an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="sensorPortLetter" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="list"/>
    <LangSpecProperty key="socket-allow-1" value="sensorPortLetter/value"/>
    <LangSpecProperty key="socket-allow-2" value="sensorPortLetter/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-GetInputValues" decorator="call" initlabel="GetInputValues"
            kind="function" color="call">
  <description>
    <text>Reads the values of an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="sensorPortLetter" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="list"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="sensorPortLetter/value"/>
    <LangSpecProperty key="socket-allow-4" value="sensorPortLetter/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-GetOutputState" decorator="call" initlabel="GetOutputState"
            kind="function" color="call">
  <description>
    <text>Reads the output state of a motor on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="motorPortLetter" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="list"/>
    <LangSpecProperty key="socket-allow-1" value="motorPortLetter/value"/>
    <LangSpecProperty key="socket-allow-2" value="motorPortLetter/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-GetOutputState" decorator="call" initlabel="GetOutputState"
            kind="function" color="call">
  <description>
    <text>Reads the output state of a motor on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="motorPortLetter" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="list"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="motorPortLetter/value"/>
    <LangSpecProperty key="socket-allow-4" value="motorPortLetter/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-KeepAlive" decorator="call" initlabel="KeepAlive"
            kind="function" color="call">
  <description>
    <text>Keep Alive. Returns the current sleep time limit in milliseconds.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-KeepAlive" decorator="call" initlabel="KeepAlive"
            kind="function" color="call">
  <description>
    <text>Keep Alive. Returns the current sleep time limit in milliseconds.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-ListFiles" decorator="call" initlabel="ListFiles"
            kind="function" color="call">
  <description>
    <text>Returns a list containing the names of matching files found on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="wildcard" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="list"/>
    <LangSpecProperty key="socket-allow-1" value="wildcard/value"/>
    <LangSpecProperty key="socket-allow-2" value="wildcard/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-ListFiles" decorator="call" initlabel="ListFiles"
            kind="function" color="call">
  <description>
    <text>Returns a list containing the names of matching files found on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="wildcard" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="list"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="wildcard/value"/>
    <LangSpecProperty key="socket-allow-4" value="wildcard/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-LsGetStatus" decorator="call" initlabel="LsGetStatus"
            kind="function" color="call">
  <description>
    <text>Returns the count of available bytes to read.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="sensorPortLetter" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="sensorPortLetter/value"/>
    <LangSpecProperty key="socket-allow-2" value="sensorPortLetter/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-LsGetStatus" decorator="call" initlabel="LsGetStatus"
            kind="function" color="call">
  <description>
    <text>Returns the count of available bytes to read.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="sensorPortLetter" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="sensorPortLetter/value"/>
    <LangSpecProperty key="socket-allow-4" value="sensorPortLetter/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-LsRead" decorator="call" initlabel="LsRead"
            kind="function" color="call">
  <description>
    <text>Reads unsigned low speed data from an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="sensorPortLetter" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="list"/>
    <LangSpecProperty key="socket-allow-1" value="sensorPortLetter/value"/>
    <LangSpecProperty key="socket-allow-2" value="sensorPortLetter/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-LsRead" decorator="call" initlabel="LsRead"
            kind="function" color="call">
  <description>
    <text>Reads unsigned low speed data from an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="sensorPortLetter" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="list"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="sensorPortLetter/value"/>
    <LangSpecProperty key="socket-allow-4" value="sensorPortLetter/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-LsWrite" decorator="call" initlabel="LsWrite"
            kind="command" color="call">
  <description>
    <text>Writes low speed data to an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="sensorPortLetter" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="rxDataLength" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="sensorPortLetter/value"/>
    <LangSpecProperty key="socket-allow-2" value="list/value"/>
    <LangSpecProperty key="socket-allow-3" value="rxDataLength/value"/>
    <LangSpecProperty key="socket-allow-4" value="sensorPortLetter/text"/>
    <LangSpecProperty key="socket-allow-5" value="list/list"/>
    <LangSpecProperty key="socket-allow-6" value="rxDataLength/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-LsWrite" decorator="call" initlabel="LsWrite"
            kind="command" color="call">
  <description>
    <text>Writes low speed data to an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="sensorPortLetter" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="rxDataLength" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="sensorPortLetter/value"/>
    <LangSpecProperty key="socket-allow-4" value="list/value"/>
    <LangSpecProperty key="socket-allow-5" value="rxDataLength/value"/>
    <LangSpecProperty key="socket-allow-6" value="sensorPortLetter/text"/>
    <LangSpecProperty key="socket-allow-7" value="list/list"/>
    <LangSpecProperty key="socket-allow-8" value="rxDataLength/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-MessageRead" decorator="call" initlabel="MessageRead"
            kind="function" color="call">
  <description>
    <text>Read a message from a mailbox (1-10) on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="mailbox" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="mailbox/value"/>
    <LangSpecProperty key="socket-allow-2" value="mailbox/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-MessageRead" decorator="call" initlabel="MessageRead"
            kind="function" color="call">
  <description>
    <text>Read a message from a mailbox (1-10) on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="mailbox" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="mailbox/value"/>
    <LangSpecProperty key="socket-allow-4" value="mailbox/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-MessageWrite" decorator="call" initlabel="MessageWrite"
            kind="command" color="call">
  <description>
    <text>Write a message to a mailbox (1-10) on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="mailbox" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="mailbox/value"/>
    <LangSpecProperty key="socket-allow-2" value="message/value"/>
    <LangSpecProperty key="socket-allow-3" value="mailbox/number"/>
    <LangSpecProperty key="socket-allow-4" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-MessageWrite" decorator="call" initlabel="MessageWrite"
            kind="command" color="call">
  <description>
    <text>Write a message to a mailbox (1-10) on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="mailbox" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="mailbox/value"/>
    <LangSpecProperty key="socket-allow-4" value="message/value"/>
    <LangSpecProperty key="socket-allow-5" value="mailbox/number"/>
    <LangSpecProperty key="socket-allow-6" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-PlaySoundFile" decorator="call" initlabel="PlaySoundFile"
            kind="command" color="call">
  <description>
    <text>Play a sound file on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="fileName" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="fileName/value"/>
    <LangSpecProperty key="socket-allow-2" value="fileName/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-PlaySoundFile" decorator="call" initlabel="PlaySoundFile"
            kind="command" color="call">
  <description>
    <text>Play a sound file on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="fileName" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="fileName/value"/>
    <LangSpecProperty key="socket-allow-4" value="fileName/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-PlayTone" decorator="call" initlabel="PlayTone"
            kind="command" color="call">
  <description>
    <text>Make the robot play a tone.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="frequencyHz" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="durationMs" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="frequencyHz/value"/>
    <LangSpecProperty key="socket-allow-2" value="durationMs/value"/>
    <LangSpecProperty key="socket-allow-3" value="frequencyHz/number"/>
    <LangSpecProperty key="socket-allow-4" value="durationMs/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-PlayTone" decorator="call" initlabel="PlayTone"
            kind="command" color="call">
  <description>
    <text>Make the robot play a tone.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="frequencyHz" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="durationMs" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="frequencyHz/value"/>
    <LangSpecProperty key="socket-allow-4" value="durationMs/value"/>
    <LangSpecProperty key="socket-allow-5" value="frequencyHz/number"/>
    <LangSpecProperty key="socket-allow-6" value="durationMs/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-ResetInputScaledValue" decorator="call" initlabel="ResetInputScaledValue"
            kind="command" color="call">
  <description>
    <text>Reset the scaled value of an input sensor on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="sensorPortLetter" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="sensorPortLetter/value"/>
    <LangSpecProperty key="socket-allow-2" value="sensorPortLetter/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-ResetInputScaledValue" decorator="call" initlabel="ResetInputScaledValue"
            kind="command" color="call">
  <description>
    <text>Reset the scaled value of an input sensor on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="sensorPortLetter" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="sensorPortLetter/value"/>
    <LangSpecProperty key="socket-allow-4" value="sensorPortLetter/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-ResetMotorPosition" decorator="call" initlabel="ResetMotorPosition"
            kind="command" color="call">
  <description>
    <text>Reset motor position.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="motorPortLetter" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="relative" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="motorPortLetter/value"/>
    <LangSpecProperty key="socket-allow-2" value="relative/value"/>
    <LangSpecProperty key="socket-allow-3" value="motorPortLetter/text"/>
    <LangSpecProperty key="socket-allow-4" value="relative/boolean"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-ResetMotorPosition" decorator="call" initlabel="ResetMotorPosition"
            kind="command" color="call">
  <description>
    <text>Reset motor position.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="motorPortLetter" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="relative" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="motorPortLetter/value"/>
    <LangSpecProperty key="socket-allow-4" value="relative/value"/>
    <LangSpecProperty key="socket-allow-5" value="motorPortLetter/text"/>
    <LangSpecProperty key="socket-allow-6" value="relative/boolean"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-SetBrickName" decorator="call" initlabel="SetBrickName"
            kind="command" color="call">
  <description>
    <text>Set the brick name of the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="name" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="name/value"/>
    <LangSpecProperty key="socket-allow-2" value="name/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-SetBrickName" decorator="call" initlabel="SetBrickName"
            kind="command" color="call">
  <description>
    <text>Set the brick name of the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="name" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="name/value"/>
    <LangSpecProperty key="socket-allow-4" value="name/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-SetInputMode" decorator="call" initlabel="SetInputMode"
            kind="command" color="call">
  <description>
    <text>Configure an input sensor on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="sensorPortLetter" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="sensorType" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="sensorMode" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="sensorPortLetter/value"/>
    <LangSpecProperty key="socket-allow-2" value="sensorType/value"/>
    <LangSpecProperty key="socket-allow-3" value="sensorMode/value"/>
    <LangSpecProperty key="socket-allow-4" value="sensorPortLetter/text"/>
    <LangSpecProperty key="socket-allow-5" value="sensorType/number"/>
    <LangSpecProperty key="socket-allow-6" value="sensorMode/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-SetInputMode" decorator="call" initlabel="SetInputMode"
            kind="command" color="call">
  <description>
    <text>Configure an input sensor on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="sensorPortLetter" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="sensorType" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="sensorMode" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="sensorPortLetter/value"/>
    <LangSpecProperty key="socket-allow-4" value="sensorType/value"/>
    <LangSpecProperty key="socket-allow-5" value="sensorMode/value"/>
    <LangSpecProperty key="socket-allow-6" value="sensorPortLetter/text"/>
    <LangSpecProperty key="socket-allow-7" value="sensorType/number"/>
    <LangSpecProperty key="socket-allow-8" value="sensorMode/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-SetOutputState" decorator="call" initlabel="SetOutputState"
            kind="command" color="call">
  <description>
    <text>Sets the output state of a motor on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="motorPortLetter" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="power" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="mode" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="regulationMode" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="turnRatio" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="runState" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="tachoLimit" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="motorPortLetter/value"/>
    <LangSpecProperty key="socket-allow-2" value="power/value"/>
    <LangSpecProperty key="socket-allow-3" value="mode/value"/>
    <LangSpecProperty key="socket-allow-4" value="regulationMode/value"/>
    <LangSpecProperty key="socket-allow-5" value="turnRatio/value"/>
    <LangSpecProperty key="socket-allow-6" value="runState/value"/>
    <LangSpecProperty key="socket-allow-7" value="tachoLimit/value"/>
    <LangSpecProperty key="socket-allow-8" value="motorPortLetter/text"/>
    <LangSpecProperty key="socket-allow-9" value="power/number"/>
    <LangSpecProperty key="socket-allow-10" value="mode/number"/>
    <LangSpecProperty key="socket-allow-11" value="regulationMode/number"/>
    <LangSpecProperty key="socket-allow-12" value="turnRatio/number"/>
    <LangSpecProperty key="socket-allow-13" value="runState/number"/>
    <LangSpecProperty key="socket-allow-14" value="tachoLimit/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-SetOutputState" decorator="call" initlabel="SetOutputState"
            kind="command" color="call">
  <description>
    <text>Sets the output state of a motor on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="motorPortLetter" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="power" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="mode" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="regulationMode" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="turnRatio" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="runState" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="tachoLimit" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="motorPortLetter/value"/>
    <LangSpecProperty key="socket-allow-4" value="power/value"/>
    <LangSpecProperty key="socket-allow-5" value="mode/value"/>
    <LangSpecProperty key="socket-allow-6" value="regulationMode/value"/>
    <LangSpecProperty key="socket-allow-7" value="turnRatio/value"/>
    <LangSpecProperty key="socket-allow-8" value="runState/value"/>
    <LangSpecProperty key="socket-allow-9" value="tachoLimit/value"/>
    <LangSpecProperty key="socket-allow-10" value="motorPortLetter/text"/>
    <LangSpecProperty key="socket-allow-11" value="power/number"/>
    <LangSpecProperty key="socket-allow-12" value="mode/number"/>
    <LangSpecProperty key="socket-allow-13" value="regulationMode/number"/>
    <LangSpecProperty key="socket-allow-14" value="turnRatio/number"/>
    <LangSpecProperty key="socket-allow-15" value="runState/number"/>
    <LangSpecProperty key="socket-allow-16" value="tachoLimit/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-StartProgram" decorator="call" initlabel="StartProgram"
            kind="command" color="call">
  <description>
    <text>Start execution of a previously downloaded program on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="programName" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="programName/value"/>
    <LangSpecProperty key="socket-allow-2" value="programName/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-StartProgram" decorator="call" initlabel="StartProgram"
            kind="command" color="call">
  <description>
    <text>Start execution of a previously downloaded program on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="programName" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="programName/value"/>
    <LangSpecProperty key="socket-allow-4" value="programName/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-StopProgram" decorator="call" initlabel="StopProgram"
            kind="command" color="call">
  <description>
    <text>Stop execution of the currently running program on the robot.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-StopProgram" decorator="call" initlabel="StopProgram"
            kind="command" color="call">
  <description>
    <text>Stop execution of the currently running program on the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDirectCommands-StopSoundPlayback" decorator="call" initlabel="StopSoundPlayback"
            kind="command" color="call">
  <description>
    <text>Stop sound playback.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDirectCommands-StopSoundPlayback" decorator="call" initlabel="StopSoundPlayback"
            kind="command" color="call">
  <description>
    <text>Stop sound playback.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- NxtDrive Component -->

<BlockGenus name="NxtDrive" initlabel="NxtDrive"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A component that provides a high-level interface to a LEGO MINDSTORMS NXT robot, with functions that can move and turn the robot.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-prop-1" value="BluetoothClient/invisible-property/component/The BluetoothClient component that should be used for communication."/>
    <LangSpecProperty key="ya-prop-2" value="DriveMotors/invisible-property/text/The motor ports that are used for driving: the left wheel&apos;s motor port followed by the right wheel&apos;s motor port."/>
    <LangSpecProperty key="ya-prop-3" value="StopBeforeDisconnect/read-write-property/boolean/Whether to stop the drive motors before disconnecting."/>
    <LangSpecProperty key="ya-prop-4" value="WheelDiameter/invisible-property/number/The diameter of the wheels used for driving."/>
    <LangSpecProperty key="ya-method-1" value="NxtDrive-MoveBackward"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-NxtDrive-MoveBackward"/>
    <LangSpecProperty key="ya-method-2" value="NxtDrive-MoveBackwardIndefinitely"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-NxtDrive-MoveBackwardIndefinitely"/>
    <LangSpecProperty key="ya-method-3" value="NxtDrive-MoveForward"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-NxtDrive-MoveForward"/>
    <LangSpecProperty key="ya-method-4" value="NxtDrive-MoveForwardIndefinitely"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-NxtDrive-MoveForwardIndefinitely"/>
    <LangSpecProperty key="ya-method-5" value="NxtDrive-Stop"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-NxtDrive-Stop"/>
    <LangSpecProperty key="ya-method-6" value="NxtDrive-TurnClockwiseIndefinitely"/>
    <LangSpecProperty key="ya-type-method-6" value="Type-NxtDrive-TurnClockwiseIndefinitely"/>
    <LangSpecProperty key="ya-method-7" value="NxtDrive-TurnCounterClockwiseIndefinitely"/>
    <LangSpecProperty key="ya-type-method-7" value="Type-NxtDrive-TurnCounterClockwiseIndefinitely"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="NxtDrive-MoveBackward" decorator="call" initlabel="MoveBackward"
            kind="command" color="call">
  <description>
    <text>Move the robot backward the given distance, with the specified percentage of maximum power, by powering both drive motors backward.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="power" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="distance" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="power/value"/>
    <LangSpecProperty key="socket-allow-2" value="distance/value"/>
    <LangSpecProperty key="socket-allow-3" value="power/number"/>
    <LangSpecProperty key="socket-allow-4" value="distance/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDrive-MoveBackward" decorator="call" initlabel="MoveBackward"
            kind="command" color="call">
  <description>
    <text>Move the robot backward the given distance, with the specified percentage of maximum power, by powering both drive motors backward.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="power" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="distance" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="power/value"/>
    <LangSpecProperty key="socket-allow-4" value="distance/value"/>
    <LangSpecProperty key="socket-allow-5" value="power/number"/>
    <LangSpecProperty key="socket-allow-6" value="distance/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDrive-MoveBackwardIndefinitely" decorator="call" initlabel="MoveBackwardIndefinitely"
            kind="command" color="call">
  <description>
    <text>Move the robot backward indefinitely, with the specified percentage of maximum power, by powering both drive motors backward.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="power" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="power/value"/>
    <LangSpecProperty key="socket-allow-2" value="power/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDrive-MoveBackwardIndefinitely" decorator="call" initlabel="MoveBackwardIndefinitely"
            kind="command" color="call">
  <description>
    <text>Move the robot backward indefinitely, with the specified percentage of maximum power, by powering both drive motors backward.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="power" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="power/value"/>
    <LangSpecProperty key="socket-allow-4" value="power/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDrive-MoveForward" decorator="call" initlabel="MoveForward"
            kind="command" color="call">
  <description>
    <text>Move the robot forward the given distance, with the specified percentage of maximum power, by powering both drive motors forward.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="power" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="distance" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="power/value"/>
    <LangSpecProperty key="socket-allow-2" value="distance/value"/>
    <LangSpecProperty key="socket-allow-3" value="power/number"/>
    <LangSpecProperty key="socket-allow-4" value="distance/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDrive-MoveForward" decorator="call" initlabel="MoveForward"
            kind="command" color="call">
  <description>
    <text>Move the robot forward the given distance, with the specified percentage of maximum power, by powering both drive motors forward.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="power" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="distance" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="power/value"/>
    <LangSpecProperty key="socket-allow-4" value="distance/value"/>
    <LangSpecProperty key="socket-allow-5" value="power/number"/>
    <LangSpecProperty key="socket-allow-6" value="distance/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDrive-MoveForwardIndefinitely" decorator="call" initlabel="MoveForwardIndefinitely"
            kind="command" color="call">
  <description>
    <text>Move the robot forward indefinitely, with the specified percentage of maximum power, by powering both drive motors forward.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="power" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="power/value"/>
    <LangSpecProperty key="socket-allow-2" value="power/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDrive-MoveForwardIndefinitely" decorator="call" initlabel="MoveForwardIndefinitely"
            kind="command" color="call">
  <description>
    <text>Move the robot forward indefinitely, with the specified percentage of maximum power, by powering both drive motors forward.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="power" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="power/value"/>
    <LangSpecProperty key="socket-allow-4" value="power/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDrive-Stop" decorator="call" initlabel="Stop"
            kind="command" color="call">
  <description>
    <text>Stop the drive motors of the robot.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDrive-Stop" decorator="call" initlabel="Stop"
            kind="command" color="call">
  <description>
    <text>Stop the drive motors of the robot.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDrive-TurnClockwiseIndefinitely" decorator="call" initlabel="TurnClockwiseIndefinitely"
            kind="command" color="call">
  <description>
    <text>Turn the robot clockwise indefinitely, with the specified percentage of maximum power, by powering the left drive motor forward and the right drive motor backward.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="power" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="power/value"/>
    <LangSpecProperty key="socket-allow-2" value="power/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDrive-TurnClockwiseIndefinitely" decorator="call" initlabel="TurnClockwiseIndefinitely"
            kind="command" color="call">
  <description>
    <text>Turn the robot clockwise indefinitely, with the specified percentage of maximum power, by powering the left drive motor forward and the right drive motor backward.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="power" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="power/value"/>
    <LangSpecProperty key="socket-allow-4" value="power/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtDrive-TurnCounterClockwiseIndefinitely" decorator="call" initlabel="TurnCounterClockwiseIndefinitely"
            kind="command" color="call">
  <description>
    <text>Turn the robot counterclockwise indefinitely, with the specified percentage of maximum power, by powering the right drive motor forward and the left drive motor backward.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="power" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="power/value"/>
    <LangSpecProperty key="socket-allow-2" value="power/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtDrive-TurnCounterClockwiseIndefinitely" decorator="call" initlabel="TurnCounterClockwiseIndefinitely"
            kind="command" color="call">
  <description>
    <text>Turn the robot counterclockwise indefinitely, with the specified percentage of maximum power, by powering the right drive motor forward and the left drive motor backward.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="power" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="power/value"/>
    <LangSpecProperty key="socket-allow-4" value="power/number"/>
  </LangSpecProperties>
</BlockGenus>

<!-- NxtLightSensor Component -->

<BlockGenus name="NxtLightSensor" initlabel="NxtLightSensor"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A component that provides a high-level interface to a light sensor on a LEGO MINDSTORMS NXT robot.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-event-1" value="NxtLightSensor-AboveRange"/>
    <LangSpecProperty key="ya-event-2" value="NxtLightSensor-BelowRange"/>
    <LangSpecProperty key="ya-event-3" value="NxtLightSensor-WithinRange"/>
    <LangSpecProperty key="ya-prop-1" value="AboveRangeEventEnabled/read-write-property/boolean/Whether the AboveRange event should fire when the light level goes above the TopOfRange."/>
    <LangSpecProperty key="ya-prop-2" value="BelowRangeEventEnabled/read-write-property/boolean/Whether the BelowRange event should fire when the light level goes below the BottomOfRange."/>
    <LangSpecProperty key="ya-prop-3" value="BluetoothClient/invisible-property/component/The BluetoothClient component that should be used for communication."/>
    <LangSpecProperty key="ya-prop-4" value="BottomOfRange/read-write-property/number/The bottom of the range used for the BelowRange, WithinRange, and AboveRange events."/>
    <LangSpecProperty key="ya-prop-5" value="GenerateLight/read-write-property/boolean/Whether the light sensor should generate light."/>
    <LangSpecProperty key="ya-prop-6" value="SensorPort/invisible-property/text/The sensor port that the sensor is connected to."/>
    <LangSpecProperty key="ya-prop-7" value="TopOfRange/read-write-property/number/The top of the range used for the BelowRange, WithinRange, and AboveRange events."/>
    <LangSpecProperty key="ya-prop-8" value="WithinRangeEventEnabled/read-write-property/boolean/Whether the WithinRange event should fire when the light level goes between the BottomOfRange and the TopOfRange."/>
    <LangSpecProperty key="ya-method-1" value="NxtLightSensor-GetLightLevel"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-NxtLightSensor-GetLightLevel"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="NxtLightSensor-AboveRange" initlabel="AboveRange"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Light level has gone above the range.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtLightSensor-BelowRange" initlabel="BelowRange"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Light level has gone below the range.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtLightSensor-WithinRange" initlabel="WithinRange"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Light level has gone within the range.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="NxtLightSensor-GetLightLevel" decorator="call" initlabel="GetLightLevel"
            kind="function" color="call">
  <description>
    <text>Returns the current light level as a value between 0 and 1023, or -1 if the light level can not be read.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtLightSensor-GetLightLevel" decorator="call" initlabel="GetLightLevel"
            kind="function" color="call">
  <description>
    <text>Returns the current light level as a value between 0 and 1023, or -1 if the light level can not be read.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- NxtSoundSensor Component -->

<BlockGenus name="NxtSoundSensor" initlabel="NxtSoundSensor"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A component that provides a high-level interface to a sound sensor on a LEGO MINDSTORMS NXT robot.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-event-1" value="NxtSoundSensor-AboveRange"/>
    <LangSpecProperty key="ya-event-2" value="NxtSoundSensor-BelowRange"/>
    <LangSpecProperty key="ya-event-3" value="NxtSoundSensor-WithinRange"/>
    <LangSpecProperty key="ya-prop-1" value="AboveRangeEventEnabled/read-write-property/boolean/Whether the AboveRange event should fire when the sound level goes above the TopOfRange."/>
    <LangSpecProperty key="ya-prop-2" value="BelowRangeEventEnabled/read-write-property/boolean/Whether the BelowRange event should fire when the sound level goes below the BottomOfRange."/>
    <LangSpecProperty key="ya-prop-3" value="BluetoothClient/invisible-property/component/The BluetoothClient component that should be used for communication."/>
    <LangSpecProperty key="ya-prop-4" value="BottomOfRange/read-write-property/number/The bottom of the range used for the BelowRange, WithinRange, and AboveRange events."/>
    <LangSpecProperty key="ya-prop-5" value="SensorPort/invisible-property/text/The sensor port that the sensor is connected to."/>
    <LangSpecProperty key="ya-prop-6" value="TopOfRange/read-write-property/number/The top of the range used for the BelowRange, WithinRange, and AboveRange events."/>
    <LangSpecProperty key="ya-prop-7" value="WithinRangeEventEnabled/read-write-property/boolean/Whether the WithinRange event should fire when the sound level goes between the BottomOfRange and the TopOfRange."/>
    <LangSpecProperty key="ya-method-1" value="NxtSoundSensor-GetSoundLevel"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-NxtSoundSensor-GetSoundLevel"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="NxtSoundSensor-AboveRange" initlabel="AboveRange"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Sound level has gone above the range.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtSoundSensor-BelowRange" initlabel="BelowRange"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Sound level has gone below the range.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtSoundSensor-WithinRange" initlabel="WithinRange"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Sound level has gone within the range.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="NxtSoundSensor-GetSoundLevel" decorator="call" initlabel="GetSoundLevel"
            kind="function" color="call">
  <description>
    <text>Returns the current sound level as a value between 0 and 1023, or -1 if the sound level can not be read.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtSoundSensor-GetSoundLevel" decorator="call" initlabel="GetSoundLevel"
            kind="function" color="call">
  <description>
    <text>Returns the current sound level as a value between 0 and 1023, or -1 if the sound level can not be read.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- NxtTouchSensor Component -->

<BlockGenus name="NxtTouchSensor" initlabel="NxtTouchSensor"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A component that provides a high-level interface to a touch sensor on a LEGO MINDSTORMS NXT robot.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-event-1" value="NxtTouchSensor-Pressed"/>
    <LangSpecProperty key="ya-event-2" value="NxtTouchSensor-Released"/>
    <LangSpecProperty key="ya-prop-1" value="BluetoothClient/invisible-property/component/The BluetoothClient component that should be used for communication."/>
    <LangSpecProperty key="ya-prop-2" value="PressedEventEnabled/read-write-property/boolean/Whether the Pressed event should fire when the touch sensor is pressed."/>
    <LangSpecProperty key="ya-prop-3" value="ReleasedEventEnabled/read-write-property/boolean/Whether the Released event should fire when the touch sensor is released."/>
    <LangSpecProperty key="ya-prop-4" value="SensorPort/invisible-property/text/The sensor port that the sensor is connected to."/>
    <LangSpecProperty key="ya-method-1" value="NxtTouchSensor-IsPressed"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-NxtTouchSensor-IsPressed"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="NxtTouchSensor-Pressed" initlabel="Pressed"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Touch sensor has been pressed.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtTouchSensor-Released" initlabel="Released"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Touch sensor has been released.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="NxtTouchSensor-IsPressed" decorator="call" initlabel="IsPressed"
            kind="function" color="call">
  <description>
    <text>Returns true if the touch sensor is pressed.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="boolean"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtTouchSensor-IsPressed" decorator="call" initlabel="IsPressed"
            kind="function" color="call">
  <description>
    <text>Returns true if the touch sensor is pressed.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="boolean"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- NxtUltrasonicSensor Component -->

<BlockGenus name="NxtUltrasonicSensor" initlabel="NxtUltrasonicSensor"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A component that provides a high-level interface to an ultrasonic sensor on a LEGO MINDSTORMS NXT robot.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-event-1" value="NxtUltrasonicSensor-AboveRange"/>
    <LangSpecProperty key="ya-event-2" value="NxtUltrasonicSensor-BelowRange"/>
    <LangSpecProperty key="ya-event-3" value="NxtUltrasonicSensor-WithinRange"/>
    <LangSpecProperty key="ya-prop-1" value="AboveRangeEventEnabled/read-write-property/boolean/Whether the AboveRange event should fire when the distance goes above the TopOfRange."/>
    <LangSpecProperty key="ya-prop-2" value="BelowRangeEventEnabled/read-write-property/boolean/Whether the BelowRange event should fire when the distance goes below the BottomOfRange."/>
    <LangSpecProperty key="ya-prop-3" value="BluetoothClient/invisible-property/component/The BluetoothClient component that should be used for communication."/>
    <LangSpecProperty key="ya-prop-4" value="BottomOfRange/read-write-property/number/The bottom of the range used for the BelowRange, WithinRange, and AboveRange events."/>
    <LangSpecProperty key="ya-prop-5" value="SensorPort/invisible-property/text/The sensor port that the sensor is connected to."/>
    <LangSpecProperty key="ya-prop-6" value="TopOfRange/read-write-property/number/The top of the range used for the BelowRange, WithinRange, and AboveRange events."/>
    <LangSpecProperty key="ya-prop-7" value="WithinRangeEventEnabled/read-write-property/boolean/Whether the WithinRange event should fire when the distance goes between the BottomOfRange and the TopOfRange."/>
    <LangSpecProperty key="ya-method-1" value="NxtUltrasonicSensor-GetDistance"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-NxtUltrasonicSensor-GetDistance"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="NxtUltrasonicSensor-AboveRange" initlabel="AboveRange"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Distance has gone above the range.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtUltrasonicSensor-BelowRange" initlabel="BelowRange"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Distance has gone below the range.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="NxtUltrasonicSensor-WithinRange" initlabel="WithinRange"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Distance has gone within the range.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="NxtUltrasonicSensor-GetDistance" decorator="call" initlabel="GetDistance"
            kind="function" color="call">
  <description>
    <text>Returns the current distance in centimeters as a value between 0 and 254, or -1 if the distance can not be read.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-NxtUltrasonicSensor-GetDistance" decorator="call" initlabel="GetDistance"
            kind="function" color="call">
  <description>
    <text>Returns the current distance in centimeters as a value between 0 and 254, or -1 if the distance can not be read.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- OrientationSensor Component -->

<BlockGenus name="OrientationSensor" initlabel="OrientationSensor"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Non-visible component providing information about the device&apos;s physical orientation in three dimensions: - Roll: 0 degrees when the device is level, increases to 90 degrees as the device is tilted up on its left side, and decreases to -90 degrees when the device is tilted up on its right side. - Pitch: 0 degrees when the device is level, up to 90 degrees as the device is tilted so its top is pointing down, up to 180 degrees as it gets turned over. Similarly, as the device is tilted so its bottom points down, pitch decreases to -90 degrees, then further decreases to -180 degrees as it gets turned all the way over. - Azimuth: 0 degrees when the top of the device is pointing north, 90 degrees when it is pointing east, 180 degrees when it is pointing south, 270 degrees when it is pointing west, etc. These measurements assume that the device itself is not moving.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="2"/>
    <LangSpecProperty key="ya-event-1" value="OrientationSensor-OrientationChanged"/>
    <LangSpecProperty key="ya-prop-1" value="Angle/read-only-property/number/"/>
    <LangSpecProperty key="ya-prop-2" value="Available/read-only-property/boolean/"/>
    <LangSpecProperty key="ya-prop-3" value="Azimuth/read-only-property/number/"/>
    <LangSpecProperty key="ya-prop-4" value="Enabled/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-5" value="Magnitude/read-only-property/number/"/>
    <LangSpecProperty key="ya-prop-6" value="Pitch/read-only-property/number/"/>
    <LangSpecProperty key="ya-prop-7" value="Roll/read-only-property/number/"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="OrientationSensor-OrientationChanged" initlabel="OrientationChanged"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Default OrientationChanged event handler. This event is signalled when the device&apos;s orientation has changed. It reports the new values of azimuth, pich, and roll, and it also sets the Azimuth, Pitch, and roll properties. Azimuth is the compass heading in degrees, pitch indicates how the device is tilted from top to bottom, and roll indicates how much the device is tilted from side to side.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="azimuth" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="azimuth"/>
    </BlockConnector>
    <BlockConnector label="pitch" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="pitch"/>
    </BlockConnector>
    <BlockConnector label="roll" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="roll"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="azimuth/argument"/>
    <LangSpecProperty key="socket-allow-2" value="pitch/argument"/>
    <LangSpecProperty key="socket-allow-3" value="roll/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- PasswordTextBox Component -->

<BlockGenus name="PasswordTextBox" initlabel="PasswordTextBox"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A box for entering passwords. This is the same as the ordinary TextBox component except this does not display the characters typed by the user. The value of the text in the box can be found or set through the Text property. If blank, the Hint property, which appears as faint text in the box, can provide the user with guidance as to what to type. Text boxes are usually used with the Button component, with the user clicking on the button when text entry is complete.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="2"/>
    <LangSpecProperty key="ya-event-1" value="PasswordTextBox-GotFocus"/>
    <LangSpecProperty key="ya-event-2" value="PasswordTextBox-LostFocus"/>
    <LangSpecProperty key="ya-prop-1" value="BackgroundColor/read-write-property/number/The background color of the input box. You can choose a color by name in the Designer or in the Blocks Editor. The default background color is &apos;default&apos; (shaded 3-D look)."/>
    <LangSpecProperty key="ya-prop-2" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-3" value="Enabled/read-write-property/boolean/Whether the user can enter text into this input box. By default, this is true."/>
    <LangSpecProperty key="ya-prop-4" value="FontBold/invisible-property/boolean/Whether the font for the text should be bold. By default, it is not."/>
    <LangSpecProperty key="ya-prop-5" value="FontItalic/invisible-property/boolean/Whether the text should appear in italics. By default, it does not."/>
    <LangSpecProperty key="ya-prop-6" value="FontSize/read-write-property/number/The font size for the text. By default, it is 14.0 points."/>
    <LangSpecProperty key="ya-prop-7" value="FontTypeface/invisible-property/number/The font for the text. The value can be changed in the Designer."/>
    <LangSpecProperty key="ya-prop-8" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-9" value="Hint/read-write-property/text/Text that should appear faintly in the input box to provide a hint as to what the user should enter. This can only be seen if the Text property is empty."/>
    <LangSpecProperty key="ya-prop-10" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-11" value="Text/read-write-property/text/The text in the input box, which can be set by the programmer in the Designer or Blocks Editor, or it can be entered by the user (unless the Enabled property is false)."/>
    <LangSpecProperty key="ya-prop-12" value="TextAlignment/invisible-property/number/Whether the text should be left justified, centered, or right justified. By default, text is left justified."/>
    <LangSpecProperty key="ya-prop-13" value="TextColor/read-write-property/number/The color for the text. You can choose a color by name in the Designer or in the Blocks Editor. The default text color is black."/>
    <LangSpecProperty key="ya-prop-14" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-15" value="Width/read-write-property/number/"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="PasswordTextBox-GotFocus" initlabel="GotFocus"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event raised when this component is selected for input, such as by the user touching it.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="PasswordTextBox-LostFocus" initlabel="LostFocus"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event raised when this component is no longer selected for input, such as if the user touches a different text box.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Pedometer Component -->

<BlockGenus name="Pedometer" initlabel="Pedometer"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Component that can count steps.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-event-1" value="Pedometer-CalibrationFailed"/>
    <LangSpecProperty key="ya-event-2" value="Pedometer-GPSAvailable"/>
    <LangSpecProperty key="ya-event-3" value="Pedometer-GPSLost"/>
    <LangSpecProperty key="ya-event-4" value="Pedometer-SimpleStep"/>
    <LangSpecProperty key="ya-event-5" value="Pedometer-StartedMoving"/>
    <LangSpecProperty key="ya-event-6" value="Pedometer-StoppedMoving"/>
    <LangSpecProperty key="ya-event-7" value="Pedometer-WalkStep"/>
    <LangSpecProperty key="ya-prop-1" value="CalibrateStrideLength/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-2" value="Distance/read-only-property/number/"/>
    <LangSpecProperty key="ya-prop-3" value="ElapsedTime/read-only-property/number/"/>
    <LangSpecProperty key="ya-prop-4" value="Moving/read-only-property/boolean/"/>
    <LangSpecProperty key="ya-prop-5" value="StopDetectionTimeout/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-6" value="StrideLength/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-7" value="UseGPS/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-method-1" value="Pedometer-Pause"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-Pedometer-Pause"/>
    <LangSpecProperty key="ya-method-2" value="Pedometer-Reset"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-Pedometer-Reset"/>
    <LangSpecProperty key="ya-method-3" value="Pedometer-Resume"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-Pedometer-Resume"/>
    <LangSpecProperty key="ya-method-4" value="Pedometer-Save"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-Pedometer-Save"/>
    <LangSpecProperty key="ya-method-5" value="Pedometer-Start"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-Pedometer-Start"/>
    <LangSpecProperty key="ya-method-6" value="Pedometer-Stop"/>
    <LangSpecProperty key="ya-type-method-6" value="Type-Pedometer-Stop"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Pedometer-CalibrationFailed" initlabel="CalibrationFailed"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that the calibration has failed. This could happen is the GPS is not active, or if the client has set UseGps to false.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Pedometer-GPSAvailable" initlabel="GPSAvailable"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that the GPS is now available to use for distance measurement, and that calibration is now possible.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Pedometer-GPSLost" initlabel="GPSLost"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that the GPS signal is lost.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Pedometer-SimpleStep" initlabel="SimpleStep"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>This event is run when a raw step is detected</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="simpleSteps" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="simpleSteps"/>
    </BlockConnector>
    <BlockConnector label="distance" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="distance"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="simpleSteps/argument"/>
    <LangSpecProperty key="socket-allow-2" value="distance/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Pedometer-StartedMoving" initlabel="StartedMoving"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that the device is moving.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Pedometer-StoppedMoving" initlabel="StoppedMoving"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that the device has stopped.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Pedometer-WalkStep" initlabel="WalkStep"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>This event is run when a walking step is detected</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="walkSteps" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="walkSteps"/>
    </BlockConnector>
    <BlockConnector label="distance" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="distance"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="walkSteps/argument"/>
    <LangSpecProperty key="socket-allow-2" value="distance/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="Pedometer-Pause" decorator="call" initlabel="Pause"
            kind="command" color="call">
  <description>
    <text>Pauses the counting of steps.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Pedometer-Pause" decorator="call" initlabel="Pause"
            kind="command" color="call">
  <description>
    <text>Pauses the counting of steps.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Pedometer-Reset" decorator="call" initlabel="Reset"
            kind="command" color="call">
  <description>
    <text>Resets the step count, distance, and clock.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Pedometer-Reset" decorator="call" initlabel="Reset"
            kind="command" color="call">
  <description>
    <text>Resets the step count, distance, and clock.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Pedometer-Resume" decorator="call" initlabel="Resume"
            kind="command" color="call">
  <description>
    <text>Resumes the counting of steps.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Pedometer-Resume" decorator="call" initlabel="Resume"
            kind="command" color="call">
  <description>
    <text>Resumes the counting of steps.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Pedometer-Save" decorator="call" initlabel="Save"
            kind="command" color="call">
  <description>
    <text>Saves the pedometer state to the phone</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Pedometer-Save" decorator="call" initlabel="Save"
            kind="command" color="call">
  <description>
    <text>Saves the pedometer state to the phone</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Pedometer-Start" decorator="call" initlabel="Start"
            kind="command" color="call">
  <description>
    <text>Starts the pedometer.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Pedometer-Start" decorator="call" initlabel="Start"
            kind="command" color="call">
  <description>
    <text>Starts the pedometer.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Pedometer-Stop" decorator="call" initlabel="Stop"
            kind="command" color="call">
  <description>
    <text>Stops the pedometer.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Pedometer-Stop" decorator="call" initlabel="Stop"
            kind="command" color="call">
  <description>
    <text>Stops the pedometer.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- PhoneCall Component -->

<BlockGenus name="PhoneCall" initlabel="PhoneCall"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A non-visible component that makes a phone call to the number specified in the PhoneNumber property, which can be set either in the Designer or Blocks Editor. The component has a MakePhoneCall method, enabling the program to launch a phone call. Often, this component is used with the ContactPicker component, which lets the user select a contact from the ones stored on the phone and sets the PhoneNumber property to the contact&apos;s phone number. To directly specify the phone number (e.g., 650-555-1212), set the PhoneNumber property to a Text with the specified digits (e.g., &quot;6505551212&quot;). Dashes, dots, and parentheses may be included (e.g., &quot;(650)-555-1212&quot;) but will be ignored; spaces may not be included.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-prop-1" value="PhoneNumber/read-write-property/text/"/>
    <LangSpecProperty key="ya-method-1" value="PhoneCall-MakePhoneCall"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-PhoneCall-MakePhoneCall"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="PhoneCall-MakePhoneCall" decorator="call" initlabel="MakePhoneCall"
            kind="command" color="call">
  <description>
    <text>Makes a phone call using the number in the PhoneNumber property.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-PhoneCall-MakePhoneCall" decorator="call" initlabel="MakePhoneCall"
            kind="command" color="call">
  <description>
    <text>Makes a phone call using the number in the PhoneNumber property.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- PhoneNumberPicker Component -->

<BlockGenus name="PhoneNumberPicker" initlabel="PhoneNumberPicker"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A button that, when clicked on, displays a list of the contacts&apos; phone numbers to choose among. After the user has made a selection, the following properties will be set to information about the chosen contact: - ContactName: the contact&apos;s name - PhoneNumber: the contact&apos;s phone number - EmailAddress: the contact&apos;s email address - Picture: the name of the file containing the contact&apos;s image, which can be used as a Picture property value for the Image or ImageSprite component. Other properties affect the appearance of the button (TextAlignment, BackgroundColor, etc.) and whether it can be clicked on (Enabled). Picking is not supported on all phones. If it fails, this component will show a notification. This default error behavior can be overridden with the Screen.ErrorOccurred event handler.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="4"/>
    <LangSpecProperty key="ya-event-1" value="PhoneNumberPicker-AfterPicking"/>
    <LangSpecProperty key="ya-event-2" value="PhoneNumberPicker-BeforePicking"/>
    <LangSpecProperty key="ya-event-3" value="PhoneNumberPicker-GotFocus"/>
    <LangSpecProperty key="ya-event-4" value="PhoneNumberPicker-LostFocus"/>
    <LangSpecProperty key="ya-prop-1" value="BackgroundColor/read-write-property/number/Returns the button&apos;s background color"/>
    <LangSpecProperty key="ya-prop-2" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-3" value="ContactName/read-only-property/text/"/>
    <LangSpecProperty key="ya-prop-4" value="EmailAddress/read-only-property/text/"/>
    <LangSpecProperty key="ya-prop-5" value="Enabled/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-6" value="FontBold/invisible-property/boolean/"/>
    <LangSpecProperty key="ya-prop-7" value="FontItalic/invisible-property/boolean/"/>
    <LangSpecProperty key="ya-prop-8" value="FontSize/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-9" value="FontTypeface/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-10" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-11" value="Image/read-write-property/text/Specifies the path of the button&apos;s image. If there is both an Image and a BackgroundColor, only the Image will be visible."/>
    <LangSpecProperty key="ya-prop-12" value="PhoneNumber/read-only-property/text/"/>
    <LangSpecProperty key="ya-prop-13" value="Picture/read-only-property/text/"/>
    <LangSpecProperty key="ya-prop-14" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-15" value="Shape/invisible-property/number/Specifies the button&apos;s shape (default, rounded, rectangular, oval). The shape will not be visible if an Image is being displayed."/>
    <LangSpecProperty key="ya-prop-16" value="ShowFeedback/read-write-property/boolean/Specifies if a visual feedback should be shown for a button that as an image as background."/>
    <LangSpecProperty key="ya-prop-17" value="Text/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-18" value="TextAlignment/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-19" value="TextColor/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-20" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-21" value="Width/read-write-property/number/"/>
    <LangSpecProperty key="ya-method-1" value="PhoneNumberPicker-Open"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-PhoneNumberPicker-Open"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="PhoneNumberPicker-AfterPicking" initlabel="AfterPicking"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Simple event to be raised after the picker activity returns its result and the properties have been filled in.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="PhoneNumberPicker-BeforePicking" initlabel="BeforePicking"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Simple event to raise when the component is clicked but before the picker activity is started.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="PhoneNumberPicker-GotFocus" initlabel="GotFocus"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates the cursor moved over the button so it is now possible to click it.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="PhoneNumberPicker-LostFocus" initlabel="LostFocus"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates the cursor moved away from the button so it is now no longer possible to click it.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="PhoneNumberPicker-Open" decorator="call" initlabel="Open"
            kind="command" color="call">
  <description>
    <text>Opens the picker, as though the user clicked on it.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-PhoneNumberPicker-Open" decorator="call" initlabel="Open"
            kind="command" color="call">
  <description>
    <text>Opens the picker, as though the user clicked on it.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- PhoneStatus Component -->

<BlockGenus name="PhoneStatus" initlabel="PhoneStatus"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Component that returns information about the phone.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-method-1" value="PhoneStatus-GetWifiIpAddress"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-PhoneStatus-GetWifiIpAddress"/>
    <LangSpecProperty key="ya-method-2" value="PhoneStatus-doFault"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-PhoneStatus-doFault"/>
    <LangSpecProperty key="ya-method-3" value="PhoneStatus-getVersionName"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-PhoneStatus-getVersionName"/>
    <LangSpecProperty key="ya-method-4" value="PhoneStatus-isConnected"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-PhoneStatus-isConnected"/>
    <LangSpecProperty key="ya-method-5" value="PhoneStatus-isEmulator"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-PhoneStatus-isEmulator"/>
    <LangSpecProperty key="ya-method-6" value="PhoneStatus-setAssetsLoaded"/>
    <LangSpecProperty key="ya-type-method-6" value="Type-PhoneStatus-setAssetsLoaded"/>
    <LangSpecProperty key="ya-method-7" value="PhoneStatus-setHmacSeedReturnCode"/>
    <LangSpecProperty key="ya-type-method-7" value="Type-PhoneStatus-setHmacSeedReturnCode"/>
    <LangSpecProperty key="ya-method-8" value="PhoneStatus-startHTTPD"/>
    <LangSpecProperty key="ya-type-method-8" value="Type-PhoneStatus-startHTTPD"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="PhoneStatus-GetWifiIpAddress" decorator="call" initlabel="GetWifiIpAddress"
            kind="function" color="call">
  <description>
    <text>Returns the IP address of the phone in the form of a String</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-PhoneStatus-GetWifiIpAddress" decorator="call" initlabel="GetWifiIpAddress"
            kind="function" color="call">
  <description>
    <text>Returns the IP address of the phone in the form of a String</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="PhoneStatus-doFault" decorator="call" initlabel="doFault"
            kind="command" color="call">
  <description>
    <text>Causes an Exception, used to debug exception processing.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-PhoneStatus-doFault" decorator="call" initlabel="doFault"
            kind="command" color="call">
  <description>
    <text>Causes an Exception, used to debug exception processing.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="PhoneStatus-getVersionName" decorator="call" initlabel="getVersionName"
            kind="function" color="call">
  <description>
    <text>Obtain the Android Application Version</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-PhoneStatus-getVersionName" decorator="call" initlabel="getVersionName"
            kind="function" color="call">
  <description>
    <text>Obtain the Android Application Version</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="PhoneStatus-isConnected" decorator="call" initlabel="isConnected"
            kind="function" color="call">
  <description>
    <text>Returns TRUE if the phone is on Wifi, FALSE otherwise</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="boolean"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-PhoneStatus-isConnected" decorator="call" initlabel="isConnected"
            kind="function" color="call">
  <description>
    <text>Returns TRUE if the phone is on Wifi, FALSE otherwise</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="boolean"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="PhoneStatus-isEmulator" decorator="call" initlabel="isEmulator"
            kind="function" color="call">
  <description>
    <text>Returns true if we are running in the emulator</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="boolean"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-PhoneStatus-isEmulator" decorator="call" initlabel="isEmulator"
            kind="function" color="call">
  <description>
    <text>Returns true if we are running in the emulator</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="boolean"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="PhoneStatus-setAssetsLoaded" decorator="call" initlabel="setAssetsLoaded"
            kind="command" color="call">
  <description>
    <text>Declare that we have loaded our initial assets and other assets should come from the sdcard</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-PhoneStatus-setAssetsLoaded" decorator="call" initlabel="setAssetsLoaded"
            kind="command" color="call">
  <description>
    <text>Declare that we have loaded our initial assets and other assets should come from the sdcard</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="PhoneStatus-setHmacSeedReturnCode" decorator="call" initlabel="setHmacSeedReturnCode"
            kind="function" color="call">
  <description>
    <text>Establish the secret seed for HOTP generation. Return the SHA1 of the provided seed, this will be used to contact the rendezvous server.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="seed" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="seed/value"/>
    <LangSpecProperty key="socket-allow-2" value="seed/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-PhoneStatus-setHmacSeedReturnCode" decorator="call" initlabel="setHmacSeedReturnCode"
            kind="function" color="call">
  <description>
    <text>Establish the secret seed for HOTP generation. Return the SHA1 of the provided seed, this will be used to contact the rendezvous server.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="seed" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="seed/value"/>
    <LangSpecProperty key="socket-allow-4" value="seed/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="PhoneStatus-startHTTPD" decorator="call" initlabel="startHTTPD"
            kind="command" color="call">
  <description>
    <text>Start the internal AppInvHTTPD to listen for incoming forms. FOR REPL USE ONLY!</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-PhoneStatus-startHTTPD" decorator="call" initlabel="startHTTPD"
            kind="command" color="call">
  <description>
    <text>Start the internal AppInvHTTPD to listen for incoming forms. FOR REPL USE ONLY!</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Player Component -->

<BlockGenus name="Player" initlabel="Player"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Multimedia component that plays audio or video and controls phone vibration. The name of a multimedia field is specified in the Source property, which can be set in the Designer or in the Blocks Editor. The length of time for a vibration is specified in the Blocks Editor in milliseconds (thousandths of a second). For legal sound and video formats, see Android Supported Media Formats. If you will only be playing sound files and vibrating, not using video, this component is best for long sound files, such as songs, while the Sound component is more efficient for short files, such as sound effects.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="5"/>
    <LangSpecProperty key="ya-event-1" value="Player-Completed"/>
    <LangSpecProperty key="ya-prop-1" value="IsPlaying/read-only-property/boolean/Reports whether the media is playing"/>
    <LangSpecProperty key="ya-prop-2" value="Loop/read-write-property/boolean/If true, the player will loop when it plays. Setting Loop while the player is playing will affect the current playing."/>
    <LangSpecProperty key="ya-prop-3" value="Source/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-4" value="Volume/write-only-property/number/Sets the volume to a number between 0 and 100"/>
    <LangSpecProperty key="ya-method-1" value="Player-Pause"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-Player-Pause"/>
    <LangSpecProperty key="ya-method-2" value="Player-Start"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-Player-Start"/>
    <LangSpecProperty key="ya-method-3" value="Player-Stop"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-Player-Stop"/>
    <LangSpecProperty key="ya-method-4" value="Player-Vibrate"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-Player-Vibrate"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Player-Completed" initlabel="Completed"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that the media has reached the end</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Player-PlayerError" initlabel="PlayerError"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>The PlayerError event is no longer used. Please use the Screen.ErrorOccurred event instead.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="message"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="message/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="Player-Pause" decorator="call" initlabel="Pause"
            kind="command" color="call">
  <description>
    <text>Suspends playing the media if it is playing.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Player-Pause" decorator="call" initlabel="Pause"
            kind="command" color="call">
  <description>
    <text>Suspends playing the media if it is playing.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Player-Start" decorator="call" initlabel="Start"
            kind="command" color="call">
  <description>
    <text>Plays the media. If it was previously paused, the playing is resumed. If it was previously stopped, it starts from the beginning.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Player-Start" decorator="call" initlabel="Start"
            kind="command" color="call">
  <description>
    <text>Plays the media. If it was previously paused, the playing is resumed. If it was previously stopped, it starts from the beginning.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Player-Stop" decorator="call" initlabel="Stop"
            kind="command" color="call">
  <description>
    <text>Stops playing the media and seeks to the beginning of the song.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Player-Stop" decorator="call" initlabel="Stop"
            kind="command" color="call">
  <description>
    <text>Stops playing the media and seeks to the beginning of the song.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Player-Vibrate" decorator="call" initlabel="Vibrate"
            kind="command" color="call">
  <description>
    <text>Vibrates for specified number of milliseconds.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="milliseconds" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="milliseconds/value"/>
    <LangSpecProperty key="socket-allow-2" value="milliseconds/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Player-Vibrate" decorator="call" initlabel="Vibrate"
            kind="command" color="call">
  <description>
    <text>Vibrates for specified number of milliseconds.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="milliseconds" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="milliseconds/value"/>
    <LangSpecProperty key="socket-allow-4" value="milliseconds/number"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Slider Component -->

<BlockGenus name="Slider" initlabel="Slider"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A Slider is a progress bar that adds a draggable thumb. You can touch the thumb and drag left or right to set the slider thumb position. As the Slider thumb is dragged, it will trigger the PositionChanged event, reporting the position of the Slider thumb. The reported position of the Slider thumb can be used to dynamically update another component attribute, such as the font size of a TextBox or the radius of a Ball.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-event-1" value="Slider-PositionChanged"/>
    <LangSpecProperty key="ya-prop-1" value="ColorLeft/read-write-property/number/The color of slider to the left of the thumb."/>
    <LangSpecProperty key="ya-prop-2" value="ColorRight/read-write-property/number/The color of slider to the left of the thumb."/>
    <LangSpecProperty key="ya-prop-3" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-4" value="MaxValue/read-write-property/number/Sets the maximum value of slider. Changing the maximum value also resets Thumbposition to be halfway between the minimum and the (new) maximum. If the new maximum is less than the current minimum, then minimum and maximum will both be set to this value. Setting MaxValue resets the thumb position to halfway between MinValue and MaxValue and signals the PositionChanged event."/>
    <LangSpecProperty key="ya-prop-5" value="MinValue/read-write-property/number/Sets the minimum value of slider. Changing the minimum value also resets Thumbposition to be halfway between the (new) minimum and the maximum. If the new minimum is greater than the current maximum, then minimum and maximum will both be set to this value. Setting MinValue resets the thumb position to halfway between MinValue and MaxValue and signals the PositionChanged event."/>
    <LangSpecProperty key="ya-prop-6" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-7" value="ThumbPosition/read-write-property/number/Sets the position of the slider thumb. If this value is greater than MaxValue, then it will be set to same value as MaxValue. If this value is less than MinValue, then it will be set to same value as MinValue."/>
    <LangSpecProperty key="ya-prop-8" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-9" value="Width/read-write-property/number/"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Slider-PositionChanged" initlabel="PositionChanged"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that position of the slider thumb has changed.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="thumbPosition" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="thumbPosition"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="thumbPosition/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Sound Component -->

<BlockGenus name="Sound" initlabel="Sound"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A multimedia component that plays sound files and optionally vibrates for the number of milliseconds (thousandths of a second) specified in the Blocks Editor. The name of the sound file to play can be specified either in the Designer or in the Blocks Editor. For legal sound and video formats, see Android Supported Media Formats. This component is best for short sound files, such as sound effects, while the Player component is more efficient for longer sounds, such as songs.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="3"/>
    <LangSpecProperty key="ya-prop-1" value="MinimumInterval/read-write-property/number/The minimum interval..."/>
    <LangSpecProperty key="ya-prop-2" value="Source/read-write-property/text/The name of the sound file. Only certain formats are supported."/>
    <LangSpecProperty key="ya-method-1" value="Sound-Pause"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-Sound-Pause"/>
    <LangSpecProperty key="ya-method-2" value="Sound-Play"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-Sound-Play"/>
    <LangSpecProperty key="ya-method-3" value="Sound-Resume"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-Sound-Resume"/>
    <LangSpecProperty key="ya-method-4" value="Sound-Stop"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-Sound-Stop"/>
    <LangSpecProperty key="ya-method-5" value="Sound-Vibrate"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-Sound-Vibrate"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Sound-SoundError" initlabel="SoundError"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>The SoundError event is no longer used. Please use the Screen.ErrorOccurred event instead.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="message"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="message/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="Sound-Pause" decorator="call" initlabel="Pause"
            kind="command" color="call">
  <description>
    <text>Pauses playing the sound if it is being played.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Sound-Pause" decorator="call" initlabel="Pause"
            kind="command" color="call">
  <description>
    <text>Pauses playing the sound if it is being played.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Sound-Play" decorator="call" initlabel="Play"
            kind="command" color="call">
  <description>
    <text>Plays the sound.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Sound-Play" decorator="call" initlabel="Play"
            kind="command" color="call">
  <description>
    <text>Plays the sound.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Sound-Resume" decorator="call" initlabel="Resume"
            kind="command" color="call">
  <description>
    <text>Resumes playing the sound after a pause.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Sound-Resume" decorator="call" initlabel="Resume"
            kind="command" color="call">
  <description>
    <text>Resumes playing the sound after a pause.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Sound-Stop" decorator="call" initlabel="Stop"
            kind="command" color="call">
  <description>
    <text>Stops playing the sound if it is being played.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Sound-Stop" decorator="call" initlabel="Stop"
            kind="command" color="call">
  <description>
    <text>Stops playing the sound if it is being played.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Sound-Vibrate" decorator="call" initlabel="Vibrate"
            kind="command" color="call">
  <description>
    <text>Vibrates for the specified number of milliseconds.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="millisecs" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="millisecs/value"/>
    <LangSpecProperty key="socket-allow-2" value="millisecs/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Sound-Vibrate" decorator="call" initlabel="Vibrate"
            kind="command" color="call">
  <description>
    <text>Vibrates for the specified number of milliseconds.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="millisecs" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="millisecs/value"/>
    <LangSpecProperty key="socket-allow-4" value="millisecs/number"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SoundRecorder Component -->

<BlockGenus name="SoundRecorder" initlabel="SoundRecorder"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Multimedia component that records audio.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-event-1" value="SoundRecorder-AfterSoundRecorded"/>
    <LangSpecProperty key="ya-event-2" value="SoundRecorder-StartedRecording"/>
    <LangSpecProperty key="ya-event-3" value="SoundRecorder-StoppedRecording"/>
    <LangSpecProperty key="ya-method-1" value="SoundRecorder-Start"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-SoundRecorder-Start"/>
    <LangSpecProperty key="ya-method-2" value="SoundRecorder-Stop"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-SoundRecorder-Stop"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="SoundRecorder-AfterSoundRecorded" initlabel="AfterSoundRecorded"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Provides the location of the newly created sound.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="sound" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="sound"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="sound/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="SoundRecorder-StartedRecording" initlabel="StartedRecording"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that the recorder has started, and can be stopped.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="SoundRecorder-StoppedRecording" initlabel="StoppedRecording"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that the recorder has stopped, and can be started again.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="SoundRecorder-Start" decorator="call" initlabel="Start"
            kind="command" color="call">
  <description>
    <text>Starts recording.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-SoundRecorder-Start" decorator="call" initlabel="Start"
            kind="command" color="call">
  <description>
    <text>Starts recording.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="SoundRecorder-Stop" decorator="call" initlabel="Stop"
            kind="command" color="call">
  <description>
    <text>Stops recording.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-SoundRecorder-Stop" decorator="call" initlabel="Stop"
            kind="command" color="call">
  <description>
    <text>Stops recording.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SpeechRecognizer Component -->

<BlockGenus name="SpeechRecognizer" initlabel="SpeechRecognizer"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Component for using Voice Recognition to convert from speech to text</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-event-1" value="SpeechRecognizer-AfterGettingText"/>
    <LangSpecProperty key="ya-event-2" value="SpeechRecognizer-BeforeGettingText"/>
    <LangSpecProperty key="ya-prop-1" value="Result/read-only-property/text/"/>
    <LangSpecProperty key="ya-method-1" value="SpeechRecognizer-GetText"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-SpeechRecognizer-GetText"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="SpeechRecognizer-AfterGettingText" initlabel="AfterGettingText"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Simple event to raise after the VoiceReco activity has returned</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="result" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="result"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="result/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="SpeechRecognizer-BeforeGettingText" initlabel="BeforeGettingText"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Simple event to raise when VoiceReco is invoked but before the VoiceReco activity is started.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="SpeechRecognizer-GetText" decorator="call" initlabel="GetText"
            kind="command" color="call">
  <description>
    <text>Solicits speech input from the user. After the speech is converted to text, the AfterGettingText event will be raised.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-SpeechRecognizer-GetText" decorator="call" initlabel="GetText"
            kind="command" color="call">
  <description>
    <text>Solicits speech input from the user. After the speech is converted to text, the AfterGettingText event will be raised.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- TableArrangement Component -->

<BlockGenus name="TableArrangement" initlabel="TableArrangement"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A formatting element in which to place components that should be displayed in tabular form.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-prop-1" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-2" value="Columns/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-3" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-4" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-5" value="Rows/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-6" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-7" value="Width/read-write-property/number/"/>
  </LangSpecProperties>
</BlockGenus>

<!-- TextBox Component -->

<BlockGenus name="TextBox" initlabel="TextBox"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A box for the user to enter text. The initial or user-entered text value is in the Text property. If blank, the Hint property, which appears as faint text in the box, can provide the user with guidance as to what to type. The MultiLine property determines if the text can havemore than one line. For a single line text box, the keyboard will closeautomatically when the user presses the Done key. To close the keyboard for multiline text boxes, the app should use the HideKeyboard method or rely on the user to press the Back key. The NumbersOnly property restricts the keyboard to acceptnumeric input only. Other properties affect the appearance of the text box (TextAlignment, BackgroundColor, etc.) and whether it can be used (Enabled). Text boxes are usually used with the Button component, with the user clicking on the button when text entry is complete. If the text entered by the user should not be displayed, use PasswordTextBox instead.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="4"/>
    <LangSpecProperty key="ya-event-1" value="TextBox-GotFocus"/>
    <LangSpecProperty key="ya-event-2" value="TextBox-LostFocus"/>
    <LangSpecProperty key="ya-prop-1" value="BackgroundColor/read-write-property/number/The background color of the input box. You can choose a color by name in the Designer or in the Blocks Editor. The default background color is &apos;default&apos; (shaded 3-D look)."/>
    <LangSpecProperty key="ya-prop-2" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-3" value="Enabled/read-write-property/boolean/Whether the user can enter text into this input box. By default, this is true."/>
    <LangSpecProperty key="ya-prop-4" value="FontBold/invisible-property/boolean/Whether the font for the text should be bold. By default, it is not."/>
    <LangSpecProperty key="ya-prop-5" value="FontItalic/invisible-property/boolean/Whether the text should appear in italics. By default, it does not."/>
    <LangSpecProperty key="ya-prop-6" value="FontSize/read-write-property/number/The font size for the text. By default, it is 14.0 points."/>
    <LangSpecProperty key="ya-prop-7" value="FontTypeface/invisible-property/number/The font for the text. The value can be changed in the Designer."/>
    <LangSpecProperty key="ya-prop-8" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-9" value="Hint/read-write-property/text/Text that should appear faintly in the input box to provide a hint as to what the user should enter. This can only be seen if the Text property is empty."/>
    <LangSpecProperty key="ya-prop-10" value="MultiLine/read-write-property/boolean/If true, then this text box accepts multiple lines of input, which are entered using the return key. For single line text boxes there is a Done key instead of a return key, and pressing Done hides the keyboard. The app should call the HideKeyboard method to hide the keyboard for a mutiline text box."/>
    <LangSpecProperty key="ya-prop-11" value="NumbersOnly/read-write-property/boolean/If true, then this text box accepts only numbers as keyboard input. Numbers can include a decimal point and an optional leading minus sign. This applies to keyboard input only. Even if NumbersOnly is true, you can use [set Text to] to enter any text at all."/>
    <LangSpecProperty key="ya-prop-12" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-13" value="Text/read-write-property/text/The text in the input box, which can be set by the programmer in the Designer or Blocks Editor, or it can be entered by the user (unless the Enabled property is false)."/>
    <LangSpecProperty key="ya-prop-14" value="TextAlignment/invisible-property/number/Whether the text should be left justified, centered, or right justified. By default, text is left justified."/>
    <LangSpecProperty key="ya-prop-15" value="TextColor/read-write-property/number/The color for the text. You can choose a color by name in the Designer or in the Blocks Editor. The default text color is black."/>
    <LangSpecProperty key="ya-prop-16" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-17" value="Width/read-write-property/number/"/>
    <LangSpecProperty key="ya-method-1" value="TextBox-HideKeyboard"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-TextBox-HideKeyboard"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="TextBox-GotFocus" initlabel="GotFocus"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event raised when this component is selected for input, such as by the user touching it.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="TextBox-LostFocus" initlabel="LostFocus"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event raised when this component is no longer selected for input, such as if the user touches a different text box.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="TextBox-HideKeyboard" decorator="call" initlabel="HideKeyboard"
            kind="command" color="call">
  <description>
    <text>Hide the keyboard. Only multiline text boxes need this. Single line text boxes close the keyboard when the users presses the Done key.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-TextBox-HideKeyboard" decorator="call" initlabel="HideKeyboard"
            kind="command" color="call">
  <description>
    <text>Hide the keyboard. Only multiline text boxes need this. Single line text boxes close the keyboard when the users presses the Done key.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- TextToSpeech Component -->

<BlockGenus name="TextToSpeech" initlabel="TextToSpeech"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Component for using TextToSpeech to speak a message</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-event-1" value="TextToSpeech-AfterSpeaking"/>
    <LangSpecProperty key="ya-event-2" value="TextToSpeech-BeforeSpeaking"/>
    <LangSpecProperty key="ya-prop-1" value="Country/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-2" value="Language/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-3" value="Result/read-only-property/boolean/"/>
    <LangSpecProperty key="ya-method-1" value="TextToSpeech-Speak"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-TextToSpeech-Speak"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="TextToSpeech-AfterSpeaking" initlabel="AfterSpeaking"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event to raise after the message is spoken.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="result" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="result"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="result/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="TextToSpeech-BeforeSpeaking" initlabel="BeforeSpeaking"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event to raise when Speak is invoked, before the message is spoken.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="TextToSpeech-Speak" decorator="call" initlabel="Speak"
            kind="command" color="call">
  <description>
    <text>Speaks the given message.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="message/value"/>
    <LangSpecProperty key="socket-allow-2" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-TextToSpeech-Speak" decorator="call" initlabel="Speak"
            kind="command" color="call">
  <description>
    <text>Speaks the given message.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="message/value"/>
    <LangSpecProperty key="socket-allow-4" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Texting Component -->

<BlockGenus name="Texting" initlabel="Texting"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A component that will, when the SendMessage method is called, send the text message specified in the Message property to the phone number specified in the PhoneNumber property. If the ReceivingEnabled property is set to 1 messages will not be received. If ReceivingEnabled is set to 2 messages will be received only when the application is running. Finally if ReceivingEnabled is set to 3, messages will be received when the application is running and when the application is not running they will be queued and a notification displayed to the user. When a message arrives, the MessageReceived event is raised and provides the sending number and message. An app that includes this component will receive messages even when it is in the background (i.e. when it&apos;s not visible on the screen) and, moreso, even if the app is not running, so long as it&apos;s installed on the phone. If the phone receives a text message when the app is not in the foreground, the phone will show a notification in the notification bar. Selecting the notification will bring up the app. As an app developer, you&apos;ll probably want to give your users the ability to control ReceivingEnabled so that they can make the phone ignore text messages. If the GoogleVoiceEnabled property is true, messages can be sent over Wifi using Google Voice. This option requires that the user have a Google Voice account and that the mobile Voice app is installed on the phone. The Google Voice option works only on phones that support Android 2.0 (Eclair) or higher. To specify the phone number (e.g., 650-555-1212), set the PhoneNumber property to a Text string with the specified digits (e.g., 6505551212). Dashes, dots, and parentheses may be included (e.g., (650)-555-1212) but will be ignored; spaces may not be included. Another way for an app to specify a phone number would be to include a PhoneNumberPicker component, which lets the users select a phone numbers from the ones stored in the the phone&apos;s contacts.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="3"/>
    <LangSpecProperty key="ya-event-1" value="Texting-MessageReceived"/>
    <LangSpecProperty key="ya-prop-1" value="GoogleVoiceEnabled/read-write-property/boolean/If true, then SendMessage will attempt to send messages over Wifi using Google Voice. This requires that the Google Voice app must be installed and set up on the phone or tablet, with a Google Voice account. If GoogleVoiceEnabled is false, the device must have phone and texting service in order to send or receive messages with this component."/>
    <LangSpecProperty key="ya-prop-2" value="Message/read-write-property/text/The message that will be sent when the SendMessage method is called."/>
    <LangSpecProperty key="ya-prop-3" value="PhoneNumber/read-write-property/text/The number that the message will be sent to when the SendMessage method is called. The number is a text string with the specified digits (e.g., 6505551212). Dashes, dots, and parentheses may be included (e.g., (650)-555-1212) but will be ignored; spaces should not be included."/>
    <LangSpecProperty key="ya-prop-4" value="ReceivingEnabled/read-write-property/number/If set to 1 (OFF) no messages will be received. If set to 2 (FOREGROUND) or3 (ALWAYS) the component will respond to messages if it is running. If the app is not running then the message will be discarded if set to 2 (FOREGROUND). If set to 3 (ALWAYS) and the app is not running the phone will show a notification. Selecting the notification will bring up the app and signal the MessageReceived event. Messages received when the app is dormant will be queued, and so several MessageReceived events might appear when the app awakens. As an app developer, it would be a good idea to give your users control over this property, so they can make their phones ignore text messages when your app is installed."/>
    <LangSpecProperty key="ya-method-1" value="Texting-SendMessage"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-Texting-SendMessage"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Texting-MessageReceived" initlabel="MessageReceived"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event that&apos;s raised when a text message is received by the phone.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="number" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="number"/>
    </BlockConnector>
    <BlockConnector label="messageText" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="messageText"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="number/argument"/>
    <LangSpecProperty key="socket-allow-2" value="messageText/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="Texting-SendMessage" decorator="call" initlabel="SendMessage"
            kind="command" color="call">
  <description>
    <text>Send a text message</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Texting-SendMessage" decorator="call" initlabel="SendMessage"
            kind="command" color="call">
  <description>
    <text>Send a text message</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- TinyDB Component -->

<BlockGenus name="TinyDB" initlabel="TinyDB"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Non-visible component that persistently stores values on the phone.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-method-1" value="TinyDB-GetValue"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-TinyDB-GetValue"/>
    <LangSpecProperty key="ya-method-2" value="TinyDB-StoreValue"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-TinyDB-StoreValue"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="TinyDB-GetValue" decorator="call" initlabel="GetValue"
            kind="function" color="call">
  <description>
    <text>Retrieve the value stored under the given tag.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="tag" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="type-exclude-1" value="argument"/>
    <LangSpecProperty key="socket-allow-1" value="tag/value"/>
    <LangSpecProperty key="socket-allow-2" value="tag/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-TinyDB-GetValue" decorator="call" initlabel="GetValue"
            kind="function" color="call">
  <description>
    <text>Retrieve the value stored under the given tag.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="tag" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="type-exclude-1" value="argument"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="tag/value"/>
    <LangSpecProperty key="socket-allow-4" value="tag/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="TinyDB-StoreValue" decorator="call" initlabel="StoreValue"
            kind="command" color="call">
  <description>
    <text>Store the given value under the given tag. The storage persists on the phone when the app is restarted.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="tag" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="valueToStore" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="tag/value"/>
    <LangSpecProperty key="socket-allow-2" value="tag/text"/>
    <LangSpecProperty key="socket-exclude-1" value="valueToStore/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-TinyDB-StoreValue" decorator="call" initlabel="StoreValue"
            kind="command" color="call">
  <description>
    <text>Store the given value under the given tag. The storage persists on the phone when the app is restarted.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="tag" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="valueToStore" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="tag/value"/>
    <LangSpecProperty key="socket-allow-4" value="tag/text"/>
    <LangSpecProperty key="socket-exclude-1" value="valueToStore/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- TinyWebDB Component -->

<BlockGenus name="TinyWebDB" initlabel="TinyWebDB"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Non-visible component that communicates with a Web service to store and retrieve information.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="2"/>
    <LangSpecProperty key="ya-event-1" value="TinyWebDB-GotValue"/>
    <LangSpecProperty key="ya-event-2" value="TinyWebDB-ValueStored"/>
    <LangSpecProperty key="ya-event-3" value="TinyWebDB-WebServiceError"/>
    <LangSpecProperty key="ya-prop-1" value="ServiceURL/read-write-property/text/"/>
    <LangSpecProperty key="ya-method-1" value="TinyWebDB-GetValue"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-TinyWebDB-GetValue"/>
    <LangSpecProperty key="ya-method-2" value="TinyWebDB-StoreValue"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-TinyWebDB-StoreValue"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="TinyWebDB-GotValue" initlabel="GotValue"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that a GetValue server request has succeeded.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="tagFromWebDB" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="tagFromWebDB"/>
    </BlockConnector>
    <BlockConnector label="valueFromWebDB" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="valueFromWebDB"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="tagFromWebDB/argument"/>
    <LangSpecProperty key="socket-allow-2" value="valueFromWebDB/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="TinyWebDB-ValueStored" initlabel="ValueStored"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event indicating that a StoreValue server request has succeeded.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="TinyWebDB-WebServiceError" initlabel="WebServiceError"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that the communication with the Web service signaled an error</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="message"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="message/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="TinyWebDB-GetValue" decorator="call" initlabel="GetValue"
            kind="command" color="call">
  <description>
    <text>GetValue asks the Web service to get the value stored under the given tag. It is up to the Web service what to return if there is no value stored under the tag. This component just accepts whatever is returned.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="tag" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="tag/value"/>
    <LangSpecProperty key="socket-allow-2" value="tag/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-TinyWebDB-GetValue" decorator="call" initlabel="GetValue"
            kind="command" color="call">
  <description>
    <text>GetValue asks the Web service to get the value stored under the given tag. It is up to the Web service what to return if there is no value stored under the tag. This component just accepts whatever is returned.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="tag" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="tag/value"/>
    <LangSpecProperty key="socket-allow-4" value="tag/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="TinyWebDB-StoreValue" decorator="call" initlabel="StoreValue"
            kind="command" color="call">
  <description>
    <text>Asks the Web service to store the given value under the given tag</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="tag" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="valueToStore" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="tag/value"/>
    <LangSpecProperty key="socket-allow-2" value="tag/text"/>
    <LangSpecProperty key="socket-exclude-1" value="valueToStore/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-TinyWebDB-StoreValue" decorator="call" initlabel="StoreValue"
            kind="command" color="call">
  <description>
    <text>Asks the Web service to store the given value under the given tag</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="tag" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="valueToStore" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="tag/value"/>
    <LangSpecProperty key="socket-allow-4" value="tag/text"/>
    <LangSpecProperty key="socket-exclude-1" value="valueToStore/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Twitter Component -->

<BlockGenus name="Twitter" initlabel="Twitter"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A non-visible component that enables communication with Twitter. Once a user has logged into their Twitter account (and the authorization has been confirmed successful by the IsAuthorized event), many more operations are available: - Searching Twitter for tweets or labels (SearchTwitter) - Sending a Tweet (Tweet) - Sending a Tweet with an Image (TweetWithImage) - Directing a message to a specific user (DirectMessage) - Receiving the most recent messages directed to the logged-in user (RequestDirectMessages) - Following a specific user (Follow) - Ceasing to follow a specific user (StopFollowing) - Getting a list of users following the logged-in user (RequestFollowers) - Getting the most recent messages of users followed by the logged-in user (RequestFriendTimeline) - Getting the most recent mentions of the logged-in user (RequestMentions) You must obtain a Comsumer Key and Consumer Secret for Twitter authorization specific to your app from http://twitter.com/oauth_clients/new</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="3"/>
    <LangSpecProperty key="ya-event-1" value="Twitter-DirectMessagesReceived"/>
    <LangSpecProperty key="ya-event-2" value="Twitter-FollowersReceived"/>
    <LangSpecProperty key="ya-event-3" value="Twitter-FriendTimelineReceived"/>
    <LangSpecProperty key="ya-event-4" value="Twitter-IsAuthorized"/>
    <LangSpecProperty key="ya-event-5" value="Twitter-MentionsReceived"/>
    <LangSpecProperty key="ya-event-6" value="Twitter-SearchSuccessful"/>
    <LangSpecProperty key="ya-prop-1" value="ConsumerKey/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-2" value="ConsumerSecret/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-3" value="DirectMessages/read-only-property/list/This property contains a list of the most recent messages mentioning the logged-in user. Initially, the list is empty. To set it, the program must: - Call the Authorize method. - Wait for the Authorized event. - Call the RequestDirectMessages method. - Wait for the DirectMessagesReceived event. The value of this property will then be set to the list of direct messages retrieved (and maintain that value until any subsequent call to RequestDirectMessages)."/>
    <LangSpecProperty key="ya-prop-4" value="Followers/read-only-property/list/This property contains a list of the followers of the logged-in user. Initially, the list is empty. To set it, the program must: - Call the Authorize method. - Wait for the IsAuthorized event. - Call the RequestFollowers method. - Wait for the FollowersReceived event. The value of this property will then be set to the list of followers (and maintain its value until any subsequent call to RequestFollowers)."/>
    <LangSpecProperty key="ya-prop-5" value="FriendTimeline/read-only-property/list/This property contains the 20 most recent messages of users being followed. Initially, the list is empty. To set it, the program must: - Call the Authorize method. - Wait for the IsAuthorized event. - Specify users to follow with one or more calls to the Follow method. - Call the RequestFriendTimeline method. - Wait for the FriendTimelineReceived event. The value of this property will then be set to the list of messages (and maintain its value until any subsequent call to RequestFriendTimeline."/>
    <LangSpecProperty key="ya-prop-6" value="Mentions/read-only-property/list/This property contains a list of mentions of the logged-in user. Initially, the list is empty. To set it, the program must: - Call the Authorize method. - Wait for the IsAuthorized event. - Call the RequestMentions method. - Wait for the MentionsReceived event. The value of this property will then be set to the list of mentions (and will maintain its value until any subsequent calls to RequestMentions)."/>
    <LangSpecProperty key="ya-prop-7" value="SearchResults/read-only-property/list/This property, which is initially empty, is set to a list of search results after the program: - Calls the SearchTwitter method. - Waits for the SearchSuccessful event. The value of the property will then be the same as the parameter to SearchSuccessful. Note that it is not necessary to call the Authorize method before calling SearchTwitter."/>
    <LangSpecProperty key="ya-prop-8" value="TwitPic_API_Key/read-write-property/text/"/>
    <LangSpecProperty key="ya-prop-9" value="Username/read-only-property/text/The user name of the authorized user. Empty if there is no authorized user."/>
    <LangSpecProperty key="ya-method-1" value="Twitter-Authorize"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-Twitter-Authorize"/>
    <LangSpecProperty key="ya-method-2" value="Twitter-CheckAuthorized"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-Twitter-CheckAuthorized"/>
    <LangSpecProperty key="ya-method-3" value="Twitter-DeAuthorize"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-Twitter-DeAuthorize"/>
    <LangSpecProperty key="ya-method-4" value="Twitter-DirectMessage"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-Twitter-DirectMessage"/>
    <LangSpecProperty key="ya-method-5" value="Twitter-Follow"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-Twitter-Follow"/>
    <LangSpecProperty key="ya-method-6" value="Twitter-RequestDirectMessages"/>
    <LangSpecProperty key="ya-type-method-6" value="Type-Twitter-RequestDirectMessages"/>
    <LangSpecProperty key="ya-method-7" value="Twitter-RequestFollowers"/>
    <LangSpecProperty key="ya-type-method-7" value="Type-Twitter-RequestFollowers"/>
    <LangSpecProperty key="ya-method-8" value="Twitter-RequestFriendTimeline"/>
    <LangSpecProperty key="ya-type-method-8" value="Type-Twitter-RequestFriendTimeline"/>
    <LangSpecProperty key="ya-method-9" value="Twitter-RequestMentions"/>
    <LangSpecProperty key="ya-type-method-9" value="Type-Twitter-RequestMentions"/>
    <LangSpecProperty key="ya-method-10" value="Twitter-SearchTwitter"/>
    <LangSpecProperty key="ya-type-method-10" value="Type-Twitter-SearchTwitter"/>
    <LangSpecProperty key="ya-method-11" value="Twitter-StopFollowing"/>
    <LangSpecProperty key="ya-type-method-11" value="Type-Twitter-StopFollowing"/>
    <LangSpecProperty key="ya-method-12" value="Twitter-Tweet"/>
    <LangSpecProperty key="ya-type-method-12" value="Type-Twitter-Tweet"/>
    <LangSpecProperty key="ya-method-13" value="Twitter-TweetWithImage"/>
    <LangSpecProperty key="ya-type-method-13" value="Type-Twitter-TweetWithImage"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Twitter-DirectMessagesReceived" initlabel="DirectMessagesReceived"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>This event is raised when the recent messages requested through RequestDirectMessages have been retrieved. A list of the messages can then be found in the messages parameter or the Messages property.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="messages" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="messages"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="messages/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Twitter-FollowersReceived" initlabel="FollowersReceived"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>This event is raised when all of the followers of the logged-in user requested through RequestFollowers have been retrieved. A list of the followers can then be found in the followers parameter or the Followers property.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="followers2" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="followers2"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="followers2/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Twitter-FriendTimelineReceived" initlabel="FriendTimelineReceived"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>This event is raised when the messages requested through RequestFriendTimeline have been retrieved. The timeline parameter and the Timeline property will contain a list of lists, where each sub-list contains a status update of the form (username message)</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="timeline" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="timeline"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="timeline/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Twitter-IsAuthorized" initlabel="IsAuthorized"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>This event is raised after the program calls Authorize if the authorization was successful. It is also called after a call to CheckAuthorized if we already have a valid access token. After this event has been raised, any other method for this component can be called.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Twitter-MentionsReceived" initlabel="MentionsReceived"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>This event is raised when the mentions of the logged-in user requested through RequestMentions have been retrieved. A list of the mentions can then be found in the mentions parameter or the Mentions property.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="mentions" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="mentions"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="mentions/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Twitter-SearchSuccessful" initlabel="SearchSuccessful"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>This event is raised when the results of the search requested through SearchSuccessful have been retrieved. A list of the results can then be found in the results parameter or the Results property.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="searchResults" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="searchResults"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="searchResults/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="Twitter-Authorize" decorator="call" initlabel="Authorize"
            kind="command" color="call">
  <description>
    <text>Redirects user to login to Twitter via the Web browser using the OAuth protocol if we don&apos;t already have authorization.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Twitter-Authorize" decorator="call" initlabel="Authorize"
            kind="command" color="call">
  <description>
    <text>Redirects user to login to Twitter via the Web browser using the OAuth protocol if we don&apos;t already have authorization.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Twitter-CheckAuthorized" decorator="call" initlabel="CheckAuthorized"
            kind="command" color="call">
  <description>
    <text>Checks whether we already have access, and if so, causes IsAuthorized event handler to be called.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Twitter-CheckAuthorized" decorator="call" initlabel="CheckAuthorized"
            kind="command" color="call">
  <description>
    <text>Checks whether we already have access, and if so, causes IsAuthorized event handler to be called.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Twitter-DeAuthorize" decorator="call" initlabel="DeAuthorize"
            kind="command" color="call">
  <description>
    <text>Removes Twitter authorization from this running app instance</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Twitter-DeAuthorize" decorator="call" initlabel="DeAuthorize"
            kind="command" color="call">
  <description>
    <text>Removes Twitter authorization from this running app instance</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Twitter-DirectMessage" decorator="call" initlabel="DirectMessage"
            kind="command" color="call">
  <description>
    <text>This sends a direct (private) message to the specified user. The message will be trimmed if it exceeds 160characters. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="user" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="user/value"/>
    <LangSpecProperty key="socket-allow-2" value="message/value"/>
    <LangSpecProperty key="socket-allow-3" value="user/text"/>
    <LangSpecProperty key="socket-allow-4" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Twitter-DirectMessage" decorator="call" initlabel="DirectMessage"
            kind="command" color="call">
  <description>
    <text>This sends a direct (private) message to the specified user. The message will be trimmed if it exceeds 160characters. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="user" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="user/value"/>
    <LangSpecProperty key="socket-allow-4" value="message/value"/>
    <LangSpecProperty key="socket-allow-5" value="user/text"/>
    <LangSpecProperty key="socket-allow-6" value="message/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Twitter-Follow" decorator="call" initlabel="Follow"
            kind="command" color="call">
  <description>
    <text>Starts following a user.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="user" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="user/value"/>
    <LangSpecProperty key="socket-allow-2" value="user/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Twitter-Follow" decorator="call" initlabel="Follow"
            kind="command" color="call">
  <description>
    <text>Starts following a user.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="user" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="user/value"/>
    <LangSpecProperty key="socket-allow-4" value="user/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Twitter-Login" decorator="call" initlabel="Login"
            kind="command" color="call">
  <description>
    <text>Twitter&apos;s API no longer supports login via username and password. Use the Authorize call instead.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="username" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="password" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="username/value"/>
    <LangSpecProperty key="socket-allow-2" value="password/value"/>
    <LangSpecProperty key="socket-allow-3" value="username/text"/>
    <LangSpecProperty key="socket-allow-4" value="password/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Twitter-Login" decorator="call" initlabel="Login"
            kind="command" color="call">
  <description>
    <text>Twitter&apos;s API no longer supports login via username and password. Use the Authorize call instead.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="username" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="password" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="username/value"/>
    <LangSpecProperty key="socket-allow-4" value="password/value"/>
    <LangSpecProperty key="socket-allow-5" value="username/text"/>
    <LangSpecProperty key="socket-allow-6" value="password/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Twitter-RequestDirectMessages" decorator="call" initlabel="RequestDirectMessages"
            kind="command" color="call">
  <description>
    <text>Requests the 20 most recent direct messages sent to the logged-in user. When the messages have been retrieved, the system will raise the DirectMessagesReceived event and set the DirectMessages property to the list of messages. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Twitter-RequestDirectMessages" decorator="call" initlabel="RequestDirectMessages"
            kind="command" color="call">
  <description>
    <text>Requests the 20 most recent direct messages sent to the logged-in user. When the messages have been retrieved, the system will raise the DirectMessagesReceived event and set the DirectMessages property to the list of messages. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Twitter-RequestFollowers" decorator="call" initlabel="RequestFollowers"
            kind="command" color="call">
  <description>
    <text>Gets who is following you.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Twitter-RequestFollowers" decorator="call" initlabel="RequestFollowers"
            kind="command" color="call">
  <description>
    <text>Gets who is following you.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Twitter-RequestFriendTimeline" decorator="call" initlabel="RequestFriendTimeline"
            kind="command" color="call">
  <description>
    <text>Gets the most recent 20 messages in the user&apos;s timeline.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Twitter-RequestFriendTimeline" decorator="call" initlabel="RequestFriendTimeline"
            kind="command" color="call">
  <description>
    <text>Gets the most recent 20 messages in the user&apos;s timeline.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Twitter-RequestMentions" decorator="call" initlabel="RequestMentions"
            kind="command" color="call">
  <description>
    <text>Requests the 20 most recent mentions of the logged-in user. When the mentions have been retrieved, the system will raise the MentionsReceived event and set the Mentions property to the list of mentions. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Twitter-RequestMentions" decorator="call" initlabel="RequestMentions"
            kind="command" color="call">
  <description>
    <text>Requests the 20 most recent mentions of the logged-in user. When the mentions have been retrieved, the system will raise the MentionsReceived event and set the Mentions property to the list of mentions. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Twitter-SearchTwitter" decorator="call" initlabel="SearchTwitter"
            kind="command" color="call">
  <description>
    <text>This searches Twitter for the given String query. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="query" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="query/value"/>
    <LangSpecProperty key="socket-allow-2" value="query/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Twitter-SearchTwitter" decorator="call" initlabel="SearchTwitter"
            kind="command" color="call">
  <description>
    <text>This searches Twitter for the given String query. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="query" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="query/value"/>
    <LangSpecProperty key="socket-allow-4" value="query/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Twitter-StopFollowing" decorator="call" initlabel="StopFollowing"
            kind="command" color="call">
  <description>
    <text>Stops following a user.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="user" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="user/value"/>
    <LangSpecProperty key="socket-allow-2" value="user/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Twitter-StopFollowing" decorator="call" initlabel="StopFollowing"
            kind="command" color="call">
  <description>
    <text>Stops following a user.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="user" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="user/value"/>
    <LangSpecProperty key="socket-allow-4" value="user/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Twitter-Tweet" decorator="call" initlabel="Tweet"
            kind="command" color="call">
  <description>
    <text>This sends a tweet as the logged-in user with the specified Text, which will be trimmed if it exceeds 160 characters. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="status" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="status/value"/>
    <LangSpecProperty key="socket-allow-2" value="status/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Twitter-Tweet" decorator="call" initlabel="Tweet"
            kind="command" color="call">
  <description>
    <text>This sends a tweet as the logged-in user with the specified Text, which will be trimmed if it exceeds 160 characters. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="status" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="status/value"/>
    <LangSpecProperty key="socket-allow-4" value="status/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Twitter-TweetWithImage" decorator="call" initlabel="TweetWithImage"
            kind="command" color="call">
  <description>
    <text>This sends a tweet as the logged-in user with the specified Text and a URL to the uploaded image on TwitPic, which will be trimmed if it exceeds160 characters. If an image is not found or invalid, only the text will be tweeted. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="status" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="ImagePath" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="status/value"/>
    <LangSpecProperty key="socket-allow-2" value="ImagePath/value"/>
    <LangSpecProperty key="socket-allow-3" value="status/text"/>
    <LangSpecProperty key="socket-allow-4" value="ImagePath/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Twitter-TweetWithImage" decorator="call" initlabel="TweetWithImage"
            kind="command" color="call">
  <description>
    <text>This sends a tweet as the logged-in user with the specified Text and a URL to the uploaded image on TwitPic, which will be trimmed if it exceeds160 characters. If an image is not found or invalid, only the text will be tweeted. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="status" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="ImagePath" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="status/value"/>
    <LangSpecProperty key="socket-allow-4" value="ImagePath/value"/>
    <LangSpecProperty key="socket-allow-5" value="status/text"/>
    <LangSpecProperty key="socket-allow-6" value="ImagePath/text"/>
  </LangSpecProperties>
</BlockGenus>

<!-- VerticalArrangement Component -->

<BlockGenus name="VerticalArrangement" initlabel="VerticalArrangement"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A formatting element in which to place components that should be displayed one below another. (The first child component is stored on top, the second beneath it, etc.) If you wish to have components displayed next to one another, use HorizontalArrangement instead.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="2"/>
    <LangSpecProperty key="ya-prop-1" value="AlignHorizontal/read-write-property/number/A number that encodes how contents of the arrangement are aligned horizontally. The choices are: 1 = left aligned, 2 = horizontally centered, 3 = right aligned. Alignment has no effect if the arrangement&apos;s width is automatic."/>
    <LangSpecProperty key="ya-prop-2" value="AlignVertical/read-write-property/number/A number that encodes how the contents of the arrangement are aligned vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom. Alignment has no effect if the arrangement&apos;s height is automatic."/>
    <LangSpecProperty key="ya-prop-3" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-4" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-5" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-6" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-7" value="Width/read-write-property/number/"/>
  </LangSpecProperties>
</BlockGenus>

<!-- VideoPlayer Component -->

<BlockGenus name="VideoPlayer" initlabel="VideoPlayer"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>A multimedia component capable of playing videos. When the application is run, the VideoPlayer will be displayed as a rectangle on-screen. If the user touches the rectangle, controls will appear to play/pause, skip ahead, and skip backward within the video. The application can also control behavior by calling the Start, Pause, and SeekTo methods. Video files should be in Windows Media Video (.wmv) format, 3GPP (.3gp), or MPEG-4 (.mp4). For more details about legal formats, see Android Supported Media Formats. App Inventor for Android only permits video files under 1 MB and limits the total size of an application to 5 MB, not all of which is available for media (video, audio, and sound) files. If your media files are too large, you may get errors when packaging or installing your application, in which case you should reduce the number of media files or their sizes. Most video editing software, such as Windows Movie Maker and Apple iMovie, can help you decrease the size of videos by shortening them or re-encoding the video into a more compact format.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="4"/>
    <LangSpecProperty key="ya-event-1" value="VideoPlayer-Completed"/>
    <LangSpecProperty key="ya-prop-1" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-2" value="FullScreen/read-write-property/boolean/"/>
    <LangSpecProperty key="ya-prop-3" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-4" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-5" value="Source/write-only-property/text/The &quot;path&quot; to the video. Usually, this will be the name of the video file, which should be added in the Designer."/>
    <LangSpecProperty key="ya-prop-6" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-7" value="Width/read-write-property/number/"/>
    <LangSpecProperty key="ya-method-1" value="VideoPlayer-GetDuration"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-VideoPlayer-GetDuration"/>
    <LangSpecProperty key="ya-method-2" value="VideoPlayer-Pause"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-VideoPlayer-Pause"/>
    <LangSpecProperty key="ya-method-3" value="VideoPlayer-SeekTo"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-VideoPlayer-SeekTo"/>
    <LangSpecProperty key="ya-method-4" value="VideoPlayer-Start"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-VideoPlayer-Start"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="VideoPlayer-Completed" initlabel="Completed"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Indicates that the video has reached the end</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="VideoPlayer-VideoPlayerError" initlabel="VideoPlayerError"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>The VideoPlayerError event is no longer used. Please use the Screen.ErrorOccurred event instead.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="message"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="message/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="VideoPlayer-GetDuration" decorator="call" initlabel="GetDuration"
            kind="function" color="call">
  <description>
    <text>Returns duration of the video in milliseconds.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-VideoPlayer-GetDuration" decorator="call" initlabel="GetDuration"
            kind="function" color="call">
  <description>
    <text>Returns duration of the video in milliseconds.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="number"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="VideoPlayer-Pause" decorator="call" initlabel="Pause"
            kind="command" color="call">
  <description>
    <text>Pauses playback of the video. Playback can be resumed at the same location by calling the Start method.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-VideoPlayer-Pause" decorator="call" initlabel="Pause"
            kind="command" color="call">
  <description>
    <text>Pauses playback of the video. Playback can be resumed at the same location by calling the Start method.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="VideoPlayer-SeekTo" decorator="call" initlabel="SeekTo"
            kind="command" color="call">
  <description>
    <text>Seeks to the requested time (specified in milliseconds) in the video. Note that if the video is paused, the frame shown will not be updated by the seek.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="ms" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="ms/value"/>
    <LangSpecProperty key="socket-allow-2" value="ms/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-VideoPlayer-SeekTo" decorator="call" initlabel="SeekTo"
            kind="command" color="call">
  <description>
    <text>Seeks to the requested time (specified in milliseconds) in the video. Note that if the video is paused, the frame shown will not be updated by the seek.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="ms" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="ms/value"/>
    <LangSpecProperty key="socket-allow-4" value="ms/number"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="VideoPlayer-Start" decorator="call" initlabel="Start"
            kind="command" color="call">
  <description>
    <text>Starts playback of the video.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-VideoPlayer-Start" decorator="call" initlabel="Start"
            kind="command" color="call">
  <description>
    <text>Starts playback of the video.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Voting Component -->

<BlockGenus name="Voting" initlabel="Voting"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>The Voting component enables users to vote on a question by communicating with a Web service to retrieve a ballot and later sending back users&apos; votes.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="1"/>
    <LangSpecProperty key="ya-event-1" value="Voting-GotBallot"/>
    <LangSpecProperty key="ya-event-2" value="Voting-GotBallotConfirmation"/>
    <LangSpecProperty key="ya-event-3" value="Voting-NoOpenPoll"/>
    <LangSpecProperty key="ya-event-4" value="Voting-WebServiceError"/>
    <LangSpecProperty key="ya-prop-1" value="BallotOptions/read-only-property/list/The list of ballot options."/>
    <LangSpecProperty key="ya-prop-2" value="BallotQuestion/read-only-property/text/The question to be voted on."/>
    <LangSpecProperty key="ya-prop-3" value="ServiceURL/read-write-property/text/The URL of the Voting service"/>
    <LangSpecProperty key="ya-prop-4" value="UserChoice/read-write-property/text/The ballot choice to send to the server, which must be set before SendBallot is called. This must be one of BallotOptions."/>
    <LangSpecProperty key="ya-prop-5" value="UserEmailAddress/read-only-property/text/The email address associated with this device. This property has been deprecated and always returns the empty text value."/>
    <LangSpecProperty key="ya-prop-6" value="UserId/read-write-property/text/A text identifying the voter that is sent to the Voting server along with the vote. This must be set before SendBallot is called."/>
    <LangSpecProperty key="ya-method-1" value="Voting-RequestBallot"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-Voting-RequestBallot"/>
    <LangSpecProperty key="ya-method-2" value="Voting-SendBallot"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-Voting-SendBallot"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Voting-GotBallot" initlabel="GotBallot"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event indicating that a ballot was retrieved from the Web service and that the properties BallotQuestion and BallotOptions have been set. This is always preceded by a call to the method RequestBallot.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Voting-GotBallotConfirmation" initlabel="GotBallotConfirmation"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event confirming that the Voting service received the ballot.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Voting-NoOpenPoll" initlabel="NoOpenPoll"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event indicating that the service has no open poll.</text>
  </description>
  <BlockConnectors>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Voting-WebServiceError" initlabel="WebServiceError"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event indicating that the communication with the Web service resulted in an error.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="message" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="message"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="message/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="Voting-RequestBallot" decorator="call" initlabel="RequestBallot"
            kind="command" color="call">
  <description>
    <text>Send a request for a ballot to the Web service specified by the property ServiceURL. When the completes, one of the following events will be raised: GotBallot, NoOpenPoll, or WebServiceError.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Voting-RequestBallot" decorator="call" initlabel="RequestBallot"
            kind="command" color="call">
  <description>
    <text>Send a request for a ballot to the Web service specified by the property ServiceURL. When the completes, one of the following events will be raised: GotBallot, NoOpenPoll, or WebServiceError.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Voting-SendBallot" decorator="call" initlabel="SendBallot"
            kind="command" color="call">
  <description>
    <text>Send a completed ballot to the Web service. This should not be called until the properties UserId and UserChoice have been set by the application.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Voting-SendBallot" decorator="call" initlabel="SendBallot"
            kind="command" color="call">
  <description>
    <text>Send a completed ballot to the Web service. This should not be called until the properties UserId and UserChoice have been set by the application.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<!-- Web Component -->

<BlockGenus name="Web" initlabel="Web"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Non-visible component that provides functions for HTTP GET, POST, PUT, and DELETE requests.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="3"/>
    <LangSpecProperty key="ya-event-1" value="Web-GotFile"/>
    <LangSpecProperty key="ya-event-2" value="Web-GotText"/>
    <LangSpecProperty key="ya-prop-1" value="AllowCookies/read-write-property/boolean/Whether the cookies from a response should be saved and used in subsequent requests. Cookies are only supported on Android version 2.3 or greater."/>
    <LangSpecProperty key="ya-prop-2" value="RequestHeaders/read-write-property/list/The request headers, as a list of two-element sublists. The first element of each sublist represents the request header field name. The second element of each sublist represents the request header field values, either a single value or a list containing multiple values."/>
    <LangSpecProperty key="ya-prop-3" value="ResponseFileName/read-write-property/text/The name of the file where the response should be saved. If SaveResponse is true and ResponseFileName is empty, then a new file name will be generated."/>
    <LangSpecProperty key="ya-prop-4" value="SaveResponse/read-write-property/boolean/Whether the response should be saved in a file."/>
    <LangSpecProperty key="ya-prop-5" value="Url/read-write-property/text/The URL for the web request."/>
    <LangSpecProperty key="ya-method-1" value="Web-BuildRequestData"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-Web-BuildRequestData"/>
    <LangSpecProperty key="ya-method-2" value="Web-ClearCookies"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-Web-ClearCookies"/>
    <LangSpecProperty key="ya-method-3" value="Web-Delete"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-Web-Delete"/>
    <LangSpecProperty key="ya-method-4" value="Web-Get"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-Web-Get"/>
    <LangSpecProperty key="ya-method-5" value="Web-HtmlTextDecode"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-Web-HtmlTextDecode"/>
    <LangSpecProperty key="ya-method-6" value="Web-JsonTextDecode"/>
    <LangSpecProperty key="ya-type-method-6" value="Type-Web-JsonTextDecode"/>
    <LangSpecProperty key="ya-method-7" value="Web-PostFile"/>
    <LangSpecProperty key="ya-type-method-7" value="Type-Web-PostFile"/>
    <LangSpecProperty key="ya-method-8" value="Web-PostText"/>
    <LangSpecProperty key="ya-type-method-8" value="Type-Web-PostText"/>
    <LangSpecProperty key="ya-method-9" value="Web-PostTextWithEncoding"/>
    <LangSpecProperty key="ya-type-method-9" value="Type-Web-PostTextWithEncoding"/>
    <LangSpecProperty key="ya-method-10" value="Web-PutFile"/>
    <LangSpecProperty key="ya-type-method-10" value="Type-Web-PutFile"/>
    <LangSpecProperty key="ya-method-11" value="Web-PutText"/>
    <LangSpecProperty key="ya-type-method-11" value="Type-Web-PutText"/>
    <LangSpecProperty key="ya-method-12" value="Web-PutTextWithEncoding"/>
    <LangSpecProperty key="ya-type-method-12" value="Type-Web-PutTextWithEncoding"/>
    <LangSpecProperty key="ya-method-13" value="Web-UriEncode"/>
    <LangSpecProperty key="ya-type-method-13" value="Type-Web-UriEncode"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleEvent -->

<BlockGenus name="Web-GotFile" initlabel="GotFile"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event indicating that a request has finished.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="url" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="url"/>
    </BlockConnector>
    <BlockConnector label="responseCode" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="responseCode"/>
    </BlockConnector>
    <BlockConnector label="responseType" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="responseType"/>
    </BlockConnector>
    <BlockConnector label="fileName" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="fileName"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="url/argument"/>
    <LangSpecProperty key="socket-allow-2" value="responseCode/argument"/>
    <LangSpecProperty key="socket-allow-3" value="responseType/argument"/>
    <LangSpecProperty key="socket-allow-4" value="fileName/argument"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Web-GotText" initlabel="GotText"
            kind="command" decorator="when"
            is-starter="yes" is-terminator="yes" color="event">
  <description>
    <text>Event indicating that a request has finished.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="url" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="url"/>
    </BlockConnector>
    <BlockConnector label="responseCode" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="responseCode"/>
    </BlockConnector>
    <BlockConnector label="responseType" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="responseType"/>
    </BlockConnector>
    <BlockConnector label="responseContent" connector-kind="socket" connector-type="poly">
      <DefaultArg genus-name="argument" label="responseContent"/>
    </BlockConnector>
  <BlockConnector connector-kind="socket" label="do" is-indented="yes" connector-type="cmd"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentEvent"/>
    <LangSpecProperty key="socket-allow-1" value="url/argument"/>
    <LangSpecProperty key="socket-allow-2" value="responseCode/argument"/>
    <LangSpecProperty key="socket-allow-3" value="responseType/argument"/>
    <LangSpecProperty key="socket-allow-4" value="responseContent/argument"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="Web-BuildRequestData" decorator="call" initlabel="BuildRequestData"
            kind="function" color="call">
  <description>
    <text>Converts a list of two-element sublists, representing name and value pairs, to a string formatted as application/x-www-form-urlencoded media type, suitable to pass to PostText.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="list/value"/>
    <LangSpecProperty key="socket-allow-2" value="list/list"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Web-BuildRequestData" decorator="call" initlabel="BuildRequestData"
            kind="function" color="call">
  <description>
    <text>Converts a list of two-element sublists, representing name and value pairs, to a string formatted as application/x-www-form-urlencoded media type, suitable to pass to PostText.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="list" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="list/value"/>
    <LangSpecProperty key="socket-allow-4" value="list/list"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Web-ClearCookies" decorator="call" initlabel="ClearCookies"
            kind="command" color="call">
  <description>
    <text>Clears all cookies for this Web component.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Web-ClearCookies" decorator="call" initlabel="ClearCookies"
            kind="command" color="call">
  <description>
    <text>Clears all cookies for this Web component.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Web-Delete" decorator="call" initlabel="Delete"
            kind="command" color="call">
  <description>
    <text>Performs an HTTP DELETE request using the Url property and retrieves the response. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Web-Delete" decorator="call" initlabel="Delete"
            kind="command" color="call">
  <description>
    <text>Performs an HTTP DELETE request using the Url property and retrieves the response. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Web-Get" decorator="call" initlabel="Get"
            kind="command" color="call">
  <description>
    <text>Performs an HTTP GET request using the Url property and retrieves the response. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Web-Get" decorator="call" initlabel="Get"
            kind="command" color="call">
  <description>
    <text>Performs an HTTP GET request using the Url property and retrieves the response. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Web-HtmlTextDecode" decorator="call" initlabel="HtmlTextDecode"
            kind="function" color="call">
  <description>
    <text>Decodes the given HTML text value. HTML character entities such as &amp;amp;, &amp;lt;, &amp;gt;, &amp;apos;, and &amp;quot; are changed to &amp;, &lt;, &gt;, &apos;, and &quot;. Entities such as &amp;#xhhhh, and &amp;#nnnn are changed to the appropriate characters.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="htmlText" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="htmlText/value"/>
    <LangSpecProperty key="socket-allow-2" value="htmlText/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Web-HtmlTextDecode" decorator="call" initlabel="HtmlTextDecode"
            kind="function" color="call">
  <description>
    <text>Decodes the given HTML text value. HTML character entities such as &amp;amp;, &amp;lt;, &amp;gt;, &amp;apos;, and &amp;quot; are changed to &amp;, &lt;, &gt;, &apos;, and &quot;. Entities such as &amp;#xhhhh, and &amp;#nnnn are changed to the appropriate characters.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="htmlText" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="htmlText/value"/>
    <LangSpecProperty key="socket-allow-4" value="htmlText/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Web-JsonTextDecode" decorator="call" initlabel="JsonTextDecode"
            kind="function" color="call">
  <description>
    <text>Decodes the given JSON encoded value to produce a corresponding AppInventor value. A JSON list [x, y, z] decodes to a list (x y z), A JSON object with name A and value B, (denoted as A:B enclosed in curly braces) decodes to a list ((A B)), that is, a list containing the two-element list (A B).</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="jsonText" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="type-exclude-1" value="argument"/>
    <LangSpecProperty key="socket-allow-1" value="jsonText/value"/>
    <LangSpecProperty key="socket-allow-2" value="jsonText/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Web-JsonTextDecode" decorator="call" initlabel="JsonTextDecode"
            kind="function" color="call">
  <description>
    <text>Decodes the given JSON encoded value to produce a corresponding AppInventor value. A JSON list [x, y, z] decodes to a list (x y z), A JSON object with name A and value B, (denoted as A:B enclosed in curly braces) decodes to a list ((A B)), that is, a list containing the two-element list (A B).</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="jsonText" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="type-exclude-1" value="argument"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="jsonText/value"/>
    <LangSpecProperty key="socket-allow-4" value="jsonText/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Web-PostFile" decorator="call" initlabel="PostFile"
            kind="command" color="call">
  <description>
    <text>Performs an HTTP POST request using the Url property and data from the specified file. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="path" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="path/value"/>
    <LangSpecProperty key="socket-allow-2" value="path/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Web-PostFile" decorator="call" initlabel="PostFile"
            kind="command" color="call">
  <description>
    <text>Performs an HTTP POST request using the Url property and data from the specified file. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="path" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="path/value"/>
    <LangSpecProperty key="socket-allow-4" value="path/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Web-PostText" decorator="call" initlabel="PostText"
            kind="command" color="call">
  <description>
    <text>Performs an HTTP POST request using the Url property and the specified text. The characters of the text are encoded using UTF-8 encoding. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The responseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="text/value"/>
    <LangSpecProperty key="socket-allow-2" value="text/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Web-PostText" decorator="call" initlabel="PostText"
            kind="command" color="call">
  <description>
    <text>Performs an HTTP POST request using the Url property and the specified text. The characters of the text are encoded using UTF-8 encoding. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The responseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="text/value"/>
    <LangSpecProperty key="socket-allow-4" value="text/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Web-PostTextWithEncoding" decorator="call" initlabel="PostTextWithEncoding"
            kind="command" color="call">
  <description>
    <text>Performs an HTTP POST request using the Url property and the specified text. The characters of the text are encoded using the given encoding. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="encoding" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="text/value"/>
    <LangSpecProperty key="socket-allow-2" value="encoding/value"/>
    <LangSpecProperty key="socket-allow-3" value="text/text"/>
    <LangSpecProperty key="socket-allow-4" value="encoding/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Web-PostTextWithEncoding" decorator="call" initlabel="PostTextWithEncoding"
            kind="command" color="call">
  <description>
    <text>Performs an HTTP POST request using the Url property and the specified text. The characters of the text are encoded using the given encoding. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="encoding" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="text/value"/>
    <LangSpecProperty key="socket-allow-4" value="encoding/value"/>
    <LangSpecProperty key="socket-allow-5" value="text/text"/>
    <LangSpecProperty key="socket-allow-6" value="encoding/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Web-PutFile" decorator="call" initlabel="PutFile"
            kind="command" color="call">
  <description>
    <text>Performs an HTTP PUT request using the Url property and data from the specified file. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="path" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="path/value"/>
    <LangSpecProperty key="socket-allow-2" value="path/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Web-PutFile" decorator="call" initlabel="PutFile"
            kind="command" color="call">
  <description>
    <text>Performs an HTTP PUT request using the Url property and data from the specified file. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="path" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="path/value"/>
    <LangSpecProperty key="socket-allow-4" value="path/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Web-PutText" decorator="call" initlabel="PutText"
            kind="command" color="call">
  <description>
    <text>Performs an HTTP PUT request using the Url property and the specified text. The characters of the text are encoded using UTF-8 encoding. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The responseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="text/value"/>
    <LangSpecProperty key="socket-allow-2" value="text/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Web-PutText" decorator="call" initlabel="PutText"
            kind="command" color="call">
  <description>
    <text>Performs an HTTP PUT request using the Url property and the specified text. The characters of the text are encoded using UTF-8 encoding. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The responseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="text/value"/>
    <LangSpecProperty key="socket-allow-4" value="text/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Web-PutTextWithEncoding" decorator="call" initlabel="PutTextWithEncoding"
            kind="command" color="call">
  <description>
    <text>Performs an HTTP PUT request using the Url property and the specified text. The characters of the text are encoded using the given encoding. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="encoding" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="text/value"/>
    <LangSpecProperty key="socket-allow-2" value="encoding/value"/>
    <LangSpecProperty key="socket-allow-3" value="text/text"/>
    <LangSpecProperty key="socket-allow-4" value="encoding/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Web-PutTextWithEncoding" decorator="call" initlabel="PutTextWithEncoding"
            kind="command" color="call">
  <description>
    <text>Performs an HTTP PUT request using the Url property and the specified text. The characters of the text are encoded using the given encoding. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="encoding" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="text/value"/>
    <LangSpecProperty key="socket-allow-4" value="encoding/value"/>
    <LangSpecProperty key="socket-allow-5" value="text/text"/>
    <LangSpecProperty key="socket-allow-6" value="encoding/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Web-UriEncode" decorator="call" initlabel="UriEncode"
            kind="function" color="call">
  <description>
    <text>Encodes the given text value so that it can be used in a URL.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="text/value"/>
    <LangSpecProperty key="socket-allow-2" value="text/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-Web-UriEncode" decorator="call" initlabel="UriEncode"
            kind="function" color="call">
  <description>
    <text>Encodes the given text value so that it can be used in a URL.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="text" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="text"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="text/value"/>
    <LangSpecProperty key="socket-allow-4" value="text/text"/>
  </LangSpecProperties>
</BlockGenus>

<!-- WebViewer Component -->

<BlockGenus name="WebViewer" initlabel="WebViewer"
            label-unique="yes" editable-label="no" kind="command"
            is-starter="yes" is-terminator="yes" color="grey">
  <description>
    <text>Component for viewing Web pages. The Home URL can be specified in the Designer or in the Blocks Editor. The view can be set to follow links when they are tapped, and users can fill in Web forms. Warning: This is not a full browser. For example, pressing the phone&apos;s hardware Back key will exit the app, rather than move back in the browser history.</text>
  </description>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="component"/>
    <LangSpecProperty key="component-version" value="3"/>
    <LangSpecProperty key="ya-prop-1" value="Column/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-2" value="CurrentPageTitle/read-only-property/text/Title of the page currently viewed"/>
    <LangSpecProperty key="ya-prop-3" value="CurrentUrl/read-only-property/text/URL of the page currently viewed. This could be different from the Home URL if new pages were visited by following links."/>
    <LangSpecProperty key="ya-prop-4" value="FollowLinks/read-write-property/boolean/Determines whether to follow links when they are tapped in the WebViewer. If you follow links, you can use GoBack and GoForward to navigate the browser history."/>
    <LangSpecProperty key="ya-prop-5" value="Height/read-write-property/number/"/>
    <LangSpecProperty key="ya-prop-6" value="HomeUrl/read-write-property/text/URL of the page the WebViewer should initially open to. Setting this will load the page."/>
    <LangSpecProperty key="ya-prop-7" value="PromptforPermission/read-write-property/boolean/If True, then prompt the user of the WebView to give permission to access the geolocation API. If False, then assume permission is granted."/>
    <LangSpecProperty key="ya-prop-8" value="Row/invisible-property/number/"/>
    <LangSpecProperty key="ya-prop-9" value="UsesLocation/invisible-property/boolean/Whether or not to give the application permission to use the Javascript geolocation API."/>
    <LangSpecProperty key="ya-prop-10" value="Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."/>
    <LangSpecProperty key="ya-prop-11" value="Width/read-write-property/number/"/>
    <LangSpecProperty key="ya-method-1" value="WebViewer-CanGoBack"/>
    <LangSpecProperty key="ya-type-method-1" value="Type-WebViewer-CanGoBack"/>
    <LangSpecProperty key="ya-method-2" value="WebViewer-CanGoForward"/>
    <LangSpecProperty key="ya-type-method-2" value="Type-WebViewer-CanGoForward"/>
    <LangSpecProperty key="ya-method-3" value="WebViewer-ClearLocations"/>
    <LangSpecProperty key="ya-type-method-3" value="Type-WebViewer-ClearLocations"/>
    <LangSpecProperty key="ya-method-4" value="WebViewer-GoBack"/>
    <LangSpecProperty key="ya-type-method-4" value="Type-WebViewer-GoBack"/>
    <LangSpecProperty key="ya-method-5" value="WebViewer-GoForward"/>
    <LangSpecProperty key="ya-type-method-5" value="Type-WebViewer-GoForward"/>
    <LangSpecProperty key="ya-method-6" value="WebViewer-GoHome"/>
    <LangSpecProperty key="ya-type-method-6" value="Type-WebViewer-GoHome"/>
    <LangSpecProperty key="ya-method-7" value="WebViewer-GoToUrl"/>
    <LangSpecProperty key="ya-type-method-7" value="Type-WebViewer-GoToUrl"/>
  </LangSpecProperties>
</BlockGenus>

<!-- SimpleFunction -->

<BlockGenus name="WebViewer-CanGoBack" decorator="call" initlabel="CanGoBack"
            kind="function" color="call">
  <description>
    <text>Returns true if the WebViewer can go back in the history list.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="boolean"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-WebViewer-CanGoBack" decorator="call" initlabel="CanGoBack"
            kind="function" color="call">
  <description>
    <text>Returns true if the WebViewer can go back in the history list.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="boolean"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="WebViewer-CanGoForward" decorator="call" initlabel="CanGoForward"
            kind="function" color="call">
  <description>
    <text>Returns true if the WebViewer can go forward in the history list.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="plug-type-1" value="boolean"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-WebViewer-CanGoForward" decorator="call" initlabel="CanGoForward"
            kind="function" color="call">
  <description>
    <text>Returns true if the WebViewer can go forward in the history list.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="" connector-kind="plug" connector-type="poly" />
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="plug-type-1" value="boolean"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="WebViewer-ClearLocations" decorator="call" initlabel="ClearLocations"
            kind="command" color="call">
  <description>
    <text>Clear stored location permissions.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-WebViewer-ClearLocations" decorator="call" initlabel="ClearLocations"
            kind="command" color="call">
  <description>
    <text>Clear stored location permissions.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="WebViewer-GoBack" decorator="call" initlabel="GoBack"
            kind="command" color="call">
  <description>
    <text>Go back to the previous page in the history list. Does nothing if there is no previous page.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-WebViewer-GoBack" decorator="call" initlabel="GoBack"
            kind="command" color="call">
  <description>
    <text>Go back to the previous page in the history list. Does nothing if there is no previous page.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="WebViewer-GoForward" decorator="call" initlabel="GoForward"
            kind="command" color="call">
  <description>
    <text>Go forward to the next page in the history list. Does nothing if there is no next page.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-WebViewer-GoForward" decorator="call" initlabel="GoForward"
            kind="command" color="call">
  <description>
    <text>Go forward to the next page in the history list. Does nothing if there is no next page.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="WebViewer-GoHome" decorator="call" initlabel="GoHome"
            kind="command" color="call">
  <description>
    <text>Loads the home URL page. This happens automatically when the home URL is changed.</text>
  </description>
  <BlockConnectors>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-WebViewer-GoHome" decorator="call" initlabel="GoHome"
            kind="command" color="call">
  <description>
    <text>Loads the home URL page. This happens automatically when the home URL is changed.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="WebViewer-GoToUrl" decorator="call" initlabel="GoToUrl"
            kind="command" color="call">
  <description>
    <text>Load the page at the given URL.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="url" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentMethod" />
    <LangSpecProperty key="socket-allow-1" value="url/value"/>
    <LangSpecProperty key="socket-allow-2" value="url/text"/>
  </LangSpecProperties>
</BlockGenus>

<BlockGenus name="Type-WebViewer-GoToUrl" decorator="call" initlabel="GoToUrl"
            kind="command" color="call">
  <description>
    <text>Load the page at the given URL.</text>
  </description>
  <BlockConnectors>
    <BlockConnector label="component" connector-kind="socket" connector-type="poly"/>
    <BlockConnector label="url" connector-kind="socket" connector-type="poly"/>
  </BlockConnectors>
  <LangSpecProperties>
    <LangSpecProperty key="ya-kind" value="componentTypeMethod" />
    <LangSpecProperty key="is-from-component-type" value="true"/>
    <LangSpecProperty key="socket-allow-1" value="component/value"/>
    <LangSpecProperty key="socket-allow-2" value="component/component"/>
    <LangSpecProperty key="socket-allow-3" value="url/value"/>
    <LangSpecProperty key="socket-allow-4" value="url/text"/>
  </LangSpecProperties>
</BlockGenus>


<!-- COMPONENTS END HERE -->
  </BlockGenuses>

  <!-- Block Families -->
  <BlockFamilies>

    <BlockFamily>
      <FamilyMember>number</FamilyMember>
      <FamilyMember>text</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>true</FamilyMember>
      <FamilyMember>false</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>number-min</FamilyMember>
      <FamilyMember>number-max</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>number-sin</FamilyMember>
      <FamilyMember>number-cos</FamilyMember>
      <FamilyMember>number-tan</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>number-asin</FamilyMember>
      <FamilyMember>number-acos</FamilyMember>
      <FamilyMember>number-atan</FamilyMember>
      <FamilyMember>number-radians-to-degrees</FamilyMember>
      <FamilyMember>number-degrees-to-radians</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>number-quotient</FamilyMember>
      <FamilyMember>number-remainder</FamilyMember>
      <FamilyMember>number-modulo</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>number-abs</FamilyMember>
      <FamilyMember>number-round</FamilyMember>
      <FamilyMember>number-floor</FamilyMember>
      <FamilyMember>number-ceiling</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>number-exp</FamilyMember>
      <FamilyMember>number-log</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>greaterthan</FamilyMember>
      <FamilyMember>greaterthanorequal</FamilyMember>
      <FamilyMember>lessthan</FamilyMember>
      <FamilyMember>lessthanorequal</FamilyMember>
      <FamilyMember>yail-equal</FamilyMember>
      <FamilyMember>yail-not-equal</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>string-less-than</FamilyMember>
      <FamilyMember>string-equal</FamilyMember>
      <FamilyMember>string-greater-than</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>string-upcase</FamilyMember>
      <FamilyMember>string-downcase</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>number-plus</FamilyMember>
      <FamilyMember>number-minus</FamilyMember>
      <FamilyMember>number-times</FamilyMember>
      <FamilyMember>number-divide</FamilyMember>
    </BlockFamily>

    <BlockFamily>
      <FamilyMember>color-none</FamilyMember>
      <FamilyMember>color-black</FamilyMember>
      <FamilyMember>color-blue</FamilyMember>
      <FamilyMember>color-cyan</FamilyMember>
      <FamilyMember>color-dark-gray</FamilyMember>
      <FamilyMember>color-gray</FamilyMember>
      <FamilyMember>color-green</FamilyMember>
      <FamilyMember>color-light-gray</FamilyMember>
      <FamilyMember>color-magenta</FamilyMember>
      <FamilyMember>color-orange</FamilyMember>
      <FamilyMember>color-pink</FamilyMember>
      <FamilyMember>color-red</FamilyMember>
      <FamilyMember>color-white</FamilyMember>
      <FamilyMember>color-yellow</FamilyMember>
    </BlockFamily>

  </BlockFamilies>

  <!-- Drawers -->
  <!-- TODO(gleitz): uncomment and implement genusmembers if needed -->
  <BlockDrawerSets>
    <BlockDrawerSet name="Factory" type="stack" location="southwest" window-per-drawer="no" drawer-draggable="no">
      <BlockDrawer name="Definition" button-color="setter">
        <BlockGenusMember>define</BlockGenusMember>
        <BlockGenusMember>define-void</BlockGenusMember>
        <BlockGenusMember>def</BlockGenusMember>
        <BlockGenusMember>argument</BlockGenusMember>
        <BlockGenusMember>glue</BlockGenusMember>
      </BlockDrawer>

      <BlockDrawer name="Text" button-color="text">
        <BlockGenusMember>text</BlockGenusMember>
        <BlockGenusMember>string-append</BlockGenusMember>
        <BlockGenusMember>string-vappend</BlockGenusMember>
        <BlockGenusMember>string-length</BlockGenusMember>
        <BlockGenusMember>string-empty?</BlockGenusMember>
        <BlockGenusMember>string-less-than</BlockGenusMember>
        <BlockGenusMember>string-equal</BlockGenusMember>
        <BlockGenusMember>string-greater-than</BlockGenusMember>
        <BlockGenusMember>string-trim</BlockGenusMember>
        <BlockGenusMember>string-upcase</BlockGenusMember>
        <BlockGenusMember>string-downcase</BlockGenusMember>
        <BlockGenusMember>string-starts-at</BlockGenusMember>
        <BlockGenusMember>string-contains</BlockGenusMember>
        <BlockGenusMember>string-split-at-first</BlockGenusMember>
        <BlockGenusMember>string-split-at-first-of-any</BlockGenusMember>
        <BlockGenusMember>string-split</BlockGenusMember>
        <BlockGenusMember>string-split-at-any</BlockGenusMember>
        <BlockGenusMember>string-split-at-spaces</BlockGenusMember>
        <BlockGenusMember>string-subtext</BlockGenusMember>
        <BlockGenusMember>string-replace-all</BlockGenusMember>
       </BlockDrawer>

      <BlockDrawer name="Lists" button-color="list">
        <BlockGenusMember>make-list</BlockGenusMember>
        <BlockGenusMember>get-list-item</BlockGenusMember>
        <BlockGenusMember>replace-list-item</BlockGenusMember>
        <BlockGenusMember>remove-list-item</BlockGenusMember>
        <BlockGenusMember>insert-list-item</BlockGenusMember>
        <BlockGenusMember>list-length</BlockGenusMember>
        <!--
        These were removed and the implementation commented
        out in runtime.scm
        <BlockGenusMember>list-first</BlockGenusMember>
        <BlockGenusMember>list-rest</BlockGenusMember>
        -->
        <BlockGenusMember>append-list</BlockGenusMember>
        <BlockGenusMember>add-items-to-list</BlockGenusMember>
        <BlockGenusMember>list-member</BlockGenusMember>
        <BlockGenusMember>list-index</BlockGenusMember>
        <BlockGenusMember>list-pick-random</BlockGenusMember>
        <BlockGenusMember>list-empty?</BlockGenusMember>
        <BlockGenusMember>list-copy</BlockGenusMember>
        <BlockGenusMember>is-list?</BlockGenusMember>
        <BlockGenusMember>list-to-csv-row</BlockGenusMember>
        <BlockGenusMember>list-to-csv-table</BlockGenusMember>
        <BlockGenusMember>list-from-csv-row</BlockGenusMember>
        <BlockGenusMember>list-from-csv-table</BlockGenusMember>
        <BlockGenusMember>list-lookup-in-pairs</BlockGenusMember>

      </BlockDrawer>

      <BlockDrawer name="Math" button-color="math">
        <BlockGenusMember>number</BlockGenusMember>
        <BlockGenusMember>greaterthan</BlockGenusMember>
        <BlockGenusMember>greaterthanorequal</BlockGenusMember>
        <BlockGenusMember>lessthan</BlockGenusMember>
        <BlockGenusMember>lessthanorequal</BlockGenusMember>
        <BlockGenusMember>yail-equal</BlockGenusMember>
        <BlockGenusMember>yail-not-equal</BlockGenusMember>
        <BlockGenusMember>number-plus</BlockGenusMember>
        <BlockGenusMember>number-minus</BlockGenusMember>
        <BlockGenusMember>number-times</BlockGenusMember>
        <BlockGenusMember>number-divide</BlockGenusMember>
        <BlockGenusMember>number-sqrt</BlockGenusMember>
        <BlockGenusMember>number-random-fraction</BlockGenusMember>
        <BlockGenusMember>number-random-integer</BlockGenusMember>
        <BlockGenusMember>number-random-set-seed</BlockGenusMember>
        <BlockGenusMember>number-negate</BlockGenusMember>
        <BlockGenusMember>number-min</BlockGenusMember>
        <BlockGenusMember>number-max</BlockGenusMember>
        <BlockGenusMember>number-quotient</BlockGenusMember>
        <BlockGenusMember>number-remainder</BlockGenusMember>
        <BlockGenusMember>number-modulo</BlockGenusMember>
        <BlockGenusMember>number-abs</BlockGenusMember>
        <BlockGenusMember>number-round</BlockGenusMember>
        <BlockGenusMember>number-floor</BlockGenusMember>
        <BlockGenusMember>number-ceiling</BlockGenusMember>
        <BlockGenusMember>number-expt</BlockGenusMember>
        <BlockGenusMember>number-exp</BlockGenusMember>
        <BlockGenusMember>number-log</BlockGenusMember>
        <BlockGenusMember>number-sin</BlockGenusMember>
        <BlockGenusMember>number-cos</BlockGenusMember>
        <BlockGenusMember>number-tan</BlockGenusMember>
        <BlockGenusMember>number-asin</BlockGenusMember>
        <BlockGenusMember>number-acos</BlockGenusMember>
        <BlockGenusMember>number-atan</BlockGenusMember>
        <BlockGenusMember>number-atan2</BlockGenusMember>
        <BlockGenusMember>number-radians-to-degrees</BlockGenusMember>
        <BlockGenusMember>number-degrees-to-radians</BlockGenusMember>
        <BlockGenusMember>format-as-decimal</BlockGenusMember>
        <BlockGenusMember>number-is-number?</BlockGenusMember>
      </BlockDrawer>

      <BlockDrawer name="Logic" button-color="logic">
        <BlockGenusMember>true</BlockGenusMember>
        <BlockGenusMember>false</BlockGenusMember>
        <BlockGenusMember>logical-not</BlockGenusMember>
        <BlockGenusMember>yail-equal</BlockGenusMember>
        <BlockGenusMember>and</BlockGenusMember>
        <BlockGenusMember>or</BlockGenusMember>
      </BlockDrawer>

      <BlockDrawer name="Control" button-color="control">
        <BlockGenusMember>if</BlockGenusMember>
        <BlockGenusMember>ifelse</BlockGenusMember>
        <BlockGenusMember>choose</BlockGenusMember>
        <BlockGenusMember>foreach</BlockGenusMember>
        <BlockGenusMember>forrange</BlockGenusMember>
        <BlockGenusMember>while</BlockGenusMember>
        <BlockGenusMember>open-another-screen</BlockGenusMember>
        <BlockGenusMember>open-another-screen-with-start-value</BlockGenusMember>
        <BlockGenusMember>get-start-value</BlockGenusMember>
        <BlockGenusMember>close-screen</BlockGenusMember>
        <BlockGenusMember>close-screen-with-value</BlockGenusMember>
        <BlockGenusMember>close-application</BlockGenusMember>
        <BlockGenusMember>get-plain-start-text</BlockGenusMember>
        <BlockGenusMember>close-screen-with-plain-text</BlockGenusMember>
      </BlockDrawer>

      <BlockDrawer name="Colors" button-color="colors">
        <BlockGenusMember>make-color</BlockGenusMember>
        <BlockGenusMember>split-color</BlockGenusMember>
        <BlockGenusMember>color-none</BlockGenusMember>
        <BlockGenusMember>color-black</BlockGenusMember>
        <BlockGenusMember>color-blue</BlockGenusMember>
        <BlockGenusMember>color-cyan</BlockGenusMember>
        <BlockGenusMember>color-dark-gray</BlockGenusMember>
        <BlockGenusMember>color-gray</BlockGenusMember>
        <BlockGenusMember>color-green</BlockGenusMember>
        <BlockGenusMember>color-light-gray</BlockGenusMember>
        <BlockGenusMember>color-magenta</BlockGenusMember>
        <BlockGenusMember>color-orange</BlockGenusMember>
        <BlockGenusMember>color-pink</BlockGenusMember>
        <BlockGenusMember>color-red</BlockGenusMember>
        <BlockGenusMember>color-white</BlockGenusMember>
        <BlockGenusMember>color-yellow</BlockGenusMember>
      </BlockDrawer>

    </BlockDrawerSet>
  </BlockDrawerSets>

  <Pages drawer-with-page="yes">
    <!-- note that if the name "My Definitions" is changed, the comparator in
         appinventor/blockslib/src/openblocks/workspace/FactoryManager.java
         needs to be changed as well -->
    <Page page-name=" " page-width="800" page-drawer="My Definitions">
    </Page>
  </Pages>

</BlockLangDef>
