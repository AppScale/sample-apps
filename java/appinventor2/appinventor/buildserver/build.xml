<?xml version="1.0" encoding="UTF-8"?>

<!-- ======================================================================
     Copyright 2011 Google Inc.  All Rights Reserved.
     Author: markf@google.com (Mark Friedman)

     App Inventor build server
     ====================================================================== -->

<project name="buildserver" default="all">
  <description>
    App Inventor build server
  </description>

  <!-- Project Libraries -->

  <target name="all"
          depends="BuildServer">
  </target>

  <target name="tests"
          depends="BuildServerTests,YailGeneratorTests">

  </target>

  <!-- =====================================================================
       Import common directory, task, and target definitions.
       ===================================================================== -->
  <import file="../build-common.xml" />

  <!-- =====================================================================
       Define base package path.
       ===================================================================== -->
  <property name="buildserver.pkg" value="com/google/appinventor/buildserver" />
  <property name="yailgenerator.pkg" value="com/google/appinventor/yailgenerator" />

  <property name="local.lib.dir" location="lib" />
  <property name="run.dir" location="${local.build.dir}/run" />
  <property name="run.lib.dir" location="${run.dir}/lib" />

  <!-- =====================================================================
       Targets
       ===================================================================== -->

  <!-- =====================================================================
       YailGenerator: produces build/YailGenerator.jar
       YailGenerator.jar contains all needed dependencies to run the YAIL
       generator and the main class is set in the manifest.
       It can be run with a "java -jar" command.
       ===================================================================== -->
  <target name="YailGenerator"
          depends="init,common_CommonVersion,blockslib_OpenBlocks">
    <property name="YailGenerator-class.dir" location="${class.dir}/YailGenerator" />
    <mkdir dir="${YailGenerator-class.dir}" />

    <ai.javac encoding="utf-8" destdir="${YailGenerator-class.dir}" debug="on">
      <include name="${yailgenerator.pkg}/**/*.java" />
      <classpath>
        <pathelement location="${build.dir}/blockslib/OpenBlocks.jar" />
        <pathelement location="${build.dir}/common/CommonVersion.jar" />
        <pathelement location="${lib.dir}/guava/guava-14.0.1.jar" />
        <pathelement location="${lib.dir}/commons-io/commons-io-2.0.1.jar" />
        <pathelement location="${lib.dir}/json/json.jar" />
        <pathelement location="${lib.dir}/tablelayout/TableLayout-jdk1.5-2007-04-21.jar" />
      </classpath>
    </ai.javac>
    <jar destfile="${local.build.dir}/YailGenerator.jar">
      <manifest>
        <attribute name="Main-Class"
                   value="com.google.appinventor.yailgenerator.YailGenerator" />
      </manifest>
      <fileset dir="${YailGenerator-class.dir}" />
      <zipfileset src="${build.dir}/blockslib/OpenBlocks.jar"/>
      <zipfileset src="${build.dir}/common/CommonVersion.jar"/>
      <zipfileset src="${lib.dir}/guava/guava-14.0.1.jar" />
      <zipfileset src="${lib.dir}/commons-io/commons-io-2.0.1.jar" />
      <zipfileset src="${lib.dir}/json/json.jar"/>
      <zipfileset src="${lib.dir}/tablelayout/TableLayout-jdk1.5-2007-04-21.jar"/>
    </jar>
  </target>

  <!-- =====================================================================
       YailGeneratorTests: build and run the YailGenerator tests and generate the output results
       ===================================================================== -->

  <path id="libsForYailGeneratorTests.path">
    <pathelement location="${local.build.dir}/YailGenerator.jar" />
    <pathelement location="${build.dir}/common/CommonTestUtils.jar" />
    <pathelement location="${lib.dir}/junit/junit-4.8.2.jar" />
  </path>

  <path id="YailGeneratorTests.path">
    <path refid="libsForYailGeneratorTests.path"/>
    <pathelement location="${local.build.dir}/YailGeneratorTests.jar" />
  </path>

  <target name="YailGeneratorTests"
          depends="common_CommonTestUtils"
          description="build and run the test suite" >
    <ai.dojunit aij-testingtarget="YailGeneratorTests"
                aij-dir="${yailgenerator.pkg}/" >
    </ai.dojunit>
  </target>

  <!-- =====================================================================
       BuildServer: produces build/run/lib/BuildServer.jar
       Note that BuildServer depends on CopyToRunLibDir, which copies all
       the jars needed to compile the build server classes.
       ===================================================================== -->
  <target name="BuildServer"
          depends="init,CopyToRunLibDir,YailGenerator,components_AndroidRuntime,components_ComponentList">
    <property name="BuildServer-class.dir" location="${class.dir}/BuildServer" />
    <mkdir dir="${BuildServer-class.dir}" />

    <ai.javac encoding="utf-8" destdir="${BuildServer-class.dir}" debug="on">
      <include name="${buildserver.pkg}/**/*.java" />
      <classpath>
        <fileset dir="${run.lib.dir}" includes="*.jar" excludes="BuildServer.jar"/>
      </classpath>
    </ai.javac>

    <!-- Copy files that will be loaded as resources -->
    <property name="classes.files.dir" location="${BuildServer-class.dir}/files" />
    <copy todir="${classes.files.dir}" flatten="true">
      <fileset dir="${src.dir}/${buildserver.pkg}/resources" includes="*"/>
      <fileset dir="${build.dir}/components"
               includes="AndroidRuntime.jar,simple_components.txt,simple_components_build_info.json"/>
    </copy>
    <copy toFile="${classes.files.dir}/YailGenerator.jar" file="${local.build.dir}/YailGenerator.jar" />
    <copy toFile="${classes.files.dir}/kawa.jar" file="${lib.dir}/kawa/kawa-1.11-modified.jar" />
    <copy toFile="${classes.files.dir}/acra-4.4.0.jar" file="${lib.dir}/acra/acra-4.4.0.jar" />
    <copy toFile="${classes.files.dir}/twitter4j.jar" file="${lib.dir}/twitter/twitter4j-core-3.0.3.jar" />
    <copy toFile="${classes.files.dir}/twitter4jmedia.jar" file="${lib.dir}/twitter/twitter4j-media-support-3.0.3.jar" />
    <copy toFile="${classes.files.dir}/fusiontables.jar" file="${lib.dir}/fusiontables/fusiontables.jar" />
    <copy toFile="${classes.files.dir}/google-api-client-beta.jar" file="${lib.dir}/oauth/google-api-client-1.10.3-beta.jar" />
    <copy toFile="${classes.files.dir}/google-http-client-beta.jar" file="${lib.dir}/oauth/google-http-client-1.10.3-beta.jar" />
    <copy toFile="${classes.files.dir}/google-api-client-android2-beta.jar" file="${lib.dir}/oauth/google-api-client-android2-1.10.3-beta.jar" />
    <copy toFile="${classes.files.dir}/google-http-client-android2-beta.jar" file="${lib.dir}/oauth/google-http-client-android2-1.10.3-beta.jar" />
    <copy toFile="${classes.files.dir}/google-http-client-android3-beta.jar" file="${lib.dir}/oauth/google-http-client-android3-1.10.3-beta.jar" />
    <copy toFile="${classes.files.dir}/google-oauth-client-beta.jar" file="${lib.dir}/oauth/google-oauth-client-1.10.1-beta.jar" />
    <copy toFile="${classes.files.dir}/guava-14.0.1.jar" file="${lib.dir}/guava/guava-14.0.1.jar" />
    <copy toFile="${classes.files.dir}/android.jar" file="${lib.dir}/android/4.2.2/android.jar" />
    <copy toFile="${classes.files.dir}/dx.jar" file="${lib.dir}/android/tools/dx.jar" />
    <copy toFile="${classes.files.dir}/CommonVersion.jar" file="${build.dir}/common/CommonVersion.jar" />

    <property name="classes.tools.dir" location="${BuildServer-class.dir}/tools" />
    <copy todir="${classes.tools.dir}">
      <fileset dir="${lib.dir}/android/tools" includes="*/aapt" />
    </copy>
    <chmod dir="${classes.tools.dir}" includes="*/aapt" perm="ugo+rx"/>
    <copy todir="${classes.tools.dir}">
      <fileset dir="${lib.dir}/android/tools" includes="*/zipalign" />
    </copy>
    <chmod dir="${classes.tools.dir}" includes="*/zipalign" perm="ugo+rx"/>

    <!-- jar up the classes and resource files -->
    <jar destfile="${run.lib.dir}/BuildServer.jar" filesonly="true">
      <fileset dir="${BuildServer-class.dir}" />
    </jar>
  </target>

  <!-- =====================================================================
       CopyToRunLibDir: creates the build/run/lib directory and copies jars
                        needed to compile the build server classes
       ===================================================================== -->
  <target name="CopyToRunLibDir"
          depends="init,common_CommonUtils,common_CommonVersion">
    <mkdir dir="${run.lib.dir}" />
    <copy todir="${run.lib.dir}" flatten="true">
      <fileset dir="${local.lib.dir}" includes="*.jar"/>
      <fileset dir="${build.dir}" includes="common/CommonUtils.jar" />
      <fileset dir="${build.dir}" includes="common/CommonVersion.jar" />
      <fileset dir="${lib.dir}" includes="bouncycastle/bcprov-jdk15on-149.jar"/>
      <fileset dir="${lib.dir}" includes="bouncycastle/bcpkix-jdk15on-149.jar"/>
      <fileset dir="${lib.dir}" includes="android/tools/sdklib.jar"/>
      <fileset dir="${lib.dir}" includes="guava/guava-14.0.1.jar"/>
      <fileset dir="${lib.dir}" includes="commons-io/commons-io-2.0.1.jar"/>
      <fileset dir="${lib.dir}" includes="args4j/args4j-2.0.18.jar"/>
      <fileset dir="${lib.dir}" includes="json/json.jar" />
    </copy>
  </target>

  <!-- =====================================================================
       GenStarterAppSrcZip
       ===================================================================== -->
  <target name="GenStarterAppSrcZip"
          depends="init">
    <!-- Note that if you want to pre-generate an android.keystore file for use in signing the
         AppInventorPhoneApp.apk (i.e. the stem cell app) you should put that file in the
         ${appinventor.dir}/aiphoneapp directory and add 'android.keystore' to the includes
         list below.
      -->
    <zip destfile="${local.build.dir}/aiphoneapp.zip" basedir="${appinventor.dir}/aiphoneapp" filesonly="true"
         includes="src/**/*,youngandroidproject/*" />
  </target>

  <!-- =====================================================================
       CheckStarterApp: Sets the StarterApp.uptodate property to true if
                        the starter app needs to be rebuilt. This can happen
                        if the starter app source files have changed, or if
                        any of the build server jars have changed.
       ===================================================================== -->
  <target name="CheckStarterApp"
          depends="GenStarterAppSrcZip,BuildServer">
    <uptodate property="StarterApp.uptodate" targetfile="${public.build.dir}/AppInventorPhoneApp.apk">
      <srcfiles file="${local.build.dir}/aiphoneapp.zip"/>
      <srcfiles dir="${run.lib.dir}" includes="*.jar"/>
    </uptodate>
  </target>

  <!-- =====================================================================
       StarterApp: builds ../build/buildserver/AppInventorPhoneApp.apk
       ===================================================================== -->
  <target name="StarterApp"
          depends="CheckStarterApp"
          unless="StarterApp.uptodate">
    <java classname="com.google.appinventor.buildserver.Main" fork="true" failonerror="true">
      <classpath>
        <fileset dir="${run.lib.dir}" includes="*.jar" />
      </classpath>
      <sysproperty key="file.encoding" value="UTF-8" />
      <arg value="--inputZipFile" />
      <arg value="${local.build.dir}/aiphoneapp.zip" />
      <arg value="--userName" />
      <arg value="App Inventor" />
      <arg value="--isForStemCellApp" />
      <arg value="--outputDir" />
      <arg value="${public.build.dir}" />
    </java>
  </target>

  <!-- =====================================================================
       GenPlayAppSrcZip Version for the Google Play Store works over WiFi
       ===================================================================== -->
  <target name="GenPlayAppSrcZip"
          depends="init">
    <!-- Note that if you want to pre-generate an android.keystore file for use in signing the
         AppInventorDebugApp.apk (i.e. the stem cell app) you should put that file in the
         ${appinventor.dir}/aiplayapp directory and add 'android.keystore' to the includes
         list below.
      -->
    <zip destfile="${local.build.dir}/aiplayapp.zip" basedir="${appinventor.dir}/aiplayapp" filesonly="true"
         includes="src/**/*,youngandroidproject/*,assets/*" />
  </target>

  <!-- =====================================================================
       CheckPlayApp: Sets the PlayApp.uptodate property to true if
                        the starter app needs to be rebuilt. This can happen
                        if the starter app source files have changed, or if
                        any of the build server jars have changed.
       ===================================================================== -->
  <target name="CheckPlayApp"
          depends="GenPlayAppSrcZip,BuildServer">
    <uptodate property="PlayApp.uptodate" targetfile="${public.build.dir}/AppInventorCompanion.apk">
      <srcfiles file="${local.build.dir}/aiplayapp.zip"/>
      <srcfiles dir="${run.lib.dir}" includes="*.jar"/>
    </uptodate>
  </target>

  <!-- =====================================================================
       PlayApp: builds ../build/buildserver/AppInventorCompanion.apk
       ===================================================================== -->
  <target name="PlayApp"
          depends="CheckPlayApp"
          unless="PlayApp.uptodate">
    <java classname="com.google.appinventor.buildserver.Main" fork="true" failonerror="true">
      <classpath>
        <fileset dir="${run.lib.dir}" includes="*.jar" />
      </classpath>
      <sysproperty key="file.encoding" value="UTF-8" />
      <arg value="--inputZipFile" />
      <arg value="${local.build.dir}/aiplayapp.zip" />
      <arg value="--userName" />
      <arg value="App Inventor" />
      <arg value="--isForWirelessRepl" />
      <arg value="--outputDir" />
      <arg value="${public.build.dir}" />
    </java>
  </target>

  <!-- =====================================================================
       RunLocalBuildServer: Runs the build server
       ===================================================================== -->
  <target name="RunLocalBuildServer"
          depends="BuildServer">
    <java classname="com.google.appinventor.buildserver.BuildServer" fork="true" failonerror="true">
      <classpath>
        <fileset dir="${run.lib.dir}" includes="*.jar" />
      </classpath>
      <sysproperty key="file.encoding" value="UTF-8" />
    </java>
  </target>

  <!-- =====================================================================
       RunMain:
       Use a command like the following to build a single APK from a ZIP:
       ant RunMain -Dzip.file=$HOME/MyDownloads/ImageUpload.zip \
       -Duser.name=$USER -Doutput.dir=.
       ===================================================================== -->
  <target name="RunMain"
          depends="BuildServer">
    <java classname="com.google.appinventor.buildserver.Main" fork="true" failonerror="true">
      <classpath>
        <fileset dir="${run.lib.dir}" includes="*.jar" />
      </classpath>
      <sysproperty key="file.encoding" value="UTF-8" />
      <arg value="--inputZipFile" />
      <arg value="${zip.file}" />
      <arg value="--userName" />
      <arg value="${user.name}" />
      <arg value="--outputDir" />
      <arg value="${output.dir}" />
    </java>
  </target>

  <!-- =====================================================================
       BuildDeploymentTar: produces ../build/buildserver/BuildServer.tar
       ===================================================================== -->
  <target name="BuildDeploymentTar"
          depends="BuildServer">
    <tar destfile="${public.build.dir}/BuildServer.tar">
      <fileset dir="${run.dir}" includes="lib/*.jar" />
    </tar>
  </target>

  <!-- =====================================================================
       BuildServerTests: build and run the BuildServer tests and generate the output results
       ===================================================================== -->

  <path id="libsForBuildServerTests.path">
    <fileset dir="${run.lib.dir}" includes="*.jar"/>
    <pathelement location="${build.dir}/common/CommonTestUtils.jar" />
    <pathelement location="${build.dir}/components/AndroidRuntime.jar"/>
    <pathelement location="${lib.dir}/kawa/kawa-1.11-modified.jar" />
    <pathelement location="${lib.dir}/guava/guava-14.0.1.jar" />
    <pathelement location="${lib.dir}/commons-io/commons-io-2.0.1.jar" />
    <pathelement location="${lib.dir}/json/json.jar" />
    <pathelement location="${lib.dir}/junit/junit-4.8.2.jar" />
  </path>

  <path id="BuildServerTests.path">
    <path refid="libsForBuildServerTests.path"/>
    <pathelement location="${local.build.dir}/BuildServerTests.jar" />
  </path>

  <target name="BuildServerTests"
          depends="common_CommonTestUtils,components_AndroidRuntime,BuildServer"
          description="build and run the test suite" >
    <ai.dojunit aij-testingtarget="BuildServerTests"
                aij-dir="${buildserver.pkg}/" >
    </ai.dojunit>
  </target>

</project>
